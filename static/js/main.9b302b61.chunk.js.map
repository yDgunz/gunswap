{"version":3,"sources":["simulator/Toss.ts","simulator/SiteswapRegex.ts","simulator/Prop.ts","simulator/Siteswap.ts","simulator/TossPath.ts","simulator/Bezier.ts","simulator/JugglerConfig.ts","simulator/Pattern.ts","simulator/DwellPathSnapshot.ts","simulator/DwellPath.ts","ui/SyntaxHelp.tsx","search/Edge.ts","search/Search.ts","search/Node.ts","ui/PatternSettings.tsx","search/RandomPattern.ts","ui/JugglingScene.ts","ui/Viewport.tsx","ui/Search.tsx","ui/Animator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Hand","BounceType","TossType","CatchType","validToss","validMultiplex","validThrow","validSync","validBeat","validPass","ValidTossRe","RegExp","ValidMultiplexRe","ValidThrowRe","ValidSyncRe","ValidBeatRe","ValidPassRe","ValidSiteswapRe","ValidPassShorthandRe","PropType","defaultTossOrientation","vec3","normalize","Toss","siteswap","juggler","hand","dwellPath","numJugglers","defaultDwellRatio","numSurfaces","Object","classCallCheck","this","Juggler","TargetJuggler","Crossing","NumBeats","Siteswap","NumBounces","BounceOrder","NumSpins","DwellPath","DwellRatio","TossOrientation","RotationAxis","Hold","tossMatches","match","length","charCodeAt","parseInt","isPass","pIx","indexOf","dIx","parseFloat","substring","bounceIdentifierIx","bounceParamsIx","slice","search","undefined","i","isNaN","surfaceIx","push","numMissingBounces","HyperForce","HyperLift","Force","Lift","Any","tIx","Standard","tossTypeId","Claw","Penguin","cIx","catchTypeId","Right","Left","sIx","spinConfig","Math","floor","siteswapInput","_this","Beats","IsSync","IsMultiplex","IsPassingPattern","NumJugglers","replace","test","passingBeats","split","Error","forEach","beat","validPassShorthandMatch","SiteswapRegex","transformPassingShorthand","charAt","transformSymmetricSyncShorthand","siteswapMatch","beats","x","splice","createClass","key","value","newSiteswapStr","jugglerSiteswaps","jugglerBeats","j","pairs","reverse","join","dwellPaths","tossCollection","beatIx","dwellPathIx","singleBeatTossCollection","jugglerToss","jugglerIx","jugglerTosses","handTosses","splitToss","toss","handToss","propToss","Prop","Id","C","Radius","TossSchedule","Beat","GetTossPathPositionAndVelocity","curToss","nextToss","currentTime","totalTime","tossJugglerBodyPosition","tossJugglerBodyRotation","catchJugglerBodyPosition","catchJugglerBodyRotation","startPosition","GetPosition","endPosition","y","z","InterpolateBezierSpline","t","v_0","v_T","v_0scale","v_Tscale","matchVelocity","dwellPosition","C0","copy","add","scale","C1","c","interpolatedPath","c1","p0","p1","c0","c1prev","m0","m1","l0","sqrt","pow","_t","q","dwellPositionIx","BasePatternHeight","Pattern","DwellPaths","Props","TossCollection","States","Simulation","GetTossCollection","sumOfAllTosses","map","patterns","substr","sumThrows","numProps","Ball","maxHeight","propsQueue","curState","k","patternComplete","initComplete","propsLanding","landingLeft","shift","prop","landingRight","tossHand","catchHand","propToToss","propLandingIx","propLanding","concat","JSON","stringify","pop","parse","str","total","numStepsPerBeat","beatDuration","_this2","breakOnCollision","arguments","totalNumBeats","numSteps","hasCollision","patternSimulation","Jugglers","BeatDuration","NumStepsPerBeat","Positions","Rotations","jugglers","bodyPosition","bodyRotation","PI","sin","cos","BodyPositions","Array","fill","BodyRotations","LeftHandPositions","RightHandPositions","LeftElbowPositions","RightElbowPositions","LeftHandDirections","RightHandDirections","step","currentBeat","propIx","prevToss","_prop$GetPreviousCurr","GetPreviousCurrentAndNextTossForBeat","_prop$GetPreviousCurr2","slicedToArray","virtualCurrentTime","prevTossVirtualBeat","nextTossVirtualBeat","curTossVirtualBeat","tossTime","catchTime","prevTossTime","prevCatchTime","prevTossJugglerBodyPosition","prevTossJugglerBodyRotation","prevTossFlightTime","catchVelocity","tossVelocity","pos","Snapshots","handDirection","pos1","pos2","dist","distance","handNextToss","handLastToss","handNextTossVirtualBeat","scheduledToss","scheduledTossVirtualBeat","handPos","handLastTossVirtualBeat","catchingPropLastToss","tossedPropNextToss","emptyHandPath","Position","scheduledTossIx","tossSchedule","jugglerBodyPosition","jugglerBodyRotation","tossedPropCatchingJugglerBodyPosition","tossedPropCatchingJugglerBodyRotation","catchingPropTossJugglerBodyPosition","catchingPropTossJugglerBodyRotation","totalEmptyHandTime","rot","shoulderPosition","elbowPosition","getElbowPosition","handPosition","armAngle","armHalfLength","Hp","Hpp","th","atan2","magHp","u1","u2","h","Epp","Ep","E","highestPoint","lowestPoint","p","DefaultBallRotation","vec4","DwellPathSnapshot","input","empty","defaultRotation","Rotation","Empty","xyzMatch","xyz","rotationValues","dwellPathSnapshotRe","heldDwellPathSnapshots","emptyDwellPathSnapshots","startVelocity","endVelocity","startVelocityScale","endVelocityScale","additionalPathSnapshot","splinePath","a","adjustDwellPathSnapshotByHandAndJuggler","positionCopy","GetDwellPaths","ix","arr","SyntaxHelp","_Component","props","possibleConstructorReturn","getPrototypeOf","call","examplePatternSettings","react_default","createElement","className","syntaxExplanation","close","bind","assertThisInitialized","inherits","closeSyntaxHelp","dir","IconButton","iconProps","iconName","onClick","Component","GetEdgeValue","source","target","edgeValue","nextUp","LandingSchedule","newNodeLandingSchedule","multiplex","tossValue","tossValueString","toString","String","fromCharCode","last","FindSiteswaps","config","nodes","maxPeriod","includeMultiplex","options","buildNodes","node","reduce","b","nodeOption","nodeOptions","newNode","Edges","propDiff","GetNodes","MaxPeriod","NumProps","IncludeMultiplex","edges","SourceNode","TargetNode","Value","GetEdges","numSearches","siteswaps","formattedSiteswaps","origNodeIx","history","MaxSearches","MaxSiteswaps","nextNodeIx","validSiteswap","siteswapStartNode","MinPeriod","Sync","IncludeExcited","syncEdgeValue","asyncEdgeValue","exists","ssToMatch","patternsMatch","formattedSiteswap","edgeIx","exclude","Exclude","newHistory","p2","defaultPatternSettings","dwellRatio","PatternSettingsControls","state","Yaml","errorMessage","showSyntaxHelp","updatePatternSettingsInput","juggleRandomPattern","juggleInputPattern","juggle","setState","e","patternSettings","pattern","Simulate","updatePattern","message","round","random","dwellPathXPositions","dwellPathYPositions","dwellPathPositions","findRandomPattern","s","d","FindRandomPattern","animationSpeed","updateAnimationSpeed","Stack","MessageBar","messageBarType","MessageBarType","info","Link","href","severeWarning","isMultiline","horizontal","PrimaryButton","text","DefaultButton","Label","Modal","isOpen","onDismiss","isBlocking","SyntaxHelp_SyntaxHelp","TextField","multiline","onChange","autoAdjustHeight","Slider","label","min","max","defaultValue","showValue","onChanged","JugglerMeshMaterial","THREE","color","JugglingScene","container","width","height","scene","camera","renderer","propMeshes","jugglerMeshes","camRadius","camPhi","camTheta","startTime","isMouseDown","onMouseDownPosition","onMouseDownTheta","onMouseDownPhi","positionToLookAt","currentStep","userControllingStep","antialias","Date","getTime","UpdatePattern","setSize","domElement","addEventListener","event","onDocumentMouseMove","onDocumentMouseDown","onDocumentMouseUp","onDocumentMouseWheel","onDocumentTouchMove","onDocumentTouchStart","onDocumentTouchEnd","append","animate","patternProgress","highestLowest","GetHeighestAndLowestPositionInSimulation","updateCamera","aspect","updateProjectionMatrix","clientX","clientY","touches","newCamPhi","preventDefault","onMove","deltaY","position","lookAt","patternTimeElapsed","meshToRemove","remove","geometry","material","propMesh","mesh","set","addJugglerMeshes","meshes","jugglerPositions","BodyMesh","ShoulderHeight","vec3ToTHREEVector3","HeadMesh","leftShoulderPosition","rightShoulderPosition","leftHandPosition","rightHandPosition","leftElbowPosition","rightElbowPosition","LeftHandMesh","RightHandMesh","LeftElbowMesh","RightElbowMesh","LeftShoulderMesh","RightShoulderMesh","positionAndRotateArm","LeftBicepMesh","LeftForearmMesh","LeftWristMesh","RightBicepMesh","RightForearmMesh","RightWristMesh","rotation","setFromUnitVectors","setRotationFromQuaternion","requestAnimationFrame","render","bicepMesh","forearmMesh","wristMesh","armDirection","subVectors","arrow","clone","setFromVector3","toVector3","newPosition","addVectors","multiplyScalar","side","flatShading","radius","radius1","radius2","cylinder","getHandMesh","getJointMesh","getArmCylinder","ArmHalfLength","Viewport","CanvasContainerRef","jugglingScene","debugInfo","sliderValue","UpdateStep","offsetWidth","window","innerHeight","Resize","_this3","debug","ref","DOMNodeRef","updateStep","Search","Siteswaps","Input","onRenderCell","findSiteswaps","updateInput","item","index","id","List","items","Animator","onresize","forceUpdate","PatternSettings_PatternSettingsControls","Search_Search","viewport","ui_Viewport","innerWidth","Pivot","PivotItem","headerText","itemIcon","initializeIcons","App","ui_Animator","Boolean","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b302b61.chunk.js","sourcesContent":["import { DwellPath } from \"./DwellPath\";\r\nimport { vec3 } from \"@tlaukkan/tsm\";\r\nimport { ValidTossRe } from \"./SiteswapRegex\";\r\n\r\nexport enum Hand {\r\n\tLeft = 0,\r\n\tRight = 1,\r\n\tAny = 2\r\n}\r\n\r\nexport enum BounceType {\r\n    Force,\r\n    HyperForce,\r\n    Lift,\r\n\tHyperLift,\r\n\tAny\r\n}\r\n\r\nexport enum TossType {\r\n    Standard,\r\n    Claw,\r\n    Penguin\r\n}\r\n\r\nexport enum CatchType {\r\n    Standard,\r\n    Claw,\r\n    Penguin\r\n}\r\n\r\nconst defaultTossOrientation = new vec3([.1,.1,1]).normalize();\r\n\r\nexport class Toss {\r\n\t\r\n\tpublic readonly Juggler: number;\r\n\tpublic readonly TargetJuggler: number;\r\n\tpublic readonly Hand: Hand;\r\n\tpublic readonly Crossing: boolean;\r\n\tpublic readonly NumBeats: number;\r\n\tpublic readonly Siteswap: string;\r\n\tpublic readonly NumBounces: number;\r\n\tpublic readonly BounceOrder: number[];\r\n\tpublic readonly BounceType?: BounceType;\r\n\tpublic readonly NumSpins: number;\r\n\tpublic readonly DwellPath : DwellPath;\r\n\tpublic readonly DwellRatio : number;\r\n\tpublic readonly TossType : TossType\r\n\tpublic readonly CatchType : CatchType;\r\n\tpublic readonly TossOrientation : vec3;\r\n\tpublic readonly RotationAxis : vec3;\r\n\tpublic readonly Hold : boolean;\r\n\t\r\n\tconstructor(siteswap : string, juggler : number, hand : Hand, dwellPath : DwellPath, numJugglers : number, defaultDwellRatio : number, numSurfaces: number) {\r\n\t\tthis.Juggler = juggler;\r\n\t\tthis.Hand = hand;\r\n\t\tthis.Siteswap = siteswap;\r\n\t\tthis.DwellPath = dwellPath;\r\n\r\n\t\tvar tossMatches = siteswap.match(ValidTossRe);\r\n\t\tif (!tossMatches || tossMatches.length > 1) {\r\n\t\t\tthrow \"Invalid toss string\"\r\n\t\t} else {\r\n\t\t\t/* will work from \"a\" to \"o\" */\r\n\t\t\tthis.NumBeats = (siteswap[0].charCodeAt(0) >= 97 && siteswap[0].charCodeAt(0) <= 119) ? siteswap[0].charCodeAt(0)-87 : parseInt(siteswap[0]);\r\n\t\t\t\r\n\t\t\t// by default the target juggler is the tossing juggler\r\n\t\t\tthis.TargetJuggler = juggler;\r\n\t\t\tvar isPass = false;\r\n\t\t\tvar pIx = siteswap.indexOf(\"P\");\t\t\t\r\n\t\t\tif (\r\n\t\t\t\tpIx > 0 &&\r\n\t\t\t\tsiteswap[pIx+1] != \"}\" // check that the next character isn't a }, in which case this is a catch/toss penguin modifier\r\n\t\t\t) {\t\t\t\t\r\n\t\t\t\tif (numJugglers > 2) {\t\t\t\t\t\r\n\t\t\t\t\tthis.TargetJuggler = parseInt(siteswap[pIx+1])-1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.TargetJuggler = 1 - juggler;\r\n\t\t\t\t}\r\n\t\t\t\tisPass = true;\r\n\t\t\t}\r\n\r\n\t\t\tvar dIx = siteswap.indexOf(\"D\");\r\n\t\t\tif (dIx > 0) {\r\n\t\t\t\tthis.DwellRatio = parseFloat(siteswap.substring(dIx+2,siteswap.indexOf(\"}\")));\r\n\t\t\t} else {\r\n\t\t\t\tthis.DwellRatio = defaultDwellRatio;\r\n\t\t\t}\r\n\r\n\t\t\tthis.NumBounces = 0;\r\n\t\t\tthis.BounceOrder = [];\r\n\t\t\tvar bounceIdentifierIx = siteswap.indexOf(\"B\");\r\n\t\t\tif (bounceIdentifierIx > 0) {\r\n\t\t\t\tvar bounceParamsIx = siteswap.slice(bounceIdentifierIx).search(/\\d/) + bounceIdentifierIx; // find index of next number indicating # bounces and bounce order\r\n\t\t\t\tif (siteswap[bounceIdentifierIx+1] == \"{\" && bounceParamsIx != undefined) {\r\n\t\t\t\t\tthis.NumBounces = parseInt(siteswap[bounceParamsIx]);\r\n\t\t\t\t\tfor (var i = bounceParamsIx + 1; i < siteswap.length; i++) {\r\n\t\t\t\t\t\tif (!isNaN(siteswap[i] as any)) {\r\n\t\t\t\t\t\t\tvar surfaceIx = parseInt(siteswap[i]);\r\n\t\t\t\t\t\t\tif (surfaceIx >= numSurfaces) {\r\n\t\t\t\t\t\t\t\tthrow \"Bounce surface index out of range\";\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.BounceOrder.push(surfaceIx);\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.NumBounces = 1;\r\n\t\t\t\t\tthis.BounceOrder = [0];\r\n\t\t\t\t}\r\n\t\t\t\tif (this.BounceOrder.length < this.NumBounces) {\r\n\t\t\t\t\tvar numMissingBounces = this.NumBounces - this.BounceOrder.length;\r\n\t\t\t\t\tfor (var i = 0; i < numMissingBounces; i++) {\r\n\t\t\t\t\t\tthis.BounceOrder.push(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (this.NumBounces > 0) {\r\n\t\t\tif (siteswap.match(\"HF\")) {\r\n\t\t\t\tthis.BounceType = BounceType.HyperForce;\r\n\t\t\t} else if (siteswap.match(\"HL\")) {\r\n\t\t\t\tthis.BounceType = BounceType.HyperLift;\r\n\t\t\t} else if (siteswap.match(\"F\")) {\r\n\t\t\t\tthis.BounceType = BounceType.Force;\r\n\t\t\t} else if (siteswap.match(\"L\")) {\r\n\t\t\t\tthis.BounceType = BounceType.Lift;\r\n\t\t\t} else {\r\n\t\t\t\tthis.BounceType = BounceType.Any;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar tIx = siteswap.indexOf(\"T\");\r\n\t\tthis.TossType = TossType.Standard;\r\n\t\tif (tIx > 0) {\r\n\t\t\tvar tossTypeId = siteswap.substring(tIx+2,siteswap.indexOf('}',tIx));\r\n\t\t\tif (tossTypeId.match(\"C\")) {\r\n\t\t\t\tthis.TossType = TossType.Claw;\r\n\t\t\t} else if (tossTypeId.match(\"P\")) {\r\n\t\t\t\tthis.TossType = TossType.Penguin;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar cIx = siteswap.indexOf(\"C\");\r\n\t\tthis.CatchType = CatchType.Standard;\r\n\t\tif (cIx > 0) {\r\n\t\t\tvar catchTypeId = siteswap.substring(cIx+2,siteswap.indexOf('}',cIx));\r\n\t\t\tif (catchTypeId.match(\"C\")) {\r\n\t\t\t\tthis.CatchType = CatchType.Claw;\r\n\t\t\t} else if (catchTypeId.match(\"P\")) {\r\n\t\t\t\tthis.CatchType = CatchType.Penguin;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.Crossing = this.NumBeats % 2 == 1;\r\n\t\t// if the second character is an \"x\" then crossing is flipped\r\n\t\tif (siteswap.length > 1 && siteswap[1] == \"x\") {\r\n\t\t\tthis.Crossing = !this.Crossing;\r\n\t\t}\r\n\r\n\t\t// TODO - can the animator actually support this?\r\n\t\tif (siteswap[0] == \"R\") {\r\n\t\t\tthis.Hand = Hand.Right;\r\n\t\t} else if (siteswap[0] == \"L\") {\r\n\t\t\tthis.Hand = Hand.Left;\r\n\t\t}\r\n\r\n\t\tthis.TossOrientation = defaultTossOrientation;\r\n\t\tvar sIx = siteswap.indexOf(\"S\");\t\t\t\r\n\t\tif (sIx > 0) {\t\t\t\r\n\t\t\tvar spinConfig = siteswap.substring(sIx+2,siteswap.indexOf('}',sIx)).match(/-?\\d+(\\.\\d+)?/g);\r\n\t\t\tif (spinConfig) {\r\n\t\t\t\tthis.NumSpins = parseFloat(spinConfig[0]);\r\n\t\t\t\tif (spinConfig.length > 1) {\r\n\t\t\t\t\tthis.TossOrientation = new vec3([\r\n\t\t\t\t\t\tparseFloat(spinConfig[1]),\r\n\t\t\t\t\t\tparseFloat(spinConfig[2]),\r\n\t\t\t\t\t\tparseFloat(spinConfig[3])\r\n\t\t\t\t\t]).normalize();\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Invalid spin configuration\";\r\n\t\t\t}\t\t\r\n\t\t} else {\t\t\t\t\t\r\n\t\t\tthis.NumSpins = Math.floor(this.NumBeats/2) + .2;\r\n\t\t\t// passes get an extra bit of spin\r\n\t\t\tif (isPass) {\r\n\t\t\t\tthis.NumSpins += .1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.Hold = this.NumBeats == 2 && !this.Crossing && siteswap.indexOf(\"A\") == -1;\r\n\t\tthis.RotationAxis = new vec3([1,0,0]);\r\n\r\n    }    \r\n}","// construct the various regex patterns. see blog post for details about this\r\nvar validToss = \"([\\\\da-o])x?A?(P\\\\d?)?(C{(C|P)?})?(T{(C|P)?})?(B({\\\\d*(L|HL|F|HF)?\\\\d*})?)?(S{-?\\\\d+(.\\\\d+)?(,-?\\\\d+(.\\\\d+)?,-?\\\\d+(.\\\\d+)?,-?\\\\d+(.\\\\d+)?)?})?(D{\\\\d*\\\\.?\\\\d*})?\";\r\nvar validMultiplex = \"\\\\[(\" + validToss + \")+\\\\]\";\r\nvar validThrow = validToss + \"|\" + validMultiplex;\r\nvar validSync = \"\\\\((\" + validThrow + \"),(\" + validThrow + \")\\\\)\";\r\nvar validBeat = \"(\" + validThrow + \"|\" + validSync + \")\";\r\nvar validPass = \"<\" + validBeat + \"(\\\\|\" + validBeat + \")+>\";\r\nvar validSiteswap = \"^(\" + validPass + \")+|(\" + validBeat + \")+\\\\*?$\";\r\n\r\n// use this to identify passing pattern shorthand like <3P333|3P333>\r\n// we will then convert those patterns to standard notation like <3P|3P><3|3><3|3><3|3> \r\n// and parse them as we did before\r\nvar validPassShorthand = \"<\" + validBeat + \"+(\\\\|\" + validBeat + \"+)+>\"; \r\n\r\nexport const ValidTossRe = new RegExp(validToss,\"g\");\r\nexport const ValidMultiplexRe = new RegExp(validMultiplex,\"g\");\r\nexport const ValidThrowRe = new RegExp(validThrow,\"g\");\r\nexport const ValidSyncRe = new RegExp(validSync,\"g\");\r\nexport const ValidBeatRe = new RegExp(validBeat,\"g\");\r\nexport const ValidPassRe = new RegExp(validPass,\"g\");\r\nexport const ValidSiteswapRe = new RegExp(validSiteswap,\"g\");\r\nexport const ValidPassShorthandRe = new RegExp(validPassShorthand,\"g\");","import { Toss, Hand } from \"./Toss\";\r\n\r\nexport enum PropType {\r\n\tBall,\r\n\tClub,\r\n\tRing\r\n}\r\n\r\nexport class Prop {\t\r\n\t\r\n\tTossSchedule : ScheduledToss[]\r\n\r\n\tconstructor(public readonly Id : number, public readonly PropType : PropType, public readonly C : number, public readonly Radius : number) {\r\n\t\tthis.TossSchedule = [];\r\n\t}\r\n\r\n\tpublic GetPreviousCurrentAndNextTossForBeat(beat : number) : [ScheduledToss,ScheduledToss,ScheduledToss] {\r\n\t\tfor (var i = 0; i < this.TossSchedule.length; i++) {\r\n\t\t\tif (i == this.TossSchedule.length-1 || this.TossSchedule[i].Beat <= beat && this.TossSchedule[i+1].Beat > beat) {\r\n\t\t\t\t\r\n\t\t\t\tvar prevToss : ScheduledToss;\r\n\t\t\t\tif (i == 0) {\r\n\t\t\t\t\tprevToss = this.TossSchedule[this.TossSchedule.length-1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprevToss = this.TossSchedule[i-1];\r\n\t\t\t\t}\r\n\t\t\t\tvar curToss : ScheduledToss = this.TossSchedule[i];\r\n\t\t\t\tvar nextToss : ScheduledToss;\r\n\t\t\t\tif (i == this.TossSchedule.length-1) {\r\n\t\t\t\t\tnextToss = this.TossSchedule[0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnextToss = this.TossSchedule[i+1];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [prevToss, curToss, nextToss];\r\n\r\n\t\t\t} \r\n\t\t}\r\n\t\tthrow \"Unable to determine previous, current, and next toss for beat\";\r\n\t} \r\n\r\n}\r\n\r\nexport interface ScheduledToss {\r\n\treadonly Beat : number;\r\n\treadonly Hand : Hand;\r\n\treadonly Toss : Toss;\r\n}","import * as SiteswapRegex from \"./SiteswapRegex\";\r\nimport { DwellPath } from \"./DwellPath\";\r\nimport { Toss, Hand } from \"./Toss\";\r\n\r\nexport class Siteswap {\r\n    \r\n    public readonly Siteswap : string;\r\n\tpublic readonly Beats : string[];\r\n\tpublic readonly IsSync : boolean;\r\n\tpublic readonly IsMultiplex : boolean;\t\r\n\tpublic readonly IsPassingPattern : boolean;\r\n\tpublic readonly NumJugglers : number;\r\n\r\n    constructor(siteswapInput: string) {\r\n        this.Siteswap = siteswapInput.replace(/\\s/g,\"\");\r\n        this.NumJugglers = 1;\r\n        this.IsPassingPattern = /<[^ ]+>/.test(this.Siteswap);\r\n        \r\n        if (this.IsPassingPattern) {\r\n\t\t\tvar passingBeats = this.Siteswap.match(/<[^ <>]+>/g);\r\n\t\t\tif (passingBeats) {\r\n\t\t\t\tthis.NumJugglers = passingBeats[0].split(\"|\").length;\r\n\r\n\t\t\t\t/* \r\n\t\t\t\t\tcheck to make sure each beat in the passing pattern has the same number of jugglers \r\n\t\t\t\t\tif a passing pattern only has 1 juggler than it's automatically a mismatch\r\n\t\t\t\t*/\r\n\t\t\t\tif(this.NumJugglers == 1) {\r\n\t\t\t\t\tthrow new Error(\"Cannot have passing pattern with 1 juggler.\");\r\n\t\t\t\t};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t// ensure all beats have the same number of jugglers\r\n\t\t\t\tpassingBeats.forEach(beat => {\r\n\t\t\t\t\tif (beat.split(\"|\").length != this.NumJugglers) {\r\n\t\t\t\t\t\tthrow new Error(\"Each beat in passing siteswap must contain same number of jugglers\");\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\t// if the input string was shorthand for a passing pattern\r\n\t\t// then replace the siteswap string with a fully formed passing pattern\r\n\t\t// ie. transform <33|33> to <3|3><3|3>\r\n\t\tvar validPassShorthandMatch = this.Siteswap.match(SiteswapRegex.ValidPassShorthandRe);\r\n\t\tif (validPassShorthandMatch != null && validPassShorthandMatch[0] == this.Siteswap) {\r\n\t\t\tthis.Siteswap = this.transformPassingShorthand();\r\n\t\t}\r\n\r\n\t\t// if the input string was a synchronous siteswap ending in *\r\n\t\t// then we repeat the input pattern, but swap the throws in each pair\r\n\t\t// to make the pattern symmetric\r\n\t\t// e.g. transform (6x,4)* to (6x,4)(4,6x)\r\n\t\tif (this.Siteswap.charAt(this.Siteswap.length-1) == \"*\") {\r\n\t\t\tthis.Siteswap = this.transformSymmetricSyncShorthand();\r\n\t\t}\r\n\r\n\t\tvar siteswapMatch = this.Siteswap.match(SiteswapRegex.ValidSiteswapRe);\r\n\t\tif (siteswapMatch !== null && siteswapMatch[0] === this.Siteswap) {\t\t\t\r\n\t\t\tthis.IsMultiplex = this.Siteswap.match(SiteswapRegex.ValidMultiplexRe) ? true : false;\r\n\t\t\tthis.IsSync = this.Siteswap.match(SiteswapRegex.ValidSyncRe) ? true : false;\r\n\t\t} else {\r\n\t\t\tthrow \"Invalid siteswap syntax.\";\r\n\t\t} \r\n\r\n\t\t// break the siteswap into individual beats\r\n\t\tvar beats = this.IsPassingPattern ? this.Siteswap.match(SiteswapRegex.ValidPassRe) : this.Siteswap.match(SiteswapRegex.ValidBeatRe);\r\n\t\tthis.Beats = [];\r\n\t\tif (beats) {\t\t\t\r\n\t\t\tbeats.forEach(x => {this.Beats.push(x)});\r\n\t\t}\r\n\r\n\t\t// add (0,0) after each synchronous throw - this prevents the halving issue\r\n\t\tfor(var i = 0; i < this.Beats.length; i++) {\r\n\t\t\tif (this.Beats[i].match(SiteswapRegex.ValidSyncRe)) {\r\n\t\t\t\tthis.Beats.splice(i+1,0,'(0,0)');\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n    }    \r\n\t\r\n\tprivate transformPassingShorthand() : string {\r\n        var newSiteswapStr = \"\";\r\n\t\tvar jugglerSiteswaps = this.Siteswap.split('|');\r\n\t\tvar jugglerBeats = [];\r\n\t\tfor(var i = 0; i < jugglerSiteswaps.length; i++) {\r\n\t\t\tjugglerBeats.push(jugglerSiteswaps[i].match(SiteswapRegex.ValidBeatRe));\r\n\t\t}\t\t\r\n\t\tfor (var i = 0; i < jugglerBeats[0]!.length; i++) {\r\n\t\t\tnewSiteswapStr += \"<\";\r\n\t\t\tfor (var j = 0; j < jugglerBeats.length; j++) {\r\n\t\t\t\tnewSiteswapStr += jugglerBeats[j]![i];\r\n\t\t\t\tif (j < jugglerBeats.length - 1) {\r\n\t\t\t\t\tnewSiteswapStr += \"|\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnewSiteswapStr += \">\";\r\n\t\t}\r\n\t\treturn newSiteswapStr;\r\n\t}\r\n\t\r\n\tprivate transformSymmetricSyncShorthand() : string {\r\n\t\tvar newSiteswapStr = this.Siteswap.slice(0,-1);\r\n\t\tvar pairs = newSiteswapStr.match(SiteswapRegex.ValidSyncRe);\r\n\t\tif (pairs !== null) {\r\n\t\t\tfor (var i = 0; i < pairs.length; i++) {\r\n\t\t\t\tnewSiteswapStr += \"(\" + pairs[i].match(SiteswapRegex.ValidThrowRe)!.reverse().join(\",\") + \")\";\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn newSiteswapStr\r\n\t}\r\n\r\n\tpublic GetTossCollection(dwellPaths : DwellPath[], defaultDwellRatio : number, numSurfaces : number) : Toss[][] {\r\n\t\tvar tossCollection:Toss[][] = [];\r\n\r\n\t\t// for each beat get the tosses\r\n\t\tvar beatIx = 0;\r\n\t\tvar dwellPathIx = 0;\r\n\t\tdo {\r\n\t\t\r\n\t\t\tvar beat = this.Beats[beatIx];\r\n\t\t\tbeatIx++;\r\n\t\t\tif (beatIx == this.Beats.length) {\r\n\t\t\t\tbeatIx = 0;\r\n\t\t\t}\r\n\r\n\t\t\tvar singleBeatTossCollection:Toss[] = [];\r\n\r\n\t\t\tvar jugglerTosses;\r\n\t\t\tif (beat.match(SiteswapRegex.ValidPassRe)) {\r\n\t\t\t\tjugglerTosses = beat.match(SiteswapRegex.ValidBeatRe);\r\n\t\t\t} else {\r\n\t\t\t\tjugglerTosses = [beat];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tjugglerTosses!.forEach((jugglerToss, jugglerIx, jugglerTosses) => {\r\n\t\t\t\tvar handTosses = [];\r\n\t\t\t\tif (jugglerToss.match(SiteswapRegex.ValidSyncRe)) {\r\n\t\t\t\t\tvar splitToss = jugglerToss.split(\",\");\t\r\n\t\t\t\t\thandTosses.push({hand: Hand.Left, toss: splitToss[0]});\r\n\t\t\t\t\thandTosses.push({hand: Hand.Right, toss: splitToss[1]});\r\n\t\t\t\t} else {\r\n\t\t\t\t\thandTosses.push({hand: Hand.Any, toss: jugglerToss})\r\n\t\t\t\t}\r\n\r\n\t\t\t\thandTosses.forEach(handToss => {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar dwellPath = dwellPaths[dwellPathIx];\r\n\t\t\t\t\tdwellPathIx++;\r\n\t\t\t\t\tif (dwellPathIx == dwellPaths.length) {\r\n\t\t\t\t\t\tdwellPathIx = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar propTosses = handToss.toss.match(SiteswapRegex.ValidTossRe);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpropTosses!.forEach(propToss => {\r\n\t\t\t\t\t\tvar toss = new Toss(\r\n\t\t\t\t\t\t\tpropToss,\r\n\t\t\t\t\t\t\tjugglerIx, \r\n\t\t\t\t\t\t\thandToss.hand,\r\n\t\t\t\t\t\t\tdwellPath,\r\n\t\t\t\t\t\t\tjugglerTosses.length,\r\n\t\t\t\t\t\t\tdefaultDwellRatio,\r\n\t\t\t\t\t\t\tnumSurfaces\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tsingleBeatTossCollection.push(toss);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// don't use up a dwell path on a 0 throw\r\n\t\t\t\t\t\tif (toss.NumBeats == 0) {\r\n\t\t\t\t\t\t\tdwellPathIx--; \r\n\t\t\t\t\t\t\tif (dwellPathIx < 0) {\r\n\t\t\t\t\t\t\t\tdwellPathIx = dwellPaths.length-1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t});\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\ttossCollection.push(singleBeatTossCollection);\r\n\t\t} while (!(beatIx == 0 && dwellPathIx == 0))\r\n\r\n\t\treturn tossCollection;\r\n\r\n\t}\r\n\r\n}","import { ScheduledToss } from \"./Prop\";\r\nimport { vec3 } from \"@tlaukkan/tsm\";\r\n\r\nexport function GetTossPathPositionAndVelocity(\r\n\tcurToss : ScheduledToss, \r\n\tnextToss: ScheduledToss, \r\n\tcurrentTime: number, \r\n\ttotalTime: number,\r\n\ttossJugglerBodyPosition : vec3,\r\n\ttossJugglerBodyRotation : number,\r\n\tcatchJugglerBodyPosition : vec3,\r\n\tcatchJugglerBodyRotation : number\r\n) : [vec3,vec3] {\r\n\t// figure out flight path\r\n\tvar startPosition = curToss.Toss.DwellPath.GetPosition(1, curToss.Hand, new vec3(), new vec3(), 0, 0, null, tossJugglerBodyPosition, tossJugglerBodyRotation);\r\n\tvar endPosition = nextToss.Toss.DwellPath.GetPosition(0, nextToss.Hand, new vec3(), new vec3(), 0, 0, null, catchJugglerBodyPosition, catchJugglerBodyRotation);\r\n\r\n\treturn [\r\n\t\tnew vec3([\r\n\t\t\tstartPosition.x + (endPosition.x-startPosition.x)*currentTime/totalTime,\r\n\t\t\tstartPosition.y + (endPosition.y - startPosition.y + .5*9.8*totalTime*totalTime)*currentTime/totalTime - .5*9.8*currentTime*currentTime,\r\n\t\t\tstartPosition.z + (endPosition.z-startPosition.z)*currentTime/totalTime\r\n\t\t]),\r\n\t\tnew vec3([\r\n\t\t\t(endPosition.x-startPosition.x)/totalTime,\r\n\t\t\t(endPosition.y - startPosition.y +.5*9.8*totalTime*totalTime)/totalTime - 9.8*currentTime,\r\n\t\t\t(endPosition.z-startPosition.z)/totalTime\r\n\t\t])\r\n\t];\r\n\t\r\n}","import { vec3 } from \"@tlaukkan/tsm\";\r\nimport { DwellPath } from \"./DwellPath\";\r\n\r\nexport function InterpolateBezierSpline(\r\n\tdwellPath : vec3[],\r\n\tt : number, // from 0 to 1, how far to interpolate\r\n\tv_0 : vec3,\r\n\tv_T : vec3,\r\n\tv_0scale : number,\r\n\tv_Tscale : number,\r\n\tmatchVelocity : boolean\r\n) : vec3 {\r\n\r\n\tvar dwellPosition : vec3;\r\n\r\n\tif (t == 0) {\r\n\t\tdwellPosition = dwellPath[0];\r\n\t} else if (t == 1) {\r\n\t\tdwellPosition = dwellPath[dwellPath.length-1];\r\n\t} else {\r\n\r\n\t\t/* if P is just one point, duplicate it */\r\n\t\tif (dwellPath.length == 1) {\r\n\t\t\tdwellPath.push(dwellPath[0]);\r\n\t\t}\t\t\t\r\n\r\n\t\tvar C0 = dwellPath[0].copy();\r\n\t\tC0.add(v_0.copy().scale(v_0scale));\t// factor in how much the velocity impacts the path \r\n\t\tC0.add(v_0.copy().normalize().scale(0.1)); // make sure to consider the direction of the velocity regardless of the v_0scale\r\n\r\n\t\tvar C1 = dwellPath[dwellPath.length-1].copy();\r\n\t\tC1.add(v_T.copy().scale(-v_Tscale));\r\n\t\tC1.add(v_T.copy().normalize().scale(-0.1));\r\n\r\n\t\tvar C = [C0,C1];\r\n\t\t\t\r\n\t\tvar eps = .00001;\r\n\r\n\t\tvar c : vec3[] = [];\r\n\t\tvar interpolatedPath = [];\r\n\r\n\t\tfor (var i = 0; i < dwellPath.length-1; i++) {\r\n\t\t\tvar p0 = dwellPath[i];\r\n\t\t\tvar p1 = dwellPath[i+1];\r\n\r\n\t\t\tvar c0 : vec3, c1 : vec3;\r\n\r\n\t\t\tif (i == 0) {\r\n\t\t\t\tc0 = C[0];\r\n\t\t\t} else {\r\n\t\t\t\tvar c1prev = c[c.length-1];\r\n\t\t\t\tvar c0 = new vec3([p0.x + (p0.x - c1prev.x), p0.y + (p0.y - c1prev.y), p0.z + (p0.z - c1prev.z)]);\r\n\t\t\t\tc.push(c0);\r\n\t\t\t}\r\n\r\n\t\t\tif (i+1 == dwellPath.length-1) {\r\n\t\t\t\tc1 = C[1];\r\n\t\t\t} else {\r\n\t\t\t\tvar m0 = new vec3([(dwellPath[i].x+dwellPath[i+1].x)/2, (dwellPath[i].y+dwellPath[i+1].y)/2, (dwellPath[i].z+dwellPath[i+1].z)/2]);\r\n\t\t\t\tvar m1 = new vec3([(dwellPath[i+1].x+dwellPath[i+2].x)/2, (dwellPath[i+1].y+dwellPath[i+2].y)/2, (dwellPath[i+1].z+dwellPath[i+2].z)/2]);\r\n\t\t\t\tvar l0 = Math.sqrt( Math.pow(dwellPath[i].x - dwellPath[i+1].x,2) + Math.pow(dwellPath[i].y - dwellPath[i+1].y,2) + Math.pow(dwellPath[i].z - dwellPath[i+1].z,2) );\r\n\t\t\t\tvar l1 = Math.sqrt( Math.pow(dwellPath[i+1].x - dwellPath[i+2].x,2) + Math.pow(dwellPath[i+1].y - dwellPath[i+2].y,2) + Math.pow(dwellPath[i+1].z - dwellPath[i+2].z,2) );\r\n\t\t\t\tvar _t = l0/(l0+l1);\r\n\t\t\t\tvar q = new vec3([(1-_t)*m0.x + _t*m1.x, (1-_t)*m0.y + _t*m1.y, (1-_t)*m0.z + _t*m1.z]);\r\n\t\t\t\tc1 = new vec3([p1.x + (m0.x-q.x), p1.y + (m0.y-q.y), p1.z + (m0.z-q.z)]);\r\n\t\t\t\tc.push(c1);\r\n\t\t\t}\r\n\r\n\t\t\tfor (var _t = 0; _t <= 1+eps; _t += .02) {\r\n\t\t\t\tinterpolatedPath.push(\r\n\t\t\t\t\tnew vec3([\r\n\t\t\t\t\t\tMath.pow(1-_t,3)*p0.x + 3*Math.pow(1-_t,2)*_t*c0.x + 3*(1-_t)*Math.pow(_t,2)*c1.x + Math.pow(_t,3)*p1.x,\r\n\t\t\t\t\t\tMath.pow(1-_t,3)*p0.y + 3*Math.pow(1-_t,2)*_t*c0.y + 3*(1-_t)*Math.pow(_t,2)*c1.y + Math.pow(_t,3)*p1.y,\r\n\t\t\t\t\t\tMath.pow(1-_t,3)*p0.z + 3*Math.pow(1-_t,2)*_t*c0.z + 3*(1-_t)*Math.pow(_t,2)*c1.z + Math.pow(_t,3)*p1.z\r\n\t\t\t\t\t])\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// TODO - implement velocity matching feature\r\n\t\t\t\t/*\r\n\t\t\t\tif (interpolatedPath.length == 1) {\r\n\t\t\t\t\tinterpolatedPath.last().dist = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinterpolatedPath.last().dist = interpolatedPath[interpolatedPath.length-2].dist + Math.sqrt(Math.pow(interpolatedPath.last().x-interpolatedPath[interpolatedPath.length-2].x,2)+Math.pow(interpolatedPath.last().y-interpolatedPath[interpolatedPath.length-2].y,2)+Math.pow(interpolatedPath.last().z-interpolatedPath[interpolatedPath.length-2].z,2));\r\n\t\t\t\t}\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar dwellPositionIx = Math.floor(t*interpolatedPath.length);\r\n\t\t\r\n\t\tdwellPosition = interpolatedPath[dwellPositionIx < 0 ? 0 : dwellPositionIx];\t\t\r\n\t}\r\n\r\n\treturn dwellPosition;\r\n\r\n}","export const ShoulderZOffset : number = .25;\r\nexport const ShoulderXOffset : number = .225;\r\nexport const ShoulderHeight : number = 1.425;\r\nexport const ArmHalfLength : number = .3;\r\nexport const BasePatternHeight : number = 1.05;\r\nexport const ArmAngle : number = .2;","import { Siteswap as SiteswapClass } from \"./Siteswap\";\r\nimport { DwellPath } from \"./DwellPath\";\r\nimport * as SiteswapRegex from \"./SiteswapRegex\";\r\nimport { Prop, PropType, ScheduledToss } from \"./Prop\";\r\nimport { Toss, Hand } from \"./Toss\";\r\nimport { PatternSimulation } from \"./PatternSimulation\";\r\nimport { vec3 } from \"@tlaukkan/tsm\";\r\nimport { GetTossPathPositionAndVelocity } from \"./TossPath\";\r\nimport { InterpolateBezierSpline } from \"./Bezier\";\r\nimport { ShoulderZOffset, ShoulderHeight, ArmHalfLength, ShoulderXOffset, BasePatternHeight, ArmAngle } from \"./JugglerConfig\";\r\n\r\nexport interface PropLanding {\r\n\tProp : Prop,\r\n\tJuggler : number,\r\n\tHand : Hand\r\n}\r\n\r\nexport class Pattern {\t\r\n\r\n\tpublic readonly Props : Prop[];\r\n\tpublic readonly TossCollection : Toss[][];\r\n\tpublic readonly States : (Prop[]|null)[][][][]; // States[referenceBeat][juggler][hand][beat] contains a Prop[] of the props scheduled to land at beat as of the referenceBeat\r\n\tpublic Simulation : PatternSimulation|undefined;\r\n\r\n\tconstructor(public readonly Siteswap : SiteswapClass, public readonly DwellPaths : DwellPath[], defaultDwellRatio : number, numSurfaces : number) {\r\n\t\t\r\n\t\t// TODO: move GetTossCollection to this class\r\n\t\tthis.TossCollection = Siteswap.GetTossCollection(DwellPaths, defaultDwellRatio, numSurfaces);\r\n\r\n\t\t/* figure out how many props */\r\n\t\tvar sumOfAllTosses = 0;\r\n\t\tvar _this = this;\r\n\t\tSiteswap.Beats.map(function(beat) {\r\n\t\t\tif (beat.match(SiteswapRegex.ValidPassRe)) {\r\n\t\t\t\tvar patterns = beat.split('|');\r\n\t\t\t\tfor (var i = 0; i < patterns.length; i++) {\r\n\t\t\t\t\tif (i == 0) {\r\n\t\t\t\t\t\tpatterns[i] = patterns[i].substr(1);\r\n\t\t\t\t\t} \r\n\t\t\t\t\tif (i == patterns.length-1) {\r\n\t\t\t\t\t\tpatterns[i] = patterns[i].substr(0,patterns[i].length-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsumOfAllTosses += _this.sumThrows(patterns[i]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsumOfAllTosses += _this.sumThrows(beat);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif((sumOfAllTosses/Siteswap.Beats.length % 1) == 0 && sumOfAllTosses/Siteswap.Beats.length > 0) {\r\n\t\t\tvar numProps = sumOfAllTosses/Siteswap.Beats.length;\r\n\t\t} else {\t\t\r\n\t\t\tthrow \"Cannot determine number of props\";\r\n\t\t}\r\n\r\n\t\t// TODO: update this to use prop templates from constructor\r\n\t\tthis.Props = [];\r\n\t\tfor(let i = 0; i < numProps; i++) {\r\n\t\t\tthis.Props.push(new Prop(i,PropType.Ball, 0.5, 0.1));\r\n\t\t}\t\t\r\n\r\n\t\t/* figure out the max throw height which will inform the size of the state array */\r\n\t\tvar maxHeight = 0;\r\n\r\n\t\tthis.TossCollection.forEach(x => {\r\n\t\t\tx.forEach(y => {\r\n\t\t\t\tif (y.NumBeats > maxHeight) {\r\n\t\t\t\t\tmaxHeight = y.NumBeats;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t/* ------------------------------------ */\r\n\t\t/* GENERATE STATE ARRAY AND PROP ORBITS */\r\n\t\t/* ------------------------------------ */\r\n\t\t\r\n\t\t/* create a queue of props */\r\n\t\tvar propsQueue = this.Props.slice(0);\t\t\r\n\t\t\r\n\t\t/* initialize the state and prop orbits array */\r\n\t\tthis.States = [];\r\n\r\n\t\t/* initialize current state */\r\n\t\tvar curState : (Prop[]|null)[][][] = []; // curState[juggler][hand][beat] can be null (ie. no props landing) or Prop[] (ie. list of props landing, more than 1 in case of a multiplex)\r\n\t\tfor (var j = 0; j < Siteswap.NumJugglers; j++) {\r\n\t\t\tcurState.push([[],[]]);\r\n\t\t\tfor (var k = 0; k < maxHeight; k++) {\r\n\t\t\t\tcurState[j][Hand.Left].push(null);\r\n\t\t\t\tcurState[j][Hand.Right].push(null);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar patternComplete = false;\r\n\t\tvar initComplete = false;\r\n\t\tvar beat = 0;\r\n\t\tvar hand = Hand.Left;\r\n\t\t\r\n\t\twhile (!patternComplete) {\r\n\t\t\t\r\n\t\t\t/* queue of props to throw this beat */\r\n\t\t\tvar propsLanding : PropLanding[] = [];\r\n\r\n\t\t\tcurState.forEach((juggler, jugglerIx) => {\r\n\t\t\t\tvar landingLeft = juggler[Hand.Left].shift();\r\n\t\t\t\tjuggler[Hand.Left].push(null);\r\n\t\t\t\tif (landingLeft) {\r\n\t\t\t\t\tlandingLeft.forEach(prop => {\r\n\t\t\t\t\t\tpropsLanding.push({\r\n\t\t\t\t\t\t\tProp: prop,\r\n\t\t\t\t\t\t\tJuggler: jugglerIx,\r\n\t\t\t\t\t\t\tHand: Hand.Left\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar landingRight = juggler[Hand.Right].shift();\r\n\t\t\t\tjuggler[Hand.Right].push(null);\r\n\t\t\t\tif (landingRight) {\r\n\t\t\t\t\tlandingRight.forEach(prop => {\r\n\t\t\t\t\t\tpropsLanding.push({\r\n\t\t\t\t\t\t\tProp: prop,\r\n\t\t\t\t\t\t\tJuggler: jugglerIx,\r\n\t\t\t\t\t\t\tHand: Hand.Right\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t/* iterate through all the tosses and update the current state */\r\n\t\t\tthis.TossCollection[beat % this.TossCollection.length].forEach(toss => {\r\n\t\t\t\t\r\n\t\t\t\tvar tossHand = toss.Hand == Hand.Any ? hand : toss.Hand;\r\n\t\t\t\tvar catchHand = toss.Crossing ? 1 - tossHand : tossHand; \r\n\r\n\t\t\t\tvar propToToss : Prop|undefined = undefined;\r\n\r\n\t\t\t\t// go through props landing and look for one landing in the hand that this toss is occurring\r\n\t\t\t\tfor (var propLandingIx = 0; propLandingIx < propsLanding.length; propLandingIx++) {\r\n\t\t\t\t\tvar propLanding = propsLanding[propLandingIx];\r\n\t\t\t\t\tif(propLanding.Hand == tossHand && propLanding.Juggler == toss.Juggler) {\r\n\t\t\t\t\t\t// if a prop is landing in a hand that is tossing a 0 then invalid pattern\r\n\t\t\t\t\t\tif(toss.NumBeats == 0) {\r\n\t\t\t\t\t\t\tthrow `Prop landing on 0 toss at beat ${beat}`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpropToToss = propLanding.Prop;\r\n\t\t\t\t\t\tpropsLanding.splice(propLandingIx,1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if no props landing to be thrown, get one from the queue - only if this isn't a 0 toss\r\n\t\t\t\tif  (propToToss === undefined && toss.NumBeats > 0) {\r\n\t\t\t\t\tpropToToss = propsQueue.shift();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if prop is still undefined (ie. there are none left) then we've got an invalid siteswap - only if this isn't a 0 toss\r\n\t\t\t\tif  (propToToss === undefined && toss.NumBeats > 0) {\r\n\t\t\t\t\tthrow `No prop available to toss at beat ${beat}`;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// so long as this isn't a 0 toss, update the current state and add to props scheduled tosses\r\n\t\t\t\tif (toss.NumBeats > 0) {\t\t\t\t\r\n\r\n\t\t\t\t\t// only build TossSchedule once init is complete \r\n\t\t\t\t\tif (initComplete) {\r\n\t\r\n\t\t\t\t\t\tpropToToss!.TossSchedule.push({\r\n\t\t\t\t\t\t\tToss: toss,\r\n\t\t\t\t\t\t\tBeat: beat,\r\n\t\t\t\t\t\t\tHand: tossHand\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\tif(curState[toss.TargetJuggler][catchHand][toss.NumBeats-1]) {\r\n\t\t\t\t\t\tcurState[toss.TargetJuggler][catchHand][toss.NumBeats-1]!.push(propToToss as Prop);\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurState[toss.TargetJuggler][catchHand][toss.NumBeats-1] = [propToToss as Prop];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\r\n\t\t\t});\t\r\n\t\t\t\r\n\t\t\t// TODO: address performance/memory concerns with constantly recreating state arrays using this deep clone method\r\n\t\t\tif(initComplete) {\r\n\t\t\t\t// if we're at the beginning of the toss array and we've returned to the original state, the pattern is complete\r\n\t\t\t\tif (beat % this.TossCollection.length == 0 && JSON.stringify(this.States[0], [\"Id\"]) == JSON.stringify(curState, [\"Id\"])) {\r\n\t\t\t\t\tpatternComplete = true;\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t// if the pattern is complete now we need to remove the last set of scheduled tosses\r\n\t\t\t\t\t// this is kind of a hack\t\t\t\t\r\n\t\t\t\t\tthis.Props.forEach(prop => {\r\n\t\t\t\t\t\tvar i = 0;\r\n\t\t\t\t\t\tif (prop.TossSchedule[prop.TossSchedule.length-1].Beat == beat) {\r\n\t\t\t\t\t\t\tprop.TossSchedule.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// add the current state to the state array\r\n\t\t\t\t\tthis.States.push(JSON.parse(JSON.stringify(curState, [\"Id\"])));\r\n\t\t\t\t}\t\r\n\t\t\t} else {\r\n\t\t\t\t// if all props have been introduced to pattern and we're at the end of the pattern, init is complete and steady-state pattern truly begins with the next beat\r\n\t\t\t\tif (propsQueue.length == 0 && (beat+1) % this.TossCollection.length == 0) {\r\n\t\t\t\t\tinitComplete = true;\r\n\t\t\t\t\tbeat = -1;\r\n\t\t\t\t\tthis.States = []; \r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\r\n\t\t\tbeat++;\r\n\t\t\thand = 1 - hand; //alternate hands\r\n\r\n\t\t\t/* fail safe in case the pattern is too long */\r\n\t\t\tif (beat > 1000) {\r\n\t\t\t\tthrow \"Pattern took more than 1000 beats to repeat states\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate sumThrows(str : string) : number {\r\n\t\tvar total = 0;\r\n\t\tfor (var i = 0; i < str.length; i++) {\r\n\t\t\tif(parseInt(str[i])) {\r\n\t\t\t\ttotal += parseInt(str[i]);\t\t\t\t\t\r\n\t\t\t} else if (str.charCodeAt(i) >= 97 && str.charCodeAt(i) <= 119) {\r\n\t\t\t\t// handle \"a\" through \"z\" (where \"a\" = 10)\r\n\t\t\t\ttotal += str.charCodeAt(i)-87;\r\n\t\t\t}\r\n\t\r\n\t\t\t// if the current character is a pass/spin marker\r\n\t\t\t// ignore the next character so we don't count the\r\n\t\t\t// juggler identifier  in something like <5p2|5p3|5p1>\r\n\t\t\tif ((str[i] == \"P\" || str[i] == \"S\") && parseInt(str[i+1]) ){\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\t// if the current character is a bounce marker\r\n\t\t\t// and then next character is a {, move forward until we find a }\r\n\t\t\tif ((str[i] == \"B\" || str[i] == \"D\" || str[i] == \"T\" || str[i] == \"C\" || str[i] == \"S\") && str[i+1] == \"{\") {\r\n\t\t\t\ti = str.indexOf(\"}\",i);\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn total;\r\n\t}\r\n\r\n\tpublic Simulate(numStepsPerBeat : number, beatDuration : number, breakOnCollision : boolean = false) : boolean {\r\n\t\tvar totalNumBeats = this.States.length;\r\n\t\tvar numSteps = totalNumBeats*numStepsPerBeat;\t\t\r\n\t\tvar hasCollision = false;\r\n\t\t\r\n\t\t// initialize pattern simulation\r\n\t\tvar patternSimulation : PatternSimulation = {\r\n\t\t\tProps: [],\r\n\t\t\tJugglers: [],\r\n\t\t\tBeatDuration: beatDuration,\r\n\t\t\tNumStepsPerBeat: numStepsPerBeat,\r\n\t\t};\r\n\r\n\t\tthis.Props.forEach(prop => patternSimulation.Props.push({\r\n\t\t\tPositions: [],\r\n\t\t\tRotations: []\r\n\t\t}));\r\n\r\n\t\tthis.States[0].forEach((juggler, jugglerIx, jugglers) => {\r\n\t\t\r\n\t\t\t// todo - this is still a bit hokey and should be based on inputs\r\n\r\n\t\t\tvar bodyPosition : vec3;\r\n\t\t\tvar bodyRotation : number;\r\n\r\n\t\t\tif (jugglers.length == 1) {\r\n\t\t\t\tbodyPosition = new vec3([0,0,0]);\r\n\t\t\t\tbodyRotation = 0;\r\n\t\t\t} else {\r\n\t\t\t\tvar jugglerCircleRadius = 1;\r\n\r\n\t\t\t\tvar t = jugglerIx/jugglers.length;\r\n\r\n\t\t\t\tbodyRotation = t*Math.PI*2;\r\n\r\n\t\t\t\tbodyPosition = new vec3([\r\n\t\t\t\t\t-jugglerCircleRadius*Math.sin(bodyRotation),\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tjugglerCircleRadius*Math.cos(bodyRotation)\r\n\t\t\t\t]);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpatternSimulation.Jugglers.push({\r\n\t\t\t\tBodyPositions: Array(numSteps).fill(bodyPosition),\r\n\t\t\t\tBodyRotations: Array(numSteps).fill(bodyRotation),\r\n\t\t\t\tLeftHandPositions: [],\r\n\t\t\t\tRightHandPositions: [],\r\n\t\t\t\tLeftElbowPositions: [],\r\n\t\t\t\tRightElbowPositions: [],\r\n\t\t\t\tLeftHandDirections: [],\r\n\t\t\t\tRightHandDirections: []\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tfor(var step = 0; step < numSteps; step++) {\r\n\t\t\tvar currentBeat = Math.floor(step*totalNumBeats/numSteps);\r\n\t\t\tvar currentTime = beatDuration*step*totalNumBeats/numSteps;\r\n\r\n\t\t\t// find position of each prop\r\n\t\t\tthis.Props.forEach((prop, propIx) => {\r\n\t\t\t\tvar prevToss : ScheduledToss;\r\n\t\t\t\tvar curToss : ScheduledToss;\r\n\t\t\t\tvar nextToss : ScheduledToss;\r\n\r\n\t\t\t\t[prevToss, curToss, nextToss] = prop.GetPreviousCurrentAndNextTossForBeat(currentBeat);\r\n\r\n\t\t\t\t// create \"virtual\" beat/time if the previous/next toss results in a loop back through the states\r\n\t\t\t\tvar virtualCurrentTime = currentTime;\r\n\r\n\t\t\t\tvar prevTossVirtualBeat = prevToss.Beat;\r\n\t\t\t\tif (prevTossVirtualBeat >= curToss.Beat) {\r\n\t\t\t\t\tprevTossVirtualBeat -= totalNumBeats;\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar nextTossVirtualBeat = nextToss.Beat;\r\n\t\t\t\tvar curTossVirtualBeat = curToss.Beat;\r\n\t\t\t\tif (nextTossVirtualBeat <= curToss.Beat) {\r\n\t\t\t\t\tprevTossVirtualBeat -= totalNumBeats;\r\n\t\t\t\t\tcurTossVirtualBeat -= totalNumBeats;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tossTime = curTossVirtualBeat*beatDuration + curToss.Toss.DwellRatio*beatDuration;\r\n\t\t\t\tvar catchTime = nextTossVirtualBeat*beatDuration;\r\n\t\t\t\tvar prevTossTime = prevTossVirtualBeat*beatDuration + prevToss.Toss.DwellRatio*beatDuration;\r\n\t\t\t\tvar prevCatchTime = curTossVirtualBeat*beatDuration;\r\n\r\n\t\t\t\tif (virtualCurrentTime >= catchTime) {\r\n\t\t\t\t\tvirtualCurrentTime -= totalNumBeats*beatDuration;\r\n\t\t\t\t}\t\t\t\t\t\t\t\r\n\r\n\t\t\t\tvar prevTossJugglerBodyPosition = patternSimulation.Jugglers[prevToss.Toss.Juggler].BodyPositions[step];\r\n\t\t\t\tvar prevTossJugglerBodyRotation = patternSimulation.Jugglers[prevToss.Toss.Juggler].BodyRotations[step];\r\n\r\n\t\t\t\tvar tossJugglerBodyPosition = patternSimulation.Jugglers[curToss.Toss.Juggler].BodyPositions[step];\r\n\t\t\t\tvar tossJugglerBodyRotation = patternSimulation.Jugglers[curToss.Toss.Juggler].BodyRotations[step];\r\n\r\n\t\t\t\tvar catchJugglerBodyPosition = patternSimulation.Jugglers[nextToss.Toss.Juggler].BodyPositions[step];\r\n\t\t\t\tvar catchJugglerBodyRotation = patternSimulation.Jugglers[nextToss.Toss.Juggler].BodyRotations[step];\r\n\r\n\t\t\t\t// if we're before the toss then we're in the dwell path\r\n\t\t\t\tif (virtualCurrentTime < tossTime || curToss.Toss.Hold) {\r\n\t\t\t\t\t// velocity at time of catch\r\n\t\t\t\t\tvar prevTossFlightTime = prevCatchTime - prevTossTime;\t\t\t\t\r\n\r\n\t\t\t\t\tvar catchVelocity = GetTossPathPositionAndVelocity(prevToss, curToss, prevTossFlightTime, prevTossFlightTime, prevTossJugglerBodyPosition, prevTossJugglerBodyRotation, tossJugglerBodyPosition, tossJugglerBodyRotation)[1];\r\n\r\n\t\t\t\t\t// velocity at the time of throw\r\n\t\t\t\t\tvar tossVelocity = GetTossPathPositionAndVelocity(curToss, nextToss, 0, catchTime-tossTime, tossJugglerBodyPosition, tossJugglerBodyRotation, catchJugglerBodyPosition, catchJugglerBodyRotation)[1];\r\n\r\n\t\t\t\t\tvar t : number;\r\n\t\t\t\t\tif (curToss.Toss.Hold) {\r\n\t\t\t\t\t\tvar t = 1 - (catchTime - virtualCurrentTime) / (catchTime - prevCatchTime);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar t = 1 - (tossTime - virtualCurrentTime) / (tossTime - prevCatchTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar pos = curToss.Toss.DwellPath.GetPosition(t, curToss.Hand, catchVelocity, tossVelocity, 0.01, 0.015, curToss.Toss.Hold ? nextToss.Toss.DwellPath.Snapshots[0] : null, tossJugglerBodyPosition, tossJugglerBodyRotation);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpatternSimulation.Props[propIx].Positions.push(pos);\t\t\t\t\t\r\n\t\t\t\t\tvar handDirection = catchVelocity.copy().normalize().scale(t-1);\r\n\t\t\t\t\thandDirection.add(tossVelocity.copy().normalize().scale(t));\r\n\r\n\r\n\t\t\t\t\tif (curToss.Hand === Hand.Left) {\r\n\t\t\t\t\t\tpatternSimulation.Jugglers[curToss.Toss.Juggler].LeftHandPositions[step] = pos;\r\n\t\t\t\t\t\tpatternSimulation.Jugglers[curToss.Toss.Juggler].LeftHandDirections[step] = handDirection;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpatternSimulation.Jugglers[curToss.Toss.Juggler].RightHandPositions[step] = pos;\r\n\t\t\t\t\t\tpatternSimulation.Jugglers[curToss.Toss.Juggler].RightHandDirections[step] = handDirection;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// figure out flight path\r\n\t\t\t\t\tvar T = catchTime - tossTime;\r\n\t\t\t\t\tvar t = virtualCurrentTime - tossTime;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar pos = GetTossPathPositionAndVelocity(curToss, nextToss, t, T, tossJugglerBodyPosition, tossJugglerBodyRotation, catchJugglerBodyPosition, catchJugglerBodyRotation)[0];\r\n\r\n\t\t\t\t\tpatternSimulation.Props[propIx].Positions.push(pos);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t\t// check to see if any of the props are colliding\r\n\t\t\tfor (var i = 0; i < this.Props.length; i++) {\r\n\t\t\t\tfor (var j = i+1; j < this.Props.length; j++) {\r\n\t\t\t\t\tvar pos1 = patternSimulation.Props[i].Positions[step];\r\n\t\t\t\t\tvar pos2 = patternSimulation.Props[j].Positions[step];\r\n\t\t\t\t\tvar dist = vec3.distance(pos1, pos2);\r\n\t\t\t\t\tif (dist < this.Props[i].Radius || dist < this.Props[j].Radius) {\r\n\t\t\t\t\t\tif (breakOnCollision) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\thasCollision = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// find position for hands that are empty and calculate elbow positions\r\n\t\t\tpatternSimulation.Jugglers.forEach((juggler, jugglerIx) => {\r\n\t\t\t\t[Hand.Left, Hand.Right].forEach((hand) => {\r\n\t\t\t\t\t/* need \r\n\t\t\t\t\t\tnextToss - to determine where the hand is going to\r\n\t\t\t\t\t\tpropLastToss - to determine where the prop we're catching came from so we know its catch velocity\r\n\t\t\t\t\t\tlastToss - to determine where the hand is coming from\r\n\t\t\t\t\t\tpropNextToss - to determine where the prop we just tossed is going so we know its toss velocity\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\tif ((hand === Hand.Left && juggler.LeftHandPositions[step] === undefined) || (hand === Hand.Right && juggler.RightHandPositions[step] === undefined)) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar handNextToss : ScheduledToss|undefined;\r\n\t\t\t\t\t\tvar handNextTossVirtualBeat : number = 0;\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.Props.forEach((prop) => {\r\n\t\t\t\t\t\t\tprop.TossSchedule.forEach((scheduledToss) => {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar scheduledTossVirtualBeat = scheduledToss.Beat;\r\n\t\t\t\t\t\t\t\tif (scheduledTossVirtualBeat <= currentBeat) {\r\n\t\t\t\t\t\t\t\t\tscheduledTossVirtualBeat += totalNumBeats;\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (scheduledTossVirtualBeat > currentBeat && scheduledToss.Toss.Juggler == jugglerIx && scheduledToss.Hand == hand) {\r\n\t\t\t\t\t\t\t\t\tif (handNextToss === undefined || scheduledTossVirtualBeat < handNextTossVirtualBeat) {\r\n\t\t\t\t\t\t\t\t\t\thandNextToss = scheduledToss;\r\n\t\t\t\t\t\t\t\t\t\thandNextTossVirtualBeat = scheduledTossVirtualBeat;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvar handLastToss : ScheduledToss|undefined;\t\r\n\t\t\t\t\t\tvar handLastTossVirtualBeat : number = 0;\t\t\t\t\t\r\n\t\t\t\t\t\tthis.Props.forEach((prop) => {\r\n\t\t\t\t\t\t\tprop.TossSchedule.forEach((scheduledToss) => {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar scheduledTossVirtualBeat = scheduledToss.Beat;\r\n\t\t\t\t\t\t\t\tif (scheduledTossVirtualBeat > currentBeat) {\r\n\t\t\t\t\t\t\t\t\tscheduledTossVirtualBeat -= totalNumBeats;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (scheduledTossVirtualBeat <= currentBeat && scheduledToss.Toss.Juggler == jugglerIx && scheduledToss.Hand == hand) {\r\n\t\t\t\t\t\t\t\t\tif (handLastToss === undefined || scheduledTossVirtualBeat > handLastTossVirtualBeat) {\r\n\t\t\t\t\t\t\t\t\t\thandLastToss = scheduledToss;\r\n\t\t\t\t\t\t\t\t\t\thandLastTossVirtualBeat = scheduledTossVirtualBeat;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tvar handPos : vec3;\r\n\t\t\t\t\t\tvar handDirection : vec3;\r\n\t\t\t\t\t\tif (handLastToss === undefined || handNextToss === undefined) {\r\n\t\t\t\t\t\t\t// TODO - don't hardcode this\r\n\t\t\t\t\t\t\thandPos = new vec3([.3*hand == Hand.Left ? -1 : 1, BasePatternHeight, 0]);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\thandDirection = new vec3([0,1,0]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar emptyHandPath : vec3[] = [];\r\n\t\t\t\t\t\t\temptyHandPath.push(handLastToss.Toss.DwellPath.Snapshots[handLastToss.Toss.DwellPath.Snapshots.length-1].Position.copy());\r\n\t\t\t\t\t\t\temptyHandPath.push(handNextToss.Toss.DwellPath.Snapshots[0].Position.copy());\r\n\r\n\t\t\t\t\t\t\tvar catchingPropLastToss : ScheduledToss;\r\n\t\t\t\t\t\t\tvar tossedPropNextToss : ScheduledToss;\r\n\r\n\t\t\t\t\t\t\tthis.Props.forEach((prop) => {\r\n\t\t\t\t\t\t\t\tprop.TossSchedule.forEach((scheduledToss, scheduledTossIx, tossSchedule) => {\r\n\t\t\t\t\t\t\t\t\tif(scheduledToss.Hand === hand && scheduledToss.Beat === handNextToss!.Beat && scheduledToss.Toss.Juggler === jugglerIx) {\r\n\t\t\t\t\t\t\t\t\t\tif (scheduledTossIx == 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tcatchingPropLastToss = tossSchedule[tossSchedule.length-1];\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tcatchingPropLastToss = tossSchedule[scheduledTossIx-1];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthis.Props.forEach((prop) => {\r\n\t\t\t\t\t\t\t\tprop.TossSchedule.forEach((scheduledToss, scheduledTossIx, tossSchedule) => {\r\n\t\t\t\t\t\t\t\t\tif(scheduledToss === handLastToss) {\r\n\t\t\t\t\t\t\t\t\t\tif (scheduledTossIx === (tossSchedule.length-1)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttossedPropNextToss = tossSchedule[0];\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\ttossedPropNextToss = tossSchedule[scheduledTossIx+1];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t// the juggler whose empty hand we're calculting\r\n\t\t\t\t\t\t\tvar jugglerBodyPosition = juggler.BodyPositions[step];\r\n\t\t\t\t\t\t\tvar jugglerBodyRotation = juggler.BodyRotations[step];\r\n\r\n\t\t\t\t\t\t\t// the juggler that we just tossed a prop to\r\n\t\t\t\t\t\t\tvar tossedPropCatchingJugglerBodyPosition = patternSimulation.Jugglers[handLastToss.Toss.TargetJuggler].BodyPositions[step];\r\n\t\t\t\t\t\t\tvar tossedPropCatchingJugglerBodyRotation = patternSimulation.Jugglers[handLastToss.Toss.TargetJuggler].BodyRotations[step]; \r\n\r\n\t\t\t\t\t\t\t// the juggler that tossed the prop we're catching\r\n\t\t\t\t\t\t\tvar catchingPropTossJugglerBodyPosition = patternSimulation.Jugglers[catchingPropLastToss!.Toss.Juggler].BodyPositions[step];\r\n\t\t\t\t\t\t\tvar catchingPropTossJugglerBodyRotation = patternSimulation.Jugglers[catchingPropLastToss!.Toss.Juggler].BodyRotations[step];\r\n\r\n\t\t\t\t\t\t\tvar tossVelocity = GetTossPathPositionAndVelocity(handLastToss, tossedPropNextToss!, 0, handLastToss.Toss.NumBeats*beatDuration, jugglerBodyPosition, jugglerBodyRotation, tossedPropCatchingJugglerBodyPosition, tossedPropCatchingJugglerBodyRotation)[1];\r\n\t\t\t\t\t\t\tvar catchVelocity = GetTossPathPositionAndVelocity(catchingPropLastToss!, handNextToss, catchingPropLastToss!.Toss.NumBeats*beatDuration-catchingPropLastToss!.Toss.DwellRatio*beatDuration,catchingPropLastToss!.Toss.NumBeats*beatDuration-catchingPropLastToss!.Toss.DwellRatio*beatDuration, catchingPropTossJugglerBodyPosition, catchingPropTossJugglerBodyRotation, jugglerBodyPosition, jugglerBodyRotation)[1];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (hand === Hand.Left) {\r\n\t\t\t\t\t\t\t\temptyHandPath.forEach((x) => x.x*=-1);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar virtualCurrentTime = currentTime;\r\n\t\t\t\t\t\t\tif (virtualCurrentTime > handNextTossVirtualBeat*beatDuration) {\r\n\t\t\t\t\t\t\t\tvirtualCurrentTime -= totalNumBeats*beatDuration;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar totalEmptyHandTime = handNextTossVirtualBeat*beatDuration - (handLastTossVirtualBeat*beatDuration + handLastToss.Toss.DwellRatio*beatDuration);\r\n\t\t\t\t\t\t\tvar t = (virtualCurrentTime - (handLastTossVirtualBeat*beatDuration + handLastToss.Toss.DwellRatio*beatDuration))/totalEmptyHandTime;\r\n\r\n\t\t\t\t\t\t\t// todo - this probably doesn't actually work\r\n\t\t\t\t\t\t\t// fail-safe in case virtual times weren't calculated perfectly\r\n\t\t\t\t\t\t\t// solves bug with hands flashing to wrong position for even patterns like 4\r\n\t\t\t\t\t\t\tif (t < 0) {\r\n\t\t\t\t\t\t\t\tt = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (t > 1) {\r\n\t\t\t\t\t\t\t\tt = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tfor (var i = 0; i < emptyHandPath.length; i++) {\r\n\t\t\t\t\t\t\t\tvar copy = emptyHandPath[i].copy();\r\n\t\t\t\t\t\t\t\temptyHandPath[i].x = copy.x*Math.cos(jugglerBodyRotation) - copy.z*Math.sin(jugglerBodyRotation);\r\n\t\t\t\t\t\t\t\temptyHandPath[i].y = copy.y + BasePatternHeight;\r\n\t\t\t\t\t\t\t\temptyHandPath[i].z = copy.x*Math.sin(jugglerBodyRotation) + copy.z*Math.cos(jugglerBodyRotation);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\temptyHandPath[i].add(jugglerBodyPosition);\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\t\thandPos = InterpolateBezierSpline(emptyHandPath,t,tossVelocity,catchVelocity,0.01,0.01,false);\r\n\r\n\t\t\t\t\t\t\thandDirection = tossVelocity.copy().normalize().scale(1-t);\r\n\t\t\t\t\t\t\thandDirection.add(catchVelocity.copy().normalize().scale(-t));\r\n\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (hand === Hand.Left) {\r\n\t\t\t\t\t\t\tjuggler.LeftHandPositions[step] = handPos;\r\n\t\t\t\t\t\t\tjuggler.LeftHandDirections[step] = handDirection;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tjuggler.RightHandPositions[step] = handPos;\r\n\t\t\t\t\t\t\tjuggler.RightHandDirections[step] = handDirection;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// now that both hands are accounted for, calculate elbow positions\t\t\t\t\t\r\n\t\t\t\t\tvar rot = juggler.BodyRotations[step];\r\n\t\t\t\t\tvar pos = juggler.BodyPositions[step];\r\n\t\t\t\t\tvar x = (hand === Hand.Left ? - 1 : 1)*ShoulderXOffset;\r\n\t\t\t\t\tvar z = ShoulderZOffset;\r\n\t\t\t\t\tvar shoulderPosition = new vec3([\r\n\t\t\t\t\t\tpos.x + (x*Math.cos(rot) - z*Math.sin(rot)),\r\n\t\t\t\t\t\tShoulderHeight,\r\n\t\t\t\t\t\tpos.z + (x*Math.sin(rot) + z*Math.cos(rot))\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar elbowPosition = this.getElbowPosition(shoulderPosition, hand === Hand.Left ? juggler.LeftHandPositions[step] : juggler.RightHandPositions[step], ArmAngle, hand);\r\n\t\t\t\t\tif (hand === Hand.Left) {\r\n\t\t\t\t\t\tjuggler.LeftElbowPositions[step] = elbowPosition;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tjuggler.RightElbowPositions[step] = elbowPosition;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\tthis.Simulation = patternSimulation;\r\n\r\n\t\treturn hasCollision;\r\n\r\n\t}\r\n\r\n\tprivate getElbowPosition(shoulderPosition : vec3, handPosition : vec3, armAngle : number, hand : Hand) : vec3 {\r\n\t\tvar armHalfLength = ArmHalfLength;\r\n\r\n\t\tarmAngle*=-1;\r\n\r\n\t\tvar Hp = new vec3();\r\n\t\tHp.x = handPosition.x - shoulderPosition.x;\r\n\t\tHp.y = handPosition.y - shoulderPosition.y;\r\n\t\tHp.z = handPosition.z - shoulderPosition.z;\r\n\r\n\t\tvar Hpp = new vec3();\r\n\t\tHpp.x = Math.sqrt(Hp.x*Hp.x + Hp.z*Hp.z);\r\n\t\tHpp.y = Hp.y;\r\n\t\tHpp.z = 0;\r\n\r\n\t\tvar th = Math.atan2(Hp.z,Hp.x);\r\n\r\n\t\tvar magHp = Math.sqrt(Hp.x*Hp.x + Hp.y*Hp.y + Hp.z*Hp.z);\r\n\r\n\t\t/* magically stretch arms */\r\n\t\tif (2*armHalfLength < magHp) {\r\n\t\t\tarmHalfLength = magHp/2;\r\n\t\t}\r\n\r\n\t\tvar u1 = new vec3();\r\n\t\tu1.x = Hpp.y/magHp;\r\n\t\tu1.y = -Hpp.x/magHp;\r\n\t\tu1.z = 0;\r\n\r\n\t\tvar u2 = new vec3([0,0,0]);\r\n\t\tif (hand == 1) {\r\n\t\t\tu2.z = -1;\r\n\t\t} else {\r\n\t\t\tu2.z = 1;\r\n\t\t}\r\n\r\n\t\tvar h = Math.sqrt(armHalfLength*armHalfLength - .25*magHp*magHp);\r\n\r\n\t\tvar Epp = new vec3();\r\n\t\tEpp.x = Hpp.x/2 + h*u1.x*Math.cos(armAngle) + h*u2.x*Math.sin(armAngle);\r\n\t\tEpp.y = Hpp.y/2 + h*u1.y*Math.cos(armAngle) + h*u2.y*Math.sin(armAngle);\r\n\t\tEpp.z = Hpp.z/2 + h*u1.z*Math.cos(armAngle) + h*u2.z*Math.sin(armAngle);\r\n\r\n\t\tvar Ep = new vec3();\r\n\t\tEp.x = Epp.x*Math.cos(th) - Epp.z*Math.sin(th);\r\n\t\tEp.y = Epp.y;\r\n\t\tEp.z = Epp.x*Math.sin(th) + Epp.z*Math.cos(th);\t\r\n\r\n\t\tvar E = new vec3();\r\n\t\tE.x = Ep.x + shoulderPosition.x;\r\n\t\tE.y = Ep.y + shoulderPosition.y;\r\n\t\tE.z = Ep.z + shoulderPosition.z;\r\n\r\n\r\n\t\treturn E;\r\n\t}\r\n\r\n\tpublic GetHeighestAndLowestPositionInSimulation() : [number, number] {\r\n\t\tvar highestPoint = BasePatternHeight;\r\n\t\tvar lowestPoint = BasePatternHeight;\r\n\t\tif (this.Simulation) {\t\t\t\r\n\t\t\tthis.Simulation.Props.forEach((prop) => {\r\n\t\t\t\tprop.Positions.forEach((p) => {\r\n\t\t\t\t\tif (p.y > highestPoint) {\r\n\t\t\t\t\t\thighestPoint = p.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (p.y < lowestPoint) {\r\n\t\t\t\t\t\tlowestPoint = p.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\t\t\t\r\n\t\t} \r\n\t\treturn [highestPoint, lowestPoint];\r\n\t}\r\n}","import { vec3, vec4 } from \"@tlaukkan/tsm\";\r\n\r\n// TODO: this wasn't ported completely from Siteswap.js\r\nexport const DefaultClubRotation = new vec4([4,0,1,Math.PI/2]);\r\nexport const DefaultRingRotation = new vec4([0,1,0,Math.PI/2]);\r\nexport const DefaultBallRotation = new vec4([0,0,0,0]);\r\n\r\nexport class DwellPathSnapshot {\r\n\t\r\n\tpublic readonly Position : vec3;\r\n\tpublic readonly Rotation : vec4;\r\n\tpublic readonly Empty : boolean;\r\n\r\n\tconstructor(input: string, empty : boolean = false, defaultRotation : vec4 = DefaultBallRotation) {\r\n\t\tthis.Empty = empty;\r\n\r\n\t\tvar xyzMatch = input.match(/\\(-?\\d+(\\.\\d+)?(,-?\\d+(\\.\\d+)?)?(,-?\\d+(\\.\\d+)?)?/g)\r\n\t\tif (!xyzMatch) {\r\n\t\t\tthrow \"Could not find position for dwell path snapshot.\"\r\n\t\t} else {\r\n\t\t\tvar xyz = xyzMatch[0].match(/-?\\d+(\\.\\d+)?/g);\r\n\t\t\tif (xyz) {\r\n\t\t\t\tthis.Position = new vec3([\r\n\t\t\t\t\tparseFloat(xyz[0])/100,\r\n\t\t\t\t\t// y and z default to 0\r\n\t\t\t\t\txyz[1] ? parseFloat(xyz[1])/100 : 0,\r\n\t\t\t\t\txyz[2] ? parseFloat(xyz[2])/100 : 0\r\n\t\t\t\t]);\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Could not find position for dwell path snapshot.\"\r\n\t\t\t}\t\t\t\t\t\t\r\n\t\t}\t\t\t\r\n\t\t\r\n\t\tvar rot = input.match(/\\{-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?\\}/g); \r\n\t\tif (!rot) {\r\n\t\t\tthis.Rotation = defaultRotation;\r\n\t\t} else {\r\n\t\t\tvar rotationValues = rot[0].match(/-?\\d+(\\.\\d+)?/g);\r\n\t\t\tif (rotationValues && rotationValues.length == 4) {\r\n\t\t\t\tthis.Rotation = new vec4([\r\n\t\t\t\t\tparseFloat(rotationValues[0]),\r\n\t\t\t\t\tparseFloat(rotationValues[1]),\r\n\t\t\t\t\tparseFloat(rotationValues[2]),\r\n\t\t\t\t\tparseFloat(rotationValues[3])\r\n\t\t\t\t]);\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Could not find 4 rotation values\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import { DwellPathSnapshot, DefaultBallRotation } from \"./DwellPathSnapshot\";\r\nimport { vec4, vec3 } from \"@tlaukkan/tsm\";\r\nimport { Hand } from \"./Toss\";\r\nimport { InterpolateBezierSpline } from \"./Bezier\";\r\nimport { BasePatternHeight } from \"./JugglerConfig\";\r\n\t\r\nexport class DwellPath {\r\n\r\n\tpublic readonly Snapshots : DwellPathSnapshot[];\r\n\r\n\tconstructor(input : string, defaultRotation : vec4 = DefaultBallRotation) {\r\n\t\tthis.Snapshots = [];\r\n\r\n\t\t// check if there's going to be any empty hand dwell path snapshots\r\n\t\t// if not then terminate the input with an e\r\n\t\tif (input.indexOf(\"e\") == -1) {\r\n\t\t\tinput += \"e\";\r\n\t\t}\r\n\t\tvar dwellPathSnapshotRe = /\\(-?\\d+(\\.\\d+)?(,-?\\d+(\\.\\d+)?)?(,-?\\d+(\\.\\d+)?)?(,\\{-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?\\})?\\)/g;\r\n\t\tvar heldDwellPathSnapshots = input.split(\"e\")[0].match(dwellPathSnapshotRe);\r\n\t\tvar emptyDwellPathSnapshots = input.split(\"e\")[1].match(dwellPathSnapshotRe);\r\n\t\tif (heldDwellPathSnapshots) {\r\n\t\t\theldDwellPathSnapshots.forEach(x => {\r\n\t\t\t\tthis.Snapshots.push(new DwellPathSnapshot(x, false, defaultRotation))\r\n\t\t\t});\r\n\t\t} else {\t\t\r\n\t\t\tthrow new Error(\"Invalid dwell path\");\r\n\t\t}\r\n\t\tif (emptyDwellPathSnapshots) {\r\n\t\t\temptyDwellPathSnapshots.forEach(x => {\r\n\t\t\t\tthis.Snapshots.push(new DwellPathSnapshot(x, true, defaultRotation))\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// todo - this should take an obect as params\r\n\tpublic GetPosition(\r\n\t\tt : number, \r\n\t\thand : Hand,\r\n\t\tstartVelocity : vec3,\r\n\t\tendVelocity : vec3,\r\n\t\tstartVelocityScale : number,\r\n\t\tendVelocityScale : number,\r\n\t\tadditionalPathSnapshot: DwellPathSnapshot | null, // optional dwell path snapshot to append to spline path\r\n\t\tjugglerBodyPosition : vec3,\r\n\t\tjugglerBodyRotation : number\r\n\t) : vec3 {\r\n\r\n\t\tvar splinePath = this.Snapshots.map((a) => { \r\n\t\t\treturn adjustDwellPathSnapshotByHandAndJuggler(a, hand, jugglerBodyPosition, jugglerBodyRotation);\r\n\t\t});\r\n\r\n\t\tif (additionalPathSnapshot) {\r\n\t\t\tsplinePath.push(adjustDwellPathSnapshotByHandAndJuggler(additionalPathSnapshot, hand, jugglerBodyPosition, jugglerBodyRotation));\r\n\t\t}\r\n\r\n\t\tvar pos = new vec3();\r\n\t\tif (t == 0) {\r\n\t\t\tpos = splinePath[0].copy();\r\n\t\t} else if (t == 1) {\r\n\t\t\tpos = splinePath[splinePath.length-1].copy();\t\t\t\r\n\t\t} else {\t\t\t\t\t\t\t\t\t\r\n\t\t\tpos = InterpolateBezierSpline(splinePath,t,startVelocity,endVelocity,startVelocityScale,endVelocityScale,false);\r\n\t\t}\t\t\t\t\r\n\r\n\t\treturn pos;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction adjustDwellPathSnapshotByHandAndJuggler(a: DwellPathSnapshot, hand: Hand, jugglerBodyPosition : vec3, jugglerBodyRotation : number) {\r\n\tvar positionCopy = a.Position.copy();\r\n\tif (hand == Hand.Left) {\r\n\t\tpositionCopy.x *= -1;\r\n\t}\r\n\t\r\n\t// scale y by juggler height\r\n\tpositionCopy.y += BasePatternHeight;\r\n\r\n\tpositionCopy.x = positionCopy.x*Math.cos(jugglerBodyRotation) - positionCopy.z*Math.sin(jugglerBodyRotation);\r\n\tpositionCopy.z = positionCopy.x*Math.sin(jugglerBodyRotation) + positionCopy.z*Math.cos(jugglerBodyRotation);\r\n\r\n\tpositionCopy.add(jugglerBodyPosition);\r\n\r\n\treturn positionCopy;\r\n}\r\n\r\nexport function GetDwellPaths(input : string, defaultRotation : vec4 = DefaultBallRotation) : DwellPath[] {\r\n\tvar dwellPaths = input.split(').').map(function(a,ix,arr) { if (ix < arr.length-1) { return a+')'; } else { return a; } });\r\n\tif (dwellPaths) {\r\n\t\treturn dwellPaths.map(function(a) {\r\n\t\t\treturn new DwellPath(a);\r\n\t\t});\r\n\t} else {\r\n\t\tthrow new Error(\"Could not determine dwell paths\");\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport { DefaultButton, IconButton } from 'office-ui-fabric-react';\r\n\r\nexport interface Props {\r\n\tcloseSyntaxHelp: Function\r\n}\r\n\r\nexport class SyntaxHelp extends Component<Props,any> {\r\n\r\n\tconstructor(props : Props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.close = this.close.bind(this);\r\n\t}\r\n\r\n\tprivate close() {\r\n\t\tthis.props.closeSyntaxHelp();\r\n\t}\r\n\r\n\texamplePatternSettings = (\r\n\t\t<div className=\"example-pattern-settings\">\r\n\t\t\t<code>\r\n\t\t\t\tsiteswap: 3 <br/>\r\n\t\t\t\tbeatDuration: 0.28 <br/>\r\n\t\t\t\tdwellPath: (30)(10) <br/>\r\n\t\t\t\tdwellRatio: 0.8\r\n\t\t\t</code>\r\n\t\t</div>\r\n\t);\r\n\r\n\tsyntaxExplanation = (\r\n<div>\r\n<p>Patterns can be defined using a YAML based configuration input. All parameters are optional. The example below demonstrates a complete configuration using all the defaults.</p>\r\n<p>\r\n<code>siteswap</code> - siteswap string. Supports standard vanilla like <code>531</code>, multiplex like <code>33[33]</code>, and synchronous like <code>(4,6x)(6x,4)</code>. 2's are held by default, make them active by using \"2A\" like <code>42A3</code>. Passing patterns wrap each beat in &lt;&gt; with each juggler pipe delimited, so <code>&lt;3|3&gt;</code> is two jugglers both running 3 ball cascade. Use P to indicate a pass, so<code>&lt;3P|3P&gt;</code> is a pass on every throw. For multiple jugglers include the index of the juggler who is the target of the pass (starting at 1), so <code>&lt;3P3|3|3P1&gt;</code> is two jugglers passing while a third runs 3 ball cascade. You can also use a shorthand for expressing passing patterns like this: <code>&lt;3P333|3P333&gt;</code>, which would be the equivalent of <code>&lt;3P|3P&gt;&lt;3|3&gt;&lt;3|3&gt;&lt;3|3&gt;</code>. <i>If you input a passing siteswap you need to specify all the juggler positions and rotations, see \"Juggler Positions\" below</i>. Modify the number of spins with S, so <code>3S{0}3S{2}</code> is alternating flats and doubles. You can optionally specify the club toss orientation by adding the x,y,z components of the vector representing the direction the club handle is pointing in the right hand. So <code>{'3S{2,.1,.1,1}'}</code> is a toss that does 2 full rotations and is pointing slightly down and slighly inwards. Modify the dwell ratio with D, so <code>3D{.2}3D{.8}</code> is a 3 ball pattern where one hand is rushing the throw (good for animating half shower patterns). Modify the catch and throw by using C and T, respectively, so <code>{'3C{P}T\\{C}'}</code> is penguin (P) catches followed by claw (C) throws. Bounce using B and optionally specify the bounce type. If no bounce type is specified then a bounce type that will work within the timing constraints of the pattern will be selected. So <code>5B</code> is a 5 ball lift bounce and <code>{'5B{HL}'}</code> is a 5 ball hyperlift bounce (ie. the ball is traveling down when it is caught). Options are L for lift, HL for hyperlift, F for force, and HF for hyperforce. You can also specify the number of bounces within the braces, so {'5B{2}'} would be a 5 ball pattern with 2 bounces. {'5B{HL2}'} is also a valid 2 bounce pattern. You can use the standard * notation to repeat patterns symmetrically, so <code>(4,2x)*</code> would be the equivalent of <code>(4,2x)(2x,4).</code> Patterns can contain any amount of whitespace between beats, so <code>5 3  1</code> would be the same as <code>531</code>.   \r\n</p>\r\n\r\n</div>\r\n);\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"ms-Grid\" dir=\"ltr\">\r\n\t\t\t\t<div className=\"ms-Grid-row\">\r\n\t\t\t\t\t<div className=\"ms-Grid-col ms-md10\">\r\n\t\t\t\t\t\t<h1>Syntax Help</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"ms-Grid-col ms-md2\">\r\n\t\t\t\t\t\t<IconButton className=\"close-button\" iconProps={{iconName: \"ChromeClose\"}} onClick={this.close} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\t\r\n\t\t\t\t<div className=\"ms-Grid-row\">\r\n\t\t\t\t\t<div className=\"ms-Grid-col ms-md9\">\r\n\t\t\t\t\t\t{this.syntaxExplanation}\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"ms-Grid-col ms-md3\">\r\n\t\t\t\t\t\t{this.examplePatternSettings}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}","import { Node } from \"./Node\";\r\n\r\nexport interface Edge {\r\n\tSourceNode : number;\r\n\tTargetNode : number;\r\n\tValue : string;\r\n}\r\n\r\nexport function GetEdges(nodes : Node[]) : Edge[] {\r\n\tvar edges : Edge[] = [];\r\n\r\n\t// compare all nodes\r\n\tfor (var i = 0; i < nodes.length; i++) {\r\n\t\tfor (var j = 0; j < nodes.length; j++) {\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar edgeValue = GetEdgeValue(nodes[i], nodes[j]);\r\n\t\t\tif (edgeValue) {\r\n\t\t\t\tnodes[i].Edges.push(edges.push({SourceNode: i, TargetNode: j, Value: edgeValue})-1);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\treturn edges;\r\n}\r\n\r\n\r\nexport function GetEdgeValue(source : Node, target : Node) : string|null {\r\n\r\n\tvar edgeValue = \"\";\r\n\r\n\tvar nextUp = source.LandingSchedule[0];\r\n\tvar newNodeLandingSchedule = source.LandingSchedule.slice(1,target.LandingSchedule.length);\r\n\tnewNodeLandingSchedule.push(0);\r\n\r\n\r\n\tvar multiplex = false;\r\n\tif (nextUp == 0) {\r\n\t\tedgeValue = \"0\";\r\n\t} else if (nextUp > 1) {\r\n\t\tmultiplex = true;\r\n\t\tedgeValue = \"[\";\r\n\t}\r\n\tfor (var i = 0; i < newNodeLandingSchedule.length; i++) {\r\n\t\tvar tossValue = i+1;\r\n\t\tvar tossValueString = tossValue.toString();\r\n\t\tif (tossValue > 9) {\r\n\t\t\ttossValueString = String.fromCharCode(87+tossValue);\r\n\t\t}\r\n\t\tif(newNodeLandingSchedule[i] != target.LandingSchedule[i]) {\r\n\t\t\tif (nextUp >= (target.LandingSchedule[i] - newNodeLandingSchedule[i])) {\r\n\t\t\t\tedgeValue += tossValueString;\r\n\t\t\t\tnextUp--;\r\n\t\t\t\tif (nextUp == 1 && (target.LandingSchedule[i] - newNodeLandingSchedule[i]) == 2) {\r\n\t\t\t\t\tedgeValue += tossValueString;\r\n\t\t\t\t\tnextUp--;\r\n\t\t\t\t}\t\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (multiplex) {\r\n\t\tedgeValue += ']';\r\n\t}\t\r\n\r\n\treturn edgeValue;\r\n\r\n}","import { Node, GetNodes } from \"./Node\";\r\nimport { Edge, GetEdges } from \"./Edge\";\r\n\r\nexport interface FindSiteswapsConfig {\r\n\tMinPeriod: number;\r\n\tMaxPeriod: number;\r\n\tNumProps: number;\r\n\tIncludeMultiplex: boolean;\r\n\tIncludeExcited: boolean;\r\n\tMaxSearches: number;\r\n\tMaxSiteswaps: number;\r\n\tSync: boolean;\r\n\tExclude: string[];\r\n}\r\n\r\nfunction last<T>(arr : T[]) : T {\r\n\treturn arr[arr.length-1];\r\n}\r\n\r\n\r\nexport function FindSiteswaps(config : FindSiteswapsConfig) : string[] {\r\n\r\n\tvar nodes = GetNodes(config.MaxPeriod, config.NumProps, config.IncludeMultiplex);\r\n\tvar edges = GetEdges(nodes);\r\n\r\n\tvar numSearches = 0;\r\n\tvar siteswaps : number[][] = [];\r\n\tvar formattedSiteswaps : string[] = [];\r\n\r\n\tsearch(0, []);\t\r\n\r\n\treturn formattedSiteswaps;\r\n\r\n\tfunction search(origNodeIx : number, history : number[]) {\r\n\r\n\t\tnumSearches++;\t\r\n\t\tif (numSearches <= config.MaxSearches && siteswaps.length < config.MaxSiteswaps) {\r\n\r\n\t\t\tvar nextNodeIx = origNodeIx;\r\n\t\t\tvar validSiteswap = false;\r\n\t\t\tvar siteswapStartNode = undefined;\r\n\r\n\t\t\tif (history.length > 0 && history.length <= config.MaxPeriod) {\r\n\t\t\t\t\r\n\t\t\t\t// check if valid siteswap, ie. the last edge returns us to a node in the history\r\n\t\t\t\tif (history.length >= config.MinPeriod && (!config.Sync || history.length % 2 == 0)) {\r\n\t\t\t\t\tif (edges[last(history)].TargetNode == origNodeIx) {\r\n\t\t\t\t\t\tvalidSiteswap = true;\r\n\t\t\t\t\t\tsiteswapStartNode = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// excited siteswaps would return us to any node within the search (assuming the first node is the ground node)\r\n\t\t\t\t\t\tif (config.IncludeExcited) {\r\n\t\t\t\t\t\t\tfor (var i = 0; i < history.length; i++) {\r\n\t\t\t\t\t\t\t\tif (edges[last(history)].TargetNode == edges[history[i]].SourceNode && (!config.Sync || i % 2 == 0)) {\r\n\t\t\t\t\t\t\t\t\tvalidSiteswap = true;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tsiteswapStartNode = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if the siteswap is valid check to see if it already exists, and if not, then add it to the list\r\n\t\t\t\tif (validSiteswap) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar siteswap = history.map(function (a,ix) {\r\n\t\t\t\t\t\tif (!config.Sync) {\r\n\t\t\t\t\t\t\treturn edges[a].Value; \r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar syncEdgeValue = \"\";\r\n\t\t\t\t\t\t\tvar asyncEdgeValue = edges[a].Value;\r\n\t\t\t\t\t\t\tfor (var i = 0; i < asyncEdgeValue.length; i++) {\r\n\t\t\t\t\t\t\t\tif (asyncEdgeValue[i] == \"[\" || asyncEdgeValue[i] == \"]\" || parseInt(asyncEdgeValue[i]) % 2 == 0 ) {\r\n\t\t\t\t\t\t\t\t\tsyncEdgeValue += asyncEdgeValue[i];\r\n\t\t\t\t\t\t\t\t} else if (ix % 2 == 0) {\r\n\t\t\t\t\t\t\t\t\tsyncEdgeValue += ((parseInt(asyncEdgeValue[i])-1)+\"x\");\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tsyncEdgeValue += ((parseInt(asyncEdgeValue[i])+1)+\"x\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn syncEdgeValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).slice(siteswapStartNode);\r\n\r\n\t\t\t\t\tvar exists = false;\r\n\t\t\t\t\tfor (var i = 0; i < siteswaps.length; i++) {\r\n\t\t\t\t\t\tvar ssToMatch = siteswaps[i].map(function (a,ix) {\r\n\t\t\t\t\t\t\tif (!config.Sync) {\r\n\t\t\t\t\t\t\t\treturn edges[a].Value; \r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar syncEdgeValue = \"\";\r\n\t\t\t\t\t\t\t\tvar asyncEdgeValue = edges[a].Value;\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < asyncEdgeValue.length; i++) {\r\n\t\t\t\t\t\t\t\t\tif (asyncEdgeValue[i] == \"[\" || asyncEdgeValue[i] == \"]\" || parseInt(asyncEdgeValue[i]) % 2 == 0 ) {\r\n\t\t\t\t\t\t\t\t\t\tsyncEdgeValue += asyncEdgeValue[i];\r\n\t\t\t\t\t\t\t\t\t} else if (ix % 2 == 0) {\r\n\t\t\t\t\t\t\t\t\t\tsyncEdgeValue += ((parseInt(asyncEdgeValue[i])-1)+\"x\");\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tsyncEdgeValue += ((parseInt(asyncEdgeValue[i])+1)+\"x\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn syncEdgeValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (patternsMatch(ssToMatch,siteswap.slice())) {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\texists = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!exists) {\r\n\t\t\t\t\t\t// the siteswaps array will actually store the edge history which can be converted into a siteswap string\r\n\t\t\t\t\t\tvar siteswapIx = siteswaps.push(history.slice(siteswapStartNode))-1;\r\n\t\t\t\t\t\tfor (var i = 0; i < siteswap.length; i++) {\r\n\t\t\t\t\t\t\tif (parseInt(siteswap[i]) > 9) {\r\n\t\t\t\t\t\t\t\tsiteswap[i] = String.fromCharCode(87+parseInt(siteswap[i]));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar formattedSiteswap = \"\";\r\n\t\t\t\t\t\tif (config.Sync) {\r\n\t\t\t\t\t\t\tfor (var i = 0; i < siteswap.length; i++) {\r\n\t\t\t\t\t\t\t\tif (i % 2 == 0) {\r\n\t\t\t\t\t\t\t\t\tformattedSiteswap += (\"(\" + siteswap[i] + \",\");\r\n\t\t\t\t\t\t\t\t} else { \r\n\t\t\t\t\t\t\t\t\tformattedSiteswap += (siteswap[i] + \")\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tformattedSiteswap = siteswap.join('');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tformattedSiteswaps.push(formattedSiteswap);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalidSiteswap = true;\r\n\t\t\t\t}\r\n\t\t\t\tnextNodeIx = edges[last(history)].TargetNode;\r\n\t\t\t}\r\n\r\n\t\t\t// if the siteswap was invalid or it was valid but was excited, and we're still below the maxperiod for a siteswap, keep searching\r\n\t\t\tif ((!validSiteswap || siteswapStartNode! > 0) && history.length < config.MaxPeriod) {\r\n\r\n\t\t\t\t// search each edge of this next node\r\n\t\t\t\tnodes[nextNodeIx].Edges.map(function(edgeIx) {\r\n\r\n\t\t\t\t\t// was previously checking if we already visited the next node, but not doing that anymore since we're checking for excited swaps\r\n\t\t\t\t\tvar alreadyVisited = false;\r\n\r\n\t\t\t\t\t// check if searching this edge is going to match the exclusion pattern\r\n\t\t\t\t\t// TODO: need to fix this to search better\r\n\t\t\t\t\tvar exclude = false;\r\n\t\t\t\t\tfor (var j = 0; j < config.Exclude.length; j++) {\r\n\t\t\t\t\t\tif (config.Exclude[j] == edges[edgeIx].Value) {\r\n\t\t\t\t\t\t\texclude = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if this is an odd numbered edge in the history and we're doing sync, this can't be a 1\r\n\t\t\t\t\tif (config.Sync && history.length % 2 == 0 && edges[edgeIx].Value.indexOf(\"1\") > -1) {\r\n\t\t\t\t\t\texclude = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// execute the search through the edge\r\n\t\t\t\t\tif (!alreadyVisited && !exclude) {\r\n\t\t\t\t\t\tvar newHistory = history.slice();\r\n\t\t\t\t\t\tnewHistory.push(edgeIx);\r\n\t\t\t\t\t\tsearch(origNodeIx,newHistory);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\t\t}\t\t\t\t\r\n\r\n\t}\r\n\r\n\t// compare 2 siteswap patterns to check for equality\r\n\tfunction patternsMatch(p1 : string[], p2 : string[]) {\r\n\r\n\t\tif (p1.length != p2.length) {\r\n\t\t\treturn false;\r\n\t\t} else {\t\t\t\r\n\t\t\tfor (var i = 0; i <= p1.length; i++) {\r\n\t\t\t\tif (p1.toString() == p2.toString()) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tp1.push(p1[0]);\r\n\t\t\t\tp1 = p1.slice(1);\t\r\n\t\t\t\tif (config.Sync) {\r\n\t\t\t\t\tp1.push(p1[0]);\r\n\t\t\t\t\tp1 = p1.slice(1);\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}","/*\r\nInterfaces\r\n\r\nSiteswapSearch\r\n - Graph : SiteswapGraph\r\n  - Nodes : Node[]\r\n   - LandingSchedule : int[]\r\n   - Edges : int[]\r\n  - Edges : Edge[]\r\n   - SourceNode : int\r\n   - TargetNode : int\r\n   - Value: string\r\n - Siteswaps : Edge[][]\r\n - FormattedSiteswaps : string[]\r\n\r\nSiteswapSearchConfig\r\n - MinPeriod : int\r\n - Async : boolean\r\n - Callbacks : SiteswapSearchCallbacks // add callbacks later\r\n - Exclude : string[]\r\n - IncludeExcited : boolean\r\n - MaxSearches : int\r\n - MaxSiteswaps : int\r\n - Sync : boolean\r\n\r\n\r\n\r\nexports function SiteswapSearch(config) : SiteswapSearch\r\n\r\n - buildNodes\r\n - buildEdges\r\n - search\r\n*/\r\n\r\nexport interface Node {\r\n\tLandingSchedule: number[];\t\r\n\tEdges: number[]\r\n}\r\n\r\nexport function GetNodes(maxPeriod : number, numProps : number, includeMultiplex : boolean) : Node[] {\r\n\t\r\n\tvar nodes : Node[] = [];\r\n\r\n\tvar firstNode = {LandingSchedule:[], Edges:[]};\r\n\tvar options = [1,0];\r\n\tif (includeMultiplex) {\r\n\t\toptions.push(2);\r\n\t}\r\n\r\n\tbuildNodes(firstNode, options, false);\r\n\r\n\treturn nodes;\r\n\r\n\tfunction buildNodes(node : Node, options : number[], last : boolean) {\r\n\t\t// if the node we're constructing has reached the expected length\r\n\t\tif (node.LandingSchedule.length == maxPeriod) {\r\n\t\t\tif (node.LandingSchedule.reduce(function(a,b) { return a+b; }) == numProps) {\r\n\t\t\t\tnodes.push(node);\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\t// if we've created all the nodes kick off the function to build the edges\r\n\t\t\tif (last) {\r\n\t\t\t\t//buildEdges();\r\n\t\t\t}\r\n\t\t\r\n\t\t} \r\n\t\t// if the node is not the expected length then we need to keep building\r\n\t\telse {\r\n\r\n\t\t\toptions.map(function(nodeOption,ix,nodeOptions) {\t\t\r\n\r\n\t\t\t\tvar newNode = {\r\n\t\t\t\t\tLandingSchedule : node.LandingSchedule.slice(),\r\n\t\t\t\t\tEdges: []\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tnewNode.LandingSchedule.push(nodeOption);\r\n\r\n\t\t\t\tvar propDiff = newNode.LandingSchedule.reduce(function(a,b) { return a+b; }) - numProps;\r\n\t\t\t\tvar newNodeOptions = [];\r\n\t\t\t\t\r\n\t\t\t\t// always have 1 first so the first node is the ground node\r\n\t\t\t\tif (propDiff == 0) {\r\n\t\t\t\t\tnewNodeOptions = [0];\r\n\t\t\t\t} else if (propDiff == 1) {\r\n\t\t\t\t\tnewNodeOptions = [1,0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (includeMultiplex) {\r\n\t\t\t\t\t\tnewNodeOptions = [1,2,0];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewNodeOptions = [1,0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if (config.async) {\r\n\t\t\t\t// \tsetTimeout(buildNodes,0,newNode,newNodeOptions,last);\r\n\t\t\t\t// } else {\r\n\t\t\t\t\tbuildNodes(newNode,newNodeOptions,last && (ix == nodeOptions.length-1));\r\n\t\t\t\t//}\r\n\t\t\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Siteswap } from '../simulator/Siteswap';\r\nimport { Pattern } from '../simulator/Pattern';\r\nimport { GetDwellPaths, DwellPath } from '../simulator/DwellPath';\r\nimport { PrimaryButton, Stack, TextField, MessageBar, MessageBarType, Modal, Label, Link, DefaultButton, Slider } from 'office-ui-fabric-react';\r\nimport 'office-ui-fabric-react/dist/css/fabric.css';\r\nimport * as Yaml from 'js-yaml';\r\nimport { SyntaxHelp } from './SyntaxHelp';\r\nimport { FindRandomPattern } from '../search/RandomPattern';\r\n\r\ninterface Props {\r\n\tupdatePattern: Function,\r\n\tupdateAnimationSpeed: Function\r\n}\r\n\r\nexport interface PatternSettings {\t\r\n\tsiteswap: string,\r\n\tbeatDuration: number,\r\n\tdwellPath: string,\r\n\tdwellRatio: number\r\n}\r\n\r\ninterface State {\r\n\tinput: string,\r\n\terrorMessage: string|null,\r\n\tshowSyntaxHelp: boolean\r\n}\r\n\r\nconst defaultPatternSettings : PatternSettings = {\t\r\n\tsiteswap: '3',\r\n\tbeatDuration: 0.24,\r\n\tdwellPath: \"(30)(10)\",\r\n\tdwellRatio: 0.8\r\n};\r\n\r\nexport class PatternSettingsControls extends Component<Props,State> {\r\n\r\n\tconstructor(props : Props) {\r\n\t\tsuper(props);\t\t\r\n\r\n\t\tthis.state = {\r\n\t\t\tinput: Yaml.safeDump(defaultPatternSettings).replace(/'/g,\"\"),\r\n\t\t\terrorMessage: null,\r\n\t\t\tshowSyntaxHelp: false\r\n\t\t};\r\n\t\r\n\t\t// This binding is necessary to make `this` work in the callback\t\t\r\n\t\tthis.updatePatternSettingsInput = this.updatePatternSettingsInput.bind(this);\r\n\t\tthis.closeSyntaxHelp = this.closeSyntaxHelp.bind(this);\r\n\t\tthis.showSyntaxHelp = this.showSyntaxHelp.bind(this);\r\n\t\tthis.juggleRandomPattern = this.juggleRandomPattern.bind(this);\r\n\t\tthis.juggleInputPattern = this.juggleInputPattern.bind(this);\r\n\t\tthis.juggle = this.juggle.bind(this);\r\n\t}\r\n\r\n\tprivate showSyntaxHelp() {\r\n\t\tthis.setState({\r\n\t\t\tshowSyntaxHelp: true\r\n\t\t});\r\n\t}\r\n\r\n\tprivate closeSyntaxHelp() {\r\n\t\tthis.setState({\r\n\t\t\tshowSyntaxHelp: false\r\n\t\t});\r\n\t}\r\n\r\n\tprivate updatePatternSettingsInput(e : any) {\t\t\r\n\t\tthis.setState({\r\n\t\t\tinput: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tprivate juggle(patternSettings : PatternSettings) {\r\n\t\ttry {\r\n\t\t\tvar siteswap = new Siteswap(patternSettings.siteswap.toString());\r\n\t\t\tvar pattern = new Pattern(siteswap, GetDwellPaths(patternSettings.dwellPath), patternSettings.dwellRatio, 1);\r\n\t\t\tpattern.Simulate(100,patternSettings.beatDuration);\r\n\t\t\t// lift pattern w/ simulation up to parent\r\n\t\t\tthis.props.updatePattern(pattern);\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorMessage: null\r\n\t\t\t});\r\n\t\t} catch(e) {\r\n\t\t\tvar errorMessage : string;\r\n\t\t\tif (e.message) {\r\n\t\t\t\terrorMessage = e.message;\r\n\t\t\t} else {\r\n\t\t\t\t// fallback in case any exceptions were thrown as strings\r\n\t\t\t\terrorMessage = e;\r\n\t\t\t}\r\n\t\t\tthis.setState({errorMessage: errorMessage});\t\r\n\t\t}\r\n\t}\r\n\r\n\tprivate juggleRandomPattern() {\r\n\t\tvar patternSettings = FindRandomPattern();\r\n\t\tthis.setState({input: Yaml.safeDump(patternSettings).replace(/'/g,\"\")});\r\n\t\tthis.juggle(patternSettings);\r\n\t}\r\n\r\n\tprivate juggleInputPattern() {\r\n\t\tvar patternSettings : PatternSettings | undefined;\t\t\r\n\t\ttry {\r\n\t\t\tpatternSettings = Yaml.safeLoad(this.state.input);\r\n\t\t} catch (e) {\r\n\t\t\tthis.setState({errorMessage: \"Invalid pattern settings.\"});\r\n\t\t}\r\n\t\tif (patternSettings) {\r\n\t\t\tthis.juggle(patternSettings);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tprivate updateAnimationSpeed(value : number) {\r\n\t\tvar animationSpeed = 1000*value + 5000*(1-value);\r\n\t\tthis.props.updateAnimationSpeed(animationSpeed);\r\n\t}\r\n\r\n\trender() {\t\t\r\n\t\treturn (\r\n\t\t\t<Stack>\t\t\t\t\r\n\t\t\t\t<MessageBar messageBarType={MessageBarType.info}>\r\n\t\t\t\t\tThis is a new version of Gunswap still in development. The old version is still available at <Link href=\"https://www.gunswap.co\">gunswap.co</Link>. Found a bug or have an enhancement idea? <Link href=\"https://github.com/yDgunz/gunswap/issues\">Open a ticket in Github</Link> or email me at <Link href=\"mailto:gunswapjuggling@gmail.com\">gunswapjuggling@gmail.com</Link>.\r\n\t\t\t\t</MessageBar>\r\n\t\t\t\t{this.state.errorMessage &&\r\n\t\t\t\t\t<MessageBar messageBarType={MessageBarType.severeWarning} isMultiline={false}>\r\n\t\t\t\t\t\t{this.state.errorMessage}\r\n\t\t\t \t \t</MessageBar>\r\n\t\t\t\t}\r\n\t\t\t\t<Stack horizontal>\r\n\t\t\t\t\t<PrimaryButton className=\"panel-main-button\" text=\"Juggle\" onClick={this.juggleInputPattern} />\r\n\t\t\t\t\t<DefaultButton className=\"panel-main-button\" text=\"Random Pattern\" onClick={this.juggleRandomPattern} />\t\r\n\t\t\t\t</Stack>\r\n\t\t\t\t<Label>Advanced Pattern Settings | <Link onClick={this.showSyntaxHelp}>Syntax Help</Link></Label>\r\n\t\t\t\t<Modal\r\n\t\t\t\t\tisOpen={this.state.showSyntaxHelp}\r\n\t\t\t\t\tonDismiss={this.closeSyntaxHelp}\r\n\t\t\t\t\tisBlocking={false}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SyntaxHelp closeSyntaxHelp={this.closeSyntaxHelp} />\r\n\t\t\t\t</Modal>\t\t\t\t\t\t\t\r\n\t\t\t\t<TextField \r\n\t\t\t\t\tvalue={this.state.input} \r\n\t\t\t\t\tmultiline={true}\r\n\t\t\t\t\tonChange={this.updatePatternSettingsInput} \r\n\t\t\t\t\tautoAdjustHeight={true} />\t\t\r\n\t\t\t\t<br/>\t\t\r\n\t\t\t\t<Slider\r\n\t\t\t\t\tlabel={\"Animation Speed\"}\r\n\t\t\t\t\tmin={0}\r\n\t\t\t\t\tmax={1}\r\n\t\t\t\t\tstep={0.01}\r\n\t\t\t\t\tdefaultValue={0.5}\r\n\t\t\t\t\tshowValue={false}\r\n\t\t\t\t\tonChanged={(e,value) => this.updateAnimationSpeed(value)}\r\n\t\t\t\t/>\r\n\t\t\t</Stack>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n// would like to use this for the buttons but adds scrollbars to the window\r\n/*\r\n\t\t\t\t<div className=\"ms-Grid\" dir=\"ltr\">\r\n\t\t\t\t\t<div className=\"ms-Grid-row\">\r\n\t\t\t\t\t\t<div className=\"ms-Grid-col ms-md6\">\r\n\t\t\t\t\t\t\t<PrimaryButton className=\"panel-main-button\" text=\"Juggle\" onClick={this.juggle} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"ms-Grid-col ms-md6\">\r\n\t\t\t\t\t\t\t<PrimaryButton className=\"panel-main-button\" text=\"Random Pattern\" onClick={this.randomPattern} />\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n*/","import { Pattern } from \"../simulator/Pattern\";\r\nimport { FindSiteswaps } from \"./Search\";\r\nimport { Siteswap } from \"../simulator/Siteswap\";\r\nimport { DwellPath, GetDwellPaths } from \"../simulator/DwellPath\";\r\nimport { PatternSettings } from \"../ui/PatternSettings\";\r\n\r\n\r\nexport function FindRandomPattern() : PatternSettings {\r\n\t\r\n\tvar config = {\r\n\t\tNumProps: 3+Math.round(Math.random()),\r\n\t\tMinPeriod: 1,\r\n\t\tMaxPeriod: 6,\r\n\t\tIncludeMultiplex: false,\r\n\t\tIncludeExcited: true, // kept as false so we can string together patterns\r\n\t\tMaxSearches: 1000,\r\n\t\tMaxSiteswaps: 100,\r\n\t\tSync: Math.random() < 0.3,\r\n\t\tExclude: []\r\n\t}\r\n\r\n\tvar siteswaps = FindSiteswaps(config);\t\r\n\r\n\tvar dwellPathXPositions = [-20,-10,0,10,20,30];\r\n\tvar dwellPathYPositions = [0,0,10,20,20,30];\r\n\r\n\tvar dwellPathPositions : string[] = [];\r\n\tfor(var i = 0; i < dwellPathXPositions.length; i++) {\r\n\t\tfor(var j = 0; j < dwellPathYPositions.length; j++) {\r\n\t\t\tdwellPathPositions.push(`(${dwellPathXPositions[i]},${dwellPathYPositions[j]})`);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction findRandomPattern() : PatternSettings {\r\n\r\n\t\tvar siteswap = siteswaps[Math.floor(Math.random()*siteswaps.length)];\t\r\n\t\t\r\n\t\tvar dwellPaths = [];\r\n\t\tfor (var i = 0; i < 1+Math.round(Math.random()); i++) {\t\t\t\r\n\t\t\tvar dwellPath = \"\";\r\n\t\t\tfor (var j = 0; j < 1+Math.round(Math.random()); j++) {\r\n\t\t\t\tdwellPath += dwellPathPositions[Math.floor(Math.random()*dwellPathPositions.length)];\r\n\t\t\t}\r\n\t\t\tdwellPaths.push(dwellPath);\t\t\r\n\t\t}\r\n\t\r\n\t\tvar dwellPath = dwellPaths.join(\".\");\r\n\t\r\n\t\tvar dwellRatio = 0.8;\r\n\r\n\t\tvar s = new Siteswap(siteswap);\r\n\t\tvar d = GetDwellPaths(dwellPath);\r\n\t\tvar p = new Pattern(s, d, dwellRatio, 0);\t\r\n\t\r\n\t\tvar beatDuration = 0.2;\r\n\r\n\t\t// todo - should be able to call this w/ breakOnCollision = true\r\n\t\tvar hasCollision = p.Simulate(20,beatDuration,false);\r\n\r\n\t\tif (hasCollision) {\r\n\t\t\treturn findRandomPattern();\r\n\t\t} else {\r\n\t\t\treturn {\t\r\n\t\t\t\tsiteswap: siteswap,\r\n\t\t\t\tbeatDuration: beatDuration,\r\n\t\t\t\tdwellPath: dwellPath,\r\n\t\t\t\tdwellRatio: dwellRatio\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\treturn findRandomPattern();\r\n\r\n}","import * as THREE from \"three\";\r\nimport { Pattern } from \"../simulator/Pattern\";\r\nimport { Object3D } from \"three\";\r\nimport { vec3 } from \"@tlaukkan/tsm\";\r\nimport { ShoulderZOffset, ShoulderHeight, ArmHalfLength, ShoulderXOffset } from \"../simulator/JugglerConfig\";\r\n\r\nconst JugglerMeshMaterial = new THREE.MeshLambertMaterial( { color: 'grey' } );\r\n\r\ninterface JugglerMeshes {\r\n\tLeftHandMesh : THREE.Mesh;\r\n\tRightHandMesh : THREE.Mesh;\r\n\tLeftElbowMesh : THREE.Mesh;\r\n\tRightElbowMesh : THREE.Mesh;\r\n\tLeftShoulderMesh : THREE.Mesh;\r\n\tRightShoulderMesh : THREE.Mesh;\r\n\tLeftBicepMesh: THREE.Mesh;\r\n\tLeftForearmMesh: THREE.Mesh;\r\n\tRightBicepMesh: THREE.Mesh;\r\n\tRightForearmMesh: THREE.Mesh;\r\n\tLeftWristMesh: THREE.Mesh;\r\n\tRightWristMesh: THREE.Mesh;\r\n\tBodyMesh: THREE.Mesh;\r\n\tHeadMesh: THREE.Mesh;\r\n}\r\n\r\nexport class JugglingScene {\r\n\t\r\n\tprivate scene : THREE.Scene;\r\n\tprivate camera : THREE.PerspectiveCamera;\r\n\tprivate renderer : THREE.WebGLRenderer;\t\r\n\tprivate propMeshes : THREE.Mesh[];\r\n\tprivate jugglerMeshes : JugglerMeshes[];\r\n\tprivate camRadius : number;\r\n\tprivate camPhi : number;\r\n\tprivate camTheta : number;\r\n\tprivate startTime : number;\r\n\tpublic pattern : Pattern|null;\t\r\n\tprivate isMouseDown : boolean;\r\n\tprivate onMouseDownPosition : vec3;\r\n\tprivate onMouseDownTheta : number;\r\n\tprivate onMouseDownPhi : number;\r\n\tprivate positionToLookAt : vec3;\r\n\tpublic currentStep : number;\r\n\tpublic userControllingStep : boolean;\r\n\tpublic animationSpeed : number;\r\n\r\n\t\r\n\r\n\tconstructor(container : HTMLDivElement, pattern : Pattern|null, width : number, height : number, animationSpeed: number) {\t\t\r\n\r\n\t\tthis.scene = new THREE.Scene();\r\n\t\tthis.camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );\r\n\t\tthis.positionToLookAt = new vec3();\t\r\n\t\t\r\n\t\tthis.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n\t\t\r\n\t\tthis.scene.add( new THREE.HemisphereLight(0xffffff, 0x000000, 1 ));\r\n\t\t//this.scene.background = new THREE.Color(\"white\");\r\n\r\n\t\tthis.propMeshes = [];\r\n\t\tthis.jugglerMeshes = [];\r\n\t\t\r\n\t\tthis.camRadius = 1;\r\n\t\tthis.camPhi = .3;\r\n\t\tthis.camTheta = Math.PI;\r\n\t\t\r\n\t\tthis.startTime = (new Date()).getTime();\r\n\t\t\r\n\t\tthis.pattern = pattern;\r\n\t\tif (pattern) {\r\n\t\t\tthis.UpdatePattern(pattern);\r\n\t\t}\r\n\t\t\r\n\t\tthis.isMouseDown = false;\r\n\t\tthis.onMouseDownPosition = new vec3();\r\n\t\tthis.onMouseDownTheta = 0;\r\n\t\tthis.onMouseDownPhi = 0;\r\n\t\tthis.userControllingStep = false;\r\n\t\tthis.currentStep = 0;\r\n\t\tthis.animationSpeed = animationSpeed;\r\n\r\n\t\tthis.renderer.setSize(width, height);\r\n\r\n\t\tthis.renderer.domElement.addEventListener( 'mousemove', (event) => { \r\n\t\t\tthis.onDocumentMouseMove(event); \r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'mousedown', (event) => {\r\n\t\t\tthis.onDocumentMouseDown(event);\r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'mouseup', (event) => {\r\n\t\t\tthis.onDocumentMouseUp(event);\r\n\t\t}, false );\t\t\r\n\t\tthis.renderer.domElement.addEventListener( 'wheel', (event) => {\r\n\t\t\tthis.onDocumentMouseWheel(event);\r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'touchmove', (event) => {\r\n\t\t\tthis.onDocumentTouchMove(event);\r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'touchstart', (event) => {\r\n\t\t\tthis.onDocumentTouchStart(event);\r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'touchmove', (event) => {\r\n\t\t\tthis.onDocumentTouchEnd(event);\r\n\t\t}, false );\r\n\t\t\r\n\t\tcontainer.append(this.renderer.domElement);\r\n\r\n\t\tthis.animate();\r\n\t} \r\n\r\n\tpublic UpdateStep(patternProgress : number) {\r\n\t\tthis.currentStep = Math.floor(this.pattern!.States.length*this.pattern!.Simulation!.NumStepsPerBeat*patternProgress);\r\n\t\tthis.userControllingStep = true;\r\n\t}\r\n\r\n\tpublic UpdatePattern(pattern : Pattern|null) {\r\n\t\tthis.pattern = pattern;\r\n\t\tif (pattern) {\r\n\t\t\tvar highestLowest = (pattern as Pattern).GetHeighestAndLowestPositionInSimulation();\r\n\t\t\tthis.positionToLookAt.y = highestLowest[0] - (highestLowest[0] - highestLowest[1])/2;\r\n\t\t\tthis.updateCamera();\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tpublic Resize(width : number, height : number) {\r\n\t\tthis.renderer.setSize(width, height);\r\n\t\tthis.camera.aspect = width/height;\r\n\t\tthis.camera.updateProjectionMatrix();\r\n\t}\r\n\r\n\tprivate onDocumentMouseDown( event : MouseEvent ) {\r\n\t\tthis.isMouseDown = true;\r\n\t\tthis.onMouseDownTheta = this.camTheta;\r\n\t\tthis.onMouseDownPhi = this.camPhi;\r\n\t\tthis.onMouseDownPosition.x = event.clientX;\r\n\t\tthis.onMouseDownPosition.y = event.clientY;\r\n\t}\r\n\r\n\tprivate onDocumentTouchStart(event : TouchEvent) {\r\n\t\tthis.isMouseDown = true;\r\n\t\tthis.onMouseDownTheta = this.camTheta;\r\n\t\tthis.onMouseDownPhi = this.camPhi;\r\n\t\tthis.onMouseDownPosition.x = event.touches[0].clientX;\r\n\t\tthis.onMouseDownPosition.y = event.touches[0].clientY;\r\n\t}\r\n\r\n\tprivate onMove(x : number, y : number) {\r\n\t\tif ( this.isMouseDown ) {\r\n\t\t\tthis.camTheta = - ( ( x - this.onMouseDownPosition.x ) * 0.01 ) + this.onMouseDownTheta;\r\n\t\t\t\r\n\t\t\tvar dy = y - this.onMouseDownPosition.y;\r\n\t\t\t\r\n\t\t\tvar newCamPhi = ( ( dy ) * 0.01 ) + this.onMouseDownPhi;\r\n\r\n\t\t\tif (newCamPhi < Math.PI/2 && newCamPhi > -Math.PI/2) {\r\n\t\t\t\tthis.camPhi = newCamPhi;\r\n\t\t\t}\r\n\t\t\tthis.updateCamera();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onDocumentMouseMove(event : MouseEvent) {\r\n\t\tevent.preventDefault();\t\t\r\n\t\tthis.onMove(event.clientX, event.clientY);\r\n\t}\r\n\r\n\tprivate onDocumentTouchMove(event : TouchEvent) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.onMove(event.touches[0].clientX, event.touches[0].clientY);\r\n\t}\r\n\r\n\tprivate onDocumentMouseUp( event : MouseEvent) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.isMouseDown = false;\r\n\t}\r\n\r\n\tprivate onDocumentTouchEnd( event : TouchEvent) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.isMouseDown = false;\r\n\t}\r\n\r\n\tprivate onDocumentMouseWheel(event : WheelEvent) {\r\n\t\tthis.camRadius += event.deltaY*.05;\r\n\t\tthis.updateCamera();\r\n\t}\r\n\r\n\t// TODO - account for multiple jugglers\r\n\tprivate updateCamera() {\r\n\t\tthis.camera.position.x = this.camRadius * Math.sin( this.camTheta ) * Math.cos( this.camPhi );\r\n\t\tthis.camera.position.y = this.camRadius * Math.sin( this.camPhi ) + this.positionToLookAt.y;\r\n\t\tthis.camera.position.z = this.camRadius * Math.cos( this.camTheta ) * Math.cos( this.camPhi );\r\n\r\n\t\tthis.camera.lookAt(this.positionToLookAt.x, this.positionToLookAt.y, this.positionToLookAt.z);\r\n\t}\r\n\r\n\tprivate animate() {\r\n\t\tif (this.pattern && this.pattern.Simulation) {\t\t\t\r\n\r\n\t\t\tif (!this.userControllingStep) {\r\n\t\t\t\tvar timeElapsed = ((new Date()).getTime() - this.startTime);\r\n\t\t\r\n\t\t\t\tvar patternTimeElapsed = timeElapsed % (this.pattern.States.length*this.pattern.Simulation.BeatDuration*this.animationSpeed); \r\n\t\t\t\tthis.currentStep = Math.floor(patternTimeElapsed/(this.pattern.States.length*this.pattern.Simulation.BeatDuration*this.animationSpeed)*(this.pattern.Simulation.NumStepsPerBeat*this.pattern.States.length));\r\n\t\t\t}\r\n\r\n\t\t\t// if we need to, remove some meshes from the scene\r\n\t\t\twhile (this.pattern.Props.length < this.propMeshes.length) {\r\n\t\t\t\tvar meshToRemove = this.propMeshes.pop() as Object3D;\r\n\t\t\t\tthis.scene.remove(meshToRemove);\r\n\t\t\t}\r\n\r\n\t\t\t// need to create some meshes\r\n\t\t\twhile (this.pattern.Props.length > this.propMeshes.length) {\r\n\t\t\t\tvar geometry = new THREE.SphereGeometry( 0.05, 40 );\r\n\t\t\t\tvar material = new THREE.MeshLambertMaterial( { color: 0x00ff00 } );\r\n\t\t\t\tvar propMesh = new THREE.Mesh( geometry, material );\r\n\t\t\t\t\r\n\t\t\t\tthis.propMeshes.push( propMesh );\r\n\t\t\t\tthis.scene.add( propMesh );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.propMeshes.forEach((mesh, propIx) => {\r\n\t\t\t\tvar position = this.pattern!.Simulation!.Props[propIx].Positions[this.currentStep];\r\n\t\t\t\tmesh.position.set(position.x, position.y, position.z);\r\n\t\t\t});\r\n\r\n\t\t\t// TODO - remove juggler meshes if necessary\r\n\t\t\twhile (this.pattern.Simulation.Jugglers.length > this.jugglerMeshes.length) {\t\t\t\t\r\n\t\t\t\tthis.addJugglerMeshes();\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tthis.jugglerMeshes.forEach((meshes, jugglerIx) => {\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar jugglerPositions = this.pattern!.Simulation!.Jugglers[jugglerIx];\r\n\t\t\t\t\r\n\t\t\t\tmeshes.BodyMesh.position.set(\r\n\t\t\t\t\t-ShoulderZOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep]),\r\n\t\t\t\t\t(ShoulderHeight-.4/2),\r\n\t\t\t\t\tShoulderZOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])\r\n\t\t\t\t);\r\n\t\t\t\tmeshes.BodyMesh.position.add(this.vec3ToTHREEVector3(jugglerPositions.BodyPositions[this.currentStep]));\r\n\r\n\t\t\t\tmeshes.HeadMesh.position.set(\r\n\t\t\t\t\t-ShoulderZOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep]),\r\n\t\t\t\t\t(ShoulderHeight+.17),\r\n\t\t\t\t\tShoulderZOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])\r\n\t\t\t\t);\r\n\t\t\t\tmeshes.HeadMesh.position.add(this.vec3ToTHREEVector3(jugglerPositions.BodyPositions[this.currentStep]));\r\n\r\n\t\t\t\tvar leftShoulderPosition = new THREE.Vector3(\r\n\t\t\t\t\t-ShoulderXOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])-ShoulderZOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep]),\r\n\t\t\t\t\t(ShoulderHeight),\r\n\t\t\t\t\t-ShoulderXOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep])+ShoulderZOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])\r\n\t\t\t\t);\r\n\t\t\t\tleftShoulderPosition.add(this.vec3ToTHREEVector3(jugglerPositions.BodyPositions[this.currentStep]));\r\n\r\n\t\t\t\tvar rightShoulderPosition = new THREE.Vector3(\r\n\t\t\t\t\tShoulderXOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])-ShoulderZOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep]),\r\n\t\t\t\t\t(ShoulderHeight),\r\n\t\t\t\t\tShoulderXOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep])+ShoulderZOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])\r\n\t\t\t\t);\r\n\t\t\t\trightShoulderPosition.add(this.vec3ToTHREEVector3(jugglerPositions.BodyPositions[this.currentStep]));\r\n\r\n\t\t\t\tvar leftHandPosition = this.vec3ToTHREEVector3(jugglerPositions.LeftHandPositions[this.currentStep]);\r\n\t\t\t\tvar rightHandPosition = this.vec3ToTHREEVector3(jugglerPositions.RightHandPositions[this.currentStep]);\r\n\t\t\t\tvar leftElbowPosition = this.vec3ToTHREEVector3(jugglerPositions.LeftElbowPositions[this.currentStep]);\r\n\t\t\t\tvar rightElbowPosition = this.vec3ToTHREEVector3(jugglerPositions.RightElbowPositions[this.currentStep]);\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tmeshes.LeftHandMesh.position.copy(leftHandPosition);\r\n\t\t\t\tmeshes.RightHandMesh.position.copy(rightHandPosition);\r\n\t\t\t\tmeshes.LeftElbowMesh.position.copy(leftElbowPosition);\r\n\t\t\t\tmeshes.RightElbowMesh.position.copy(rightElbowPosition);\r\n\t\t\t\tmeshes.LeftShoulderMesh.position.copy(leftShoulderPosition);\r\n\t\t\t\tmeshes.RightShoulderMesh.position.copy(rightShoulderPosition);\r\n\r\n\t\t\t\tthis.positionAndRotateArm(leftElbowPosition, leftShoulderPosition, leftHandPosition, meshes.LeftBicepMesh, meshes.LeftForearmMesh, meshes.LeftWristMesh);\r\n\t\t\t\tthis.positionAndRotateArm(rightElbowPosition, rightShoulderPosition, rightHandPosition, meshes.RightBicepMesh, meshes.RightForearmMesh, meshes.RightWristMesh);\r\n\r\n\t\t\t\t// rotate hands\r\n\t\t\t\tvar rotation = new THREE.Quaternion();\r\n\t\t\t\trotation.setFromUnitVectors(new THREE.Vector3(0,1,0), this.vec3ToTHREEVector3(jugglerPositions.LeftHandDirections[this.currentStep]));\r\n\t\t\t\tmeshes.LeftHandMesh.setRotationFromQuaternion(rotation);\r\n\t\t\t\trotation.setFromUnitVectors(new THREE.Vector3(0,1,0), this.vec3ToTHREEVector3(jugglerPositions.RightHandDirections[this.currentStep]));\r\n\t\t\t\tmeshes.RightHandMesh.setRotationFromQuaternion(rotation);\r\n\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trequestAnimationFrame( () => this.animate() );\r\n\t\tthis.renderer.render( this.scene, this.camera );\r\n\t}\r\n\r\n\tprivate vec3ToTHREEVector3(vec3 : vec3) : THREE.Vector3 {\r\n\t\treturn new THREE.Vector3(vec3.x, vec3.y, vec3.z);\r\n\t}\r\n\r\n\tprivate positionAndRotateArm(elbowPosition: THREE.Vector3, shoulderPosition: THREE.Vector3, handPosition: THREE.Vector3, bicepMesh : THREE.Mesh, forearmMesh: THREE.Mesh, wristMesh: THREE.Mesh) {\r\n\t\t// bicep\r\n\t\tvar armDirection = new THREE.Vector3().subVectors(elbowPosition, shoulderPosition);\r\n\t\tvar arrow = new THREE.ArrowHelper(armDirection.clone().normalize(), shoulderPosition);\r\n\t\tbicepMesh.rotation.setFromVector3(arrow.rotation.toVector3());\r\n\t\tvar newPosition = new THREE.Vector3().addVectors(shoulderPosition, armDirection.multiplyScalar(0.5));\r\n\t\tbicepMesh.position.copy(newPosition);\r\n\t\t\r\n\t\t// forearm\r\n\t\tarmDirection = new THREE.Vector3().subVectors(elbowPosition, handPosition);\r\n\t\tarrow = new THREE.ArrowHelper(armDirection.clone().normalize(), handPosition);\r\n\t\tforearmMesh.rotation.setFromVector3(arrow.rotation.toVector3());\r\n\t\tnewPosition = new THREE.Vector3().addVectors(handPosition, armDirection.multiplyScalar(0.5)).add(armDirection.clone().normalize().multiplyScalar(.04));\r\n\t\tforearmMesh.position.copy(newPosition);\r\n\r\n\t\t// wrist\r\n\t\tnewPosition = handPosition.clone().add(armDirection.clone().normalize().multiplyScalar(.08));\r\n\t\twristMesh.position.copy(newPosition);\r\n\t}\r\n\r\n\tprivate getHandMesh() : THREE.Mesh {\r\n\t\tvar geometry = new THREE.SphereBufferGeometry( 0.06, 20, 20, 0, Math.PI*2, Math.PI/2, Math.PI);\r\n\t\tvar material = new THREE.MeshPhongMaterial( { color: 'grey', side: THREE.DoubleSide, flatShading: true } );\r\n\t\treturn new THREE.Mesh( geometry, material );\r\n\t}\r\n\r\n\tprivate getJointMesh(radius : number) : THREE.Mesh {\r\n\t\tvar geometry = new THREE.SphereGeometry( radius, 20);\r\n\t\treturn new THREE.Mesh( geometry, JugglerMeshMaterial );\r\n\t}\r\n\r\n\tprivate getArmCylinder(radius1 : number, radius2: number, length: number) : THREE.Mesh {\t\t \r\n    \tvar cylinder = new THREE.CylinderGeometry( radius2, radius1, length, 20, 20 );\r\n    \treturn new THREE.Mesh( cylinder, JugglerMeshMaterial );\r\n\t}\r\n\r\n\tprivate addJugglerMeshes() {\r\n\t\tvar jugglerMeshes =  {\t\r\n\t\t\tLeftHandMesh: this.getHandMesh(),\r\n\t\t\tRightHandMesh: this.getHandMesh(),\r\n\t\t\tLeftElbowMesh: this.getJointMesh(.04),\r\n\t\t\tRightElbowMesh: this.getJointMesh(.04),\r\n\t\t\tLeftShoulderMesh: this.getJointMesh(.025),\r\n\t\t\tRightShoulderMesh: this.getJointMesh(.025),\r\n\t\t\tLeftWristMesh: this.getJointMesh(.02),\r\n\t\t\tRightWristMesh: this.getJointMesh(.02),\r\n\t\t\tLeftBicepMesh: this.getArmCylinder(.025, .04, ArmHalfLength),\r\n\t\t\tLeftForearmMesh: this.getArmCylinder(.02, .04, ArmHalfLength-0.09),\r\n\t\t\tRightBicepMesh: this.getArmCylinder(.025, .04, ArmHalfLength),\r\n\t\t\tRightForearmMesh: this.getArmCylinder(.02, .04, ArmHalfLength-0.09),\r\n\t\t\tBodyMesh: new THREE.Mesh(new THREE.CylinderGeometry(0.15, 0.05, .4, 20, 20, false), JugglerMeshMaterial),\r\n\t\t\tHeadMesh: new THREE.Mesh(new THREE.SphereBufferGeometry(.1, 20, 20), JugglerMeshMaterial)\r\n\t\t};\r\n\r\n\t\tthis.jugglerMeshes.push(jugglerMeshes);\r\n\r\n\t\tthis.scene.add(jugglerMeshes.LeftElbowMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftHandMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftShoulderMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightElbowMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightHandMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightShoulderMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftBicepMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftForearmMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightBicepMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightForearmMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftWristMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightWristMesh);\r\n\t\tthis.scene.add(jugglerMeshes.BodyMesh);\r\n\t\tthis.scene.add(jugglerMeshes.HeadMesh);\r\n\t}\r\n\r\n}","import React, { Component, Ref } from 'react';\r\nimport * as THREE from \"three\";\r\nimport 'office-ui-fabric-react/dist/css/fabric.css';\r\nimport { Pattern } from '../simulator/Pattern';\r\nimport { JugglingScene } from './JugglingScene';\r\nimport { Slider } from 'office-ui-fabric-react';\r\n\r\n\r\ninterface Props {\r\n\tpattern: Pattern,\r\n\tanimationSpeed: number\r\n}\r\n\r\ninterface State {\r\n\tdebugInfo: DebugInfo | null,\r\n\tuserControllingStep: boolean\r\n}\r\n\r\ninterface DebugInfo {\r\n\tstep: number\r\n}\r\n\r\nclass Viewport extends Component<Props,State> {\r\n\r\n\tCanvasContainerRef : HTMLDivElement | null;\r\n\r\n\tprivate jugglingScene : JugglingScene|undefined;\r\n\r\n\tconstructor(props : Props) {\r\n\t\tsuper(props);\t\t\r\n\t\tthis.CanvasContainerRef = null;\r\n\r\n\t\tthis.state = {\r\n\t\t\tdebugInfo: null,\r\n\t\t\tuserControllingStep: false\r\n\t\t};\r\n\t}\t\t\r\n\r\n\tupdateStep(sliderValue : number) {\r\n\t\tif (this.jugglingScene) {\r\n\t\t\tthis.jugglingScene.UpdateStep(sliderValue);\r\n\t\t\t\r\n\t\t\t this.setState({\r\n\t\t\t\t debugInfo: {step: this.jugglingScene!.currentStep},\r\n\t\t\t\t userControllingStep: true\r\n\t\t\t});\r\n\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\t\t\r\n\t\tif (this.jugglingScene) {\r\n\t\t\t// if the pattern changed then user is no longer controlling step\r\n\t\t\tif (this.jugglingScene.pattern !== this.props.pattern) {\r\n\t\t\t\tthis.jugglingScene.userControllingStep = false;\r\n\t\t\t\tthis.setState({userControllingStep: false, debugInfo: null});\r\n\t\t\t}\r\n\t\t\tthis.jugglingScene.UpdatePattern(this.props.pattern);\r\n\t\t\tthis.jugglingScene.animationSpeed = this.props.animationSpeed;\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t\r\n\t\tvar width = (this.CanvasContainerRef as HTMLDivElement).offsetWidth;\r\n\t\tvar height = window.innerHeight-28; // subtracting size of slider\r\n\t\tthis.jugglingScene = new JugglingScene(this.CanvasContainerRef as HTMLDivElement, this.props.pattern, width, height, this.props.animationSpeed);\r\n\r\n\t\t(window as any).jugglingScene = this.jugglingScene; // for debugging\r\n\r\n\t\twindow.addEventListener('resize', () => { \r\n\t\t\tif (this.CanvasContainerRef) {\r\n\t\t\t\tvar width = this.CanvasContainerRef.offsetWidth;\r\n\t\t\t\tvar height = window.innerHeight-28; // subtracting size of slider\r\n\t\t\t\tif (this.jugglingScene) {\r\n\t\t\t\t\tthis.jugglingScene!.Resize(width, height); \r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t});\r\n\t}\r\n\r\n  \trender() {\r\n\t\tlet debug : JSX.Element = (<div></div>);\r\n\t\tif (this.state.debugInfo) {\r\n\t\t\tdebug = <div>{this.state.debugInfo.step}</div>\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\t\t\t\t\r\n\t\t\t\t<div className=\"debug-info\">{debug}</div>\r\n\t\t\t\t<div ref={(DOMNodeRef) => {\r\n\t\t\t\t\tthis.CanvasContainerRef=DOMNodeRef;\r\n\t\t\t\t}}>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Slider\r\n\t\t\t\t\tmin={0}\r\n\t\t\t\t\tmax={0.99}\r\n\t\t\t\t\tstep={.005}\r\n\t\t\t\t\tshowValue={false}\r\n\t\t\t\t\tonChange={(value: number) => this.updateStep(value)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\t\t\t\r\n\t\t\t \r\n\t\t);\r\n  \t}\r\n}\r\n\r\nexport default Viewport;","import React, { Component, ReactNode } from 'react';\r\nimport { FindSiteswaps, FindSiteswapsConfig } from '../search/Search';\r\nimport { List, Stack, PrimaryButton, TextField, Label } from 'office-ui-fabric-react';\r\nimport * as Yaml from 'js-yaml';\r\n\r\ninterface State {\r\n\tSiteswaps : string[];\r\n\tInput: string\r\n}\r\n\r\nexport class Search extends Component<any,State> {\r\n\r\n\tconstructor(props : any) {\r\n\t\tsuper(props);\r\n\r\n\t\tvar defaultConfig : FindSiteswapsConfig = {\r\n\t\t\tNumProps: 3,\r\n\t\t\tMinPeriod: 1,\r\n\t\t\tMaxPeriod: 5,\t\t\t\r\n\t\t\tIncludeMultiplex: false,\r\n\t\t\tIncludeExcited: true,\r\n\t\t\tMaxSearches: 1000,\r\n\t\t\tMaxSiteswaps: 100,\r\n\t\t\tSync: false,\r\n\t\t\tExclude: []\r\n\t\t}\t\t\r\n\r\n\t\tthis.state = {\r\n\t\t\tSiteswaps: [],\r\n\t\t\tInput: Yaml.safeDump(defaultConfig),\r\n\t\t};\r\n\r\n\t\tthis.onRenderCell = this.onRenderCell.bind(this);\r\n\t\tthis.findSiteswaps = this.findSiteswaps.bind(this);\r\n\t\tthis.updateInput = this.updateInput.bind(this);\r\n\r\n\t}\r\n\r\n\tprivate findSiteswaps() {\r\n\t\tvar config : FindSiteswapsConfig | undefined;\r\n\t\ttry {\r\n\t\t\tconfig = Yaml.safeLoad(this.state.Input);\r\n\t\t} catch (e) {\r\n\t\t\t// TODO\r\n\t\t}\r\n\r\n\t\tif (config) {\r\n\t\t\tvar siteswaps = FindSiteswaps(config);\r\n\t\t\tthis.setState({Siteswaps: siteswaps});\r\n\t\t}\t\t\r\n\t}\t\r\n\r\n\tprivate onRenderCell(item?: string, index?: number | undefined): ReactNode {\r\n\t\treturn (\r\n\t\t\t<div id={index!.toString()}>\r\n\t\t\t\t{item}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate updateInput(e : any) {\r\n\t\tthis.setState({\r\n\t\t\tInput: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Stack>\r\n\t\t\t\t<PrimaryButton className=\"panel-main-button\" text=\"Find Siteswaps\" onClick={this.findSiteswaps} />\t\t\t\t\t\r\n\t\t\t\t<Label>Search Settings</Label>\r\n\t\t\t\t<TextField \r\n\t\t\t\t\tvalue={this.state.Input} \r\n\t\t\t\t\tmultiline={true}\r\n\t\t\t\t\tonChange={this.updateInput} \r\n\t\t\t\t\tautoAdjustHeight={true} />\r\n\t\t\t\t<List items={this.state.Siteswaps} onRenderCell={this.onRenderCell}></List>\r\n\t\t\t</Stack>\t\t\t\t\r\n\t\t)\r\n\t}\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Siteswap } from '../simulator/Siteswap';\r\nimport { Pattern } from '../simulator/Pattern';\r\nimport { GetDwellPaths } from '../simulator/DwellPath';\r\nimport { PivotItem, Pivot } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { PatternSettingsControls } from './PatternSettings';\r\nimport 'office-ui-fabric-react/dist/css/fabric.css';\r\nimport Viewport from './Viewport';\r\nimport { PatternSimulation } from '../simulator/PatternSimulation';\r\nimport { Slider } from 'office-ui-fabric-react';\r\nimport { Search } from './Search';\r\n\r\ninterface State {\r\n\tpattern: Pattern,\r\n\tanimationSpeed: number\r\n}\r\n\r\nclass Animator extends Component<any,State> {\r\n\r\n\tconstructor(props : any) {\r\n\t\tsuper(props);\t\t\r\n\r\n\t\tthis.state = {\r\n\t\t\tpattern: new Pattern(new Siteswap(\"3\"), GetDwellPaths(\"(30)(10)\"), 0.8, 0),\r\n\t\t\tanimationSpeed: 2000\r\n\t\t}\r\n\r\n\t\tthis.state.pattern.Simulate(100,0.24);\r\n\r\n\t\twindow.onresize = () => {\r\n\t\t\tthis.forceUpdate();\r\n\t\t}\r\n\r\n\t\tthis.updatePattern = this.updatePattern.bind(this);\r\n\t}\r\n\r\n\tprivate updatePattern(pattern : Pattern) {\r\n\t\tthis.setState({pattern: pattern});\r\n\t}\r\n\r\n\tprivate updateAnimationSpeed(value : number) {\r\n\t\tthis.setState({animationSpeed: value});\r\n\t}\t\r\n\r\n  \trender() {\r\n\t\tlet patternSettings = <PatternSettingsControls updatePattern={this.updatePattern} updateAnimationSpeed={this.updateAnimationSpeed}></PatternSettingsControls>;\r\n\t\tlet search = <Search></Search>; \r\n\t\tlet viewport = <Viewport pattern={this.state.pattern} animationSpeed={this.state.animationSpeed} />;\t\r\n\t\t\r\n\t\tif (window.innerWidth > 900) {\r\n\t\t\treturn (\t\t\t\r\n\t\t\t\t<div className=\"ms-Grid\" dir=\"ltr\">\r\n\t\t\t\t\t<div className=\"ms-Grid-row\">\r\n\t\t\t\t\t\t<div className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg4\">\r\n\t\t\t\t\t\t<Pivot >\r\n\t\t\t\t\t\t\t<PivotItem headerText=\"Pattern\" itemIcon=\"Settings\">\r\n\t\t\t\t\t\t\t\t{patternSettings}\r\n\t\t\t\t\t\t\t</PivotItem>\r\n\t\t\t\t\t\t\t<PivotItem headerText=\"Siteswaps\" itemIcon=\"Search\">\r\n\t\t\t\t\t\t\t\t{search}\r\n\t\t\t\t\t\t\t</PivotItem>\r\n\t\t\t\t\t\t</Pivot>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"ms-Grid-col ms-sm6 ms-md8 ms-lg8\">\r\n\t\t\t\t\t\t\t{viewport}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>      \t\t\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<Pivot >\r\n\t\t\t\t\t<PivotItem headerText=\"Animator\" itemIcon=\"Video\">\r\n\t\t\t\t\t\t{viewport}\r\n\t\t\t\t\t</PivotItem>\r\n\t\t\t\t\t<PivotItem headerText=\"Pattern\" itemIcon=\"Settings\">\r\n\t\t\t\t\t\t{patternSettings}\r\n\t\t\t\t\t</PivotItem>\r\n\t\t\t\t\t<PivotItem headerText=\"Siteswaps\" itemIcon=\"Search\">\r\n\t\t\t\t\t\t{search}\r\n\t\t\t\t\t</PivotItem>\t\t\t\t\t\r\n\t\t\t\t</Pivot>\r\n\t\t\t)\r\n\t\t}\r\n\r\n  \t}\r\n}\r\n\r\nexport default Animator;","import React from 'react';\nimport './App.css';\nimport Animator from './ui/Animator';\nimport { initializeIcons } from '@uifabric/icons';\ninitializeIcons();\n\nconst App: React.FC = () => {\n  \treturn (\n\t\t<Animator></Animator>\t\n  \t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}