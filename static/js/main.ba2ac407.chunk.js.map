{"version":3,"sources":["simulator/Toss.ts","simulator/SiteswapRegex.ts","simulator/Prop.ts","simulator/Siteswap.ts","simulator/TossPath.ts","simulator/Bezier.ts","simulator/JugglerConfig.ts","simulator/Pattern.ts","simulator/DwellPathSnapshot.ts","simulator/DwellPath.ts","search/Edge.ts","search/Search.ts","search/Node.ts","ui/ExamplePatternsList.tsx","ui/PatternSettings.tsx","search/RandomPattern.ts","ui/JugglingScene.ts","ui/Viewport.tsx","ui/Search.tsx","ui/Animator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Hand","BounceType","TossType","CatchType","validToss","validMultiplex","validThrow","validSync","validBeat","validPass","ValidTossRe","RegExp","ValidMultiplexRe","ValidThrowRe","ValidSyncRe","ValidBeatRe","ValidPassRe","ValidSiteswapRe","ValidPassShorthandRe","PropType","defaultTossOrientation","vec3","normalize","Toss","siteswap","juggler","hand","dwellPath","numJugglers","defaultDwellRatio","numSurfaces","Object","classCallCheck","this","Juggler","TargetJuggler","Crossing","NumBeats","Siteswap","NumBounces","BounceOrder","NumSpins","DwellPath","DwellRatio","TossOrientation","RotationAxis","Hold","tossMatches","match","length","charCodeAt","parseInt","isPass","pIx","indexOf","dIx","parseFloat","substring","bounceIdentifierIx","bounceParamsIx","slice","search","undefined","i","isNaN","surfaceIx","push","numMissingBounces","HyperForce","HyperLift","Force","Lift","Any","tIx","Standard","tossTypeId","Claw","Penguin","cIx","catchTypeId","Right","Left","sIx","spinConfig","Math","floor","siteswapInput","_this","Beats","IsSync","IsMultiplex","IsPassingPattern","NumJugglers","toString","replace","test","passingBeats","split","Error","forEach","beat","validPassShorthandMatch","SiteswapRegex","transformPassingShorthand","charAt","transformSymmetricSyncShorthand","siteswapMatch","beats","x","splice","createClass","key","value","newSiteswapStr","jugglerSiteswaps","jugglerBeats","j","pairs","reverse","join","dwellPaths","tossCollection","beatIx","dwellPathIx","singleBeatTossCollection","jugglerToss","jugglerIx","jugglerTosses","handTosses","splitToss","toss","handToss","propToss","Prop","Id","C","Radius","TossSchedule","Beat","GetTossPathPositionAndVelocity","curToss","nextToss","currentTime","totalTime","tossJugglerBodyPosition","tossJugglerBodyRotation","catchJugglerBodyPosition","catchJugglerBodyRotation","startPosition","GetPosition","endPosition","y","z","InterpolateBezierSpline","t","v_0","v_T","v_0scale","v_Tscale","matchVelocity","dwellPosition","C0","copy","add","scale","C1","c","interpolatedPath","c1","p0","p1","c0","c1prev","m0","m1","l0","sqrt","pow","_t","q","dwellPositionIx","BasePatternHeight","Pattern","DwellPaths","Props","TossCollection","States","Simulation","GetTossCollection","sumOfAllTosses","map","patterns","substr","sumThrows","numProps","Ball","maxHeight","propsQueue","curState","k","patternComplete","initComplete","propsLanding","landingLeft","shift","prop","landingRight","tossHand","catchHand","propToToss","propLandingIx","propLanding","concat","JSON","stringify","pop","parse","str","total","numStepsPerBeat","beatDuration","_this2","breakOnCollision","arguments","totalNumBeats","numSteps","hasCollision","patternSimulation","Jugglers","BeatDuration","NumStepsPerBeat","Positions","Rotations","jugglers","bodyPosition","bodyRotation","PI","sin","cos","BodyPositions","Array","fill","BodyRotations","LeftHandPositions","RightHandPositions","LeftElbowPositions","RightElbowPositions","LeftHandDirections","RightHandDirections","step","currentBeat","propIx","prevToss","_prop$GetPreviousCurr","GetPreviousCurrentAndNextTossForBeat","_prop$GetPreviousCurr2","slicedToArray","virtualCurrentTime","prevTossVirtualBeat","nextTossVirtualBeat","curTossVirtualBeat","tossTime","catchTime","prevTossTime","prevCatchTime","prevTossJugglerBodyPosition","prevTossJugglerBodyRotation","prevTossFlightTime","catchVelocity","tossVelocity","pos","Snapshots","handDirection","interpolateHandDirection","pos1","pos2","dist","distance","handNextToss","handLastToss","handNextTossVirtualBeat","scheduledToss","scheduledTossVirtualBeat","handPos","handLastTossVirtualBeat","catchingPropLastToss","tossedPropNextToss","emptyHandPath","Position","scheduledTossIx","tossSchedule","jugglerBodyPosition","jugglerBodyRotation","tossedPropCatchingJugglerBodyPosition","tossedPropCatchingJugglerBodyRotation","catchingPropTossJugglerBodyPosition","catchingPropTossJugglerBodyRotation","totalEmptyHandTime","rot","shoulderPosition","elbowPosition","getElbowPosition","handPosition","armAngle","armHalfLength","Hp","Hpp","th","atan2","magHp","u1","u2","h","Epp","Ep","E","v0","v1","dot","subtract","theta","acos","v2","highestPoint","lowestPoint","p","DefaultBallRotation","vec4","DwellPathSnapshot","input","empty","defaultRotation","Rotation","Empty","xyzMatch","xyz","rotationValues","dwellPathSnapshotRe","heldDwellPathSnapshots","emptyDwellPathSnapshots","startVelocity","endVelocity","startVelocityScale","endVelocityScale","additionalPathSnapshot","splinePath","a","adjustDwellPathSnapshotByHandAndJuggler","positionCopy","GetDwellPaths","ix","arr","GetEdgeValue","source","target","edgeValue","nextUp","LandingSchedule","newNodeLandingSchedule","multiplex","tossValue","tossValueString","String","fromCharCode","last","FindSiteswaps","config","nodes","maxPeriod","includeMultiplex","options","buildNodes","node","reduce","b","nodeOption","nodeOptions","newNode","Edges","propDiff","GetNodes","edges","SourceNode","TargetNode","Value","GetEdges","numSearches","siteswaps","formattedSiteswaps","origNodeIx","history","maxSearches","maxSiteswaps","nextNodeIx","validSiteswap","siteswapStartNode","minPeriod","sync","includeExcited","syncEdgeValue","asyncEdgeValue","exists","ssToMatch","patternsMatch","formattedSiteswap","edgeIx","exclude","newHistory","p2","ExamplePatternsList","_Component","props","possibleConstructorReturn","getPrototypeOf","call","examplePatternListDomElement","onRenderCell","bind","assertThisInitialized","jugglePattern","React","createRef","inherits","patternSettings","s","pattern","dwellRatio","Simulate","updatePattern","item","index","react_default","createElement","id","Link","onClick","name","exampleListDomNode","ReactDOM","findDOMNode","current","style","height","window","innerHeight","offsetTop","overflow","List","items","ref","Component","PatternSettingsControls","state","Yaml","errorMessage","showSyntaxHelp","updatePatternSettingsInput","juggleRandomPattern","juggleInputPattern","juggleExamplePattern","juggle","e","setState","message","round","random","dwellPathXPositions","dwellPathYPositions","dwellPathPositions","findRandomPattern","d","FindRandomPattern","Stack","MessageBar","messageBarType","MessageBarType","info","href","severeWarning","isMultiline","horizontal","PrimaryButton","className","text","DefaultButton","Label","TextField","multiline","onChange","autoAdjustHeight","ExamplePatternsList_ExamplePatternsList","JugglerMeshMaterial","THREE","color","JugglingScene","container","width","animationSpeed","scene","camera","renderer","propMeshes","jugglerMeshes","camRadius","camPhi","camTheta","startTime","isMouseDown","onMouseDownPosition","onMouseDownTheta","onMouseDownPhi","positionToLookAt","currentStep","userControllingStep","isPlaying","antialias","preserveDrawingBuffer","Date","getTime","UpdatePattern","setSize","domElement","addEventListener","event","onDocumentMouseMove","onDocumentMouseDown","onDocumentMouseUp","onDocumentMouseWheel","onDocumentTouchMove","onDocumentTouchStart","onDocumentTouchEnd","append","animate","patternProgress","highestLowest","GetHeighestAndLowestPositionInSimulation","updateCamera","aspect","updateProjectionMatrix","clientX","clientY","touches","newCamPhi","preventDefault","onMove","deltaY","position","lookAt","patternTimeElapsed","meshToRemove","remove","geometry","material","propMesh","mesh","set","addJugglerMeshes","meshes","jugglerPositions","BodyMesh","ShoulderHeight","vec3ToTHREEVector3","HeadMesh","leftShoulderPosition","rightShoulderPosition","leftHandPosition","rightHandPosition","leftElbowPosition","rightElbowPosition","LeftHandMesh","RightHandMesh","LeftElbowMesh","RightElbowMesh","LeftShoulderMesh","RightShoulderMesh","positionAndRotateArm","LeftBicepMesh","LeftForearmMesh","LeftWristMesh","RightBicepMesh","RightForearmMesh","RightWristMesh","rotation","setFromUnitVectors","setRotationFromQuaternion","requestAnimationFrame","render","bicepMesh","forearmMesh","wristMesh","armDirection","subVectors","arrow","clone","setFromVector3","toVector3","newPosition","addVectors","multiplyScalar","side","flatShading","radius","radius1","radius2","cylinder","getHandMesh","getJointMesh","getArmCylinder","ArmHalfLength","Viewport","CanvasContainerRef","jugglingScene","debugInfo","userUpdateStep","play","pause","sliderValue","UpdateStep","offsetWidth","Resize","playbackButton","_this3","debug","IconButton","iconProps","iconName","DOMNodeRef","Slider","min","max","showValue","Search","findSiteswaps","updateInput","juggleSiteswap","siteswapList","document","getElementsByClassName","defaultPatternSettings","Animator","queryString","location","queryStringPatternSettings","lzutf8","inputEncoding","onresize","forceUpdate","patternSettingsQueryString","encodeURIComponent","outputEncoding","pushState","origin","pathname","PatternSettings_PatternSettingsControls","Search_Search","viewport","ui_Viewport","innerWidth","dir","Pivot","PivotItem","headerText","itemIcon","initializeIcons","App","ui_Animator","Boolean","hostname","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba2ac407.chunk.js","sourcesContent":["import { DwellPath } from \"./DwellPath\";\r\nimport { vec3 } from \"@tlaukkan/tsm\";\r\nimport { ValidTossRe } from \"./SiteswapRegex\";\r\n\r\nexport enum Hand {\r\n\tLeft = 0,\r\n\tRight = 1,\r\n\tAny = 2\r\n}\r\n\r\nexport enum BounceType {\r\n    Force,\r\n    HyperForce,\r\n    Lift,\r\n\tHyperLift,\r\n\tAny\r\n}\r\n\r\nexport enum TossType {\r\n    Standard,\r\n    Claw,\r\n    Penguin\r\n}\r\n\r\nexport enum CatchType {\r\n    Standard,\r\n    Claw,\r\n    Penguin\r\n}\r\n\r\nconst defaultTossOrientation = new vec3([.1,.1,1]).normalize();\r\n\r\nexport class Toss {\r\n\t\r\n\tpublic readonly Juggler: number;\r\n\tpublic readonly TargetJuggler: number;\r\n\tpublic readonly Hand: Hand;\r\n\tpublic readonly Crossing: boolean;\r\n\tpublic readonly NumBeats: number;\r\n\tpublic readonly Siteswap: string;\r\n\tpublic readonly NumBounces: number;\r\n\tpublic readonly BounceOrder: number[];\r\n\tpublic readonly BounceType?: BounceType;\r\n\tpublic readonly NumSpins: number;\r\n\tpublic readonly DwellPath : DwellPath;\r\n\tpublic readonly DwellRatio : number;\r\n\tpublic readonly TossType : TossType\r\n\tpublic readonly CatchType : CatchType;\r\n\tpublic readonly TossOrientation : vec3;\r\n\tpublic readonly RotationAxis : vec3;\r\n\tpublic readonly Hold : boolean;\r\n\t\r\n\tconstructor(siteswap : string, juggler : number, hand : Hand, dwellPath : DwellPath, numJugglers : number, defaultDwellRatio : number, numSurfaces: number) {\r\n\t\tthis.Juggler = juggler;\r\n\t\tthis.Hand = hand;\r\n\t\tthis.Siteswap = siteswap;\r\n\t\tthis.DwellPath = dwellPath;\r\n\r\n\t\tvar tossMatches = siteswap.match(ValidTossRe);\r\n\t\tif (!tossMatches || tossMatches.length > 1) {\r\n\t\t\tthrow \"Invalid toss string\"\r\n\t\t} else {\r\n\t\t\t/* will work from \"a\" to \"o\" */\r\n\t\t\tthis.NumBeats = (siteswap[0].charCodeAt(0) >= 97 && siteswap[0].charCodeAt(0) <= 119) ? siteswap[0].charCodeAt(0)-87 : parseInt(siteswap[0]);\r\n\t\t\t\r\n\t\t\t// by default the target juggler is the tossing juggler\r\n\t\t\tthis.TargetJuggler = juggler;\r\n\t\t\tvar isPass = false;\r\n\t\t\tvar pIx = siteswap.indexOf(\"P\");\t\t\t\r\n\t\t\tif (\r\n\t\t\t\tpIx > 0 &&\r\n\t\t\t\tsiteswap[pIx+1] != \"}\" // check that the next character isn't a }, in which case this is a catch/toss penguin modifier\r\n\t\t\t) {\t\t\t\t\r\n\t\t\t\tif (numJugglers > 2) {\t\t\t\t\t\r\n\t\t\t\t\tthis.TargetJuggler = parseInt(siteswap[pIx+1])-1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.TargetJuggler = 1 - juggler;\r\n\t\t\t\t}\r\n\t\t\t\tisPass = true;\r\n\t\t\t}\r\n\r\n\t\t\tvar dIx = siteswap.indexOf(\"D\");\r\n\t\t\tif (dIx > 0) {\r\n\t\t\t\tthis.DwellRatio = parseFloat(siteswap.substring(dIx+2,siteswap.indexOf(\"}\")));\r\n\t\t\t} else {\r\n\t\t\t\tthis.DwellRatio = defaultDwellRatio;\r\n\t\t\t}\r\n\r\n\t\t\tthis.NumBounces = 0;\r\n\t\t\tthis.BounceOrder = [];\r\n\t\t\tvar bounceIdentifierIx = siteswap.indexOf(\"B\");\r\n\t\t\tif (bounceIdentifierIx > 0) {\r\n\t\t\t\tvar bounceParamsIx = siteswap.slice(bounceIdentifierIx).search(/\\d/) + bounceIdentifierIx; // find index of next number indicating # bounces and bounce order\r\n\t\t\t\tif (siteswap[bounceIdentifierIx+1] == \"{\" && bounceParamsIx != undefined) {\r\n\t\t\t\t\tthis.NumBounces = parseInt(siteswap[bounceParamsIx]);\r\n\t\t\t\t\tfor (var i = bounceParamsIx + 1; i < siteswap.length; i++) {\r\n\t\t\t\t\t\tif (!isNaN(siteswap[i] as any)) {\r\n\t\t\t\t\t\t\tvar surfaceIx = parseInt(siteswap[i]);\r\n\t\t\t\t\t\t\tif (surfaceIx >= numSurfaces) {\r\n\t\t\t\t\t\t\t\tthrow \"Bounce surface index out of range\";\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.BounceOrder.push(surfaceIx);\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.NumBounces = 1;\r\n\t\t\t\t\tthis.BounceOrder = [0];\r\n\t\t\t\t}\r\n\t\t\t\tif (this.BounceOrder.length < this.NumBounces) {\r\n\t\t\t\t\tvar numMissingBounces = this.NumBounces - this.BounceOrder.length;\r\n\t\t\t\t\tfor (var i = 0; i < numMissingBounces; i++) {\r\n\t\t\t\t\t\tthis.BounceOrder.push(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (this.NumBounces > 0) {\r\n\t\t\tif (siteswap.match(\"HF\")) {\r\n\t\t\t\tthis.BounceType = BounceType.HyperForce;\r\n\t\t\t} else if (siteswap.match(\"HL\")) {\r\n\t\t\t\tthis.BounceType = BounceType.HyperLift;\r\n\t\t\t} else if (siteswap.match(\"F\")) {\r\n\t\t\t\tthis.BounceType = BounceType.Force;\r\n\t\t\t} else if (siteswap.match(\"L\")) {\r\n\t\t\t\tthis.BounceType = BounceType.Lift;\r\n\t\t\t} else {\r\n\t\t\t\tthis.BounceType = BounceType.Any;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar tIx = siteswap.indexOf(\"T\");\r\n\t\tthis.TossType = TossType.Standard;\r\n\t\tif (tIx > 0) {\r\n\t\t\tvar tossTypeId = siteswap.substring(tIx+2,siteswap.indexOf('}',tIx));\r\n\t\t\tif (tossTypeId.match(\"C\")) {\r\n\t\t\t\tthis.TossType = TossType.Claw;\r\n\t\t\t} else if (tossTypeId.match(\"P\")) {\r\n\t\t\t\tthis.TossType = TossType.Penguin;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar cIx = siteswap.indexOf(\"C\");\r\n\t\tthis.CatchType = CatchType.Standard;\r\n\t\tif (cIx > 0) {\r\n\t\t\tvar catchTypeId = siteswap.substring(cIx+2,siteswap.indexOf('}',cIx));\r\n\t\t\tif (catchTypeId.match(\"C\")) {\r\n\t\t\t\tthis.CatchType = CatchType.Claw;\r\n\t\t\t} else if (catchTypeId.match(\"P\")) {\r\n\t\t\t\tthis.CatchType = CatchType.Penguin;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.Crossing = this.NumBeats % 2 == 1;\r\n\t\t// if the second character is an \"x\" then crossing is flipped\r\n\t\tif (siteswap.length > 1 && siteswap[1] == \"x\") {\r\n\t\t\tthis.Crossing = !this.Crossing;\r\n\t\t}\r\n\r\n\t\t// TODO - can the animator actually support this?\r\n\t\tif (siteswap[0] == \"R\") {\r\n\t\t\tthis.Hand = Hand.Right;\r\n\t\t} else if (siteswap[0] == \"L\") {\r\n\t\t\tthis.Hand = Hand.Left;\r\n\t\t}\r\n\r\n\t\tthis.TossOrientation = defaultTossOrientation;\r\n\t\tvar sIx = siteswap.indexOf(\"S\");\t\t\t\r\n\t\tif (sIx > 0) {\t\t\t\r\n\t\t\tvar spinConfig = siteswap.substring(sIx+2,siteswap.indexOf('}',sIx)).match(/-?\\d+(\\.\\d+)?/g);\r\n\t\t\tif (spinConfig) {\r\n\t\t\t\tthis.NumSpins = parseFloat(spinConfig[0]);\r\n\t\t\t\tif (spinConfig.length > 1) {\r\n\t\t\t\t\tthis.TossOrientation = new vec3([\r\n\t\t\t\t\t\tparseFloat(spinConfig[1]),\r\n\t\t\t\t\t\tparseFloat(spinConfig[2]),\r\n\t\t\t\t\t\tparseFloat(spinConfig[3])\r\n\t\t\t\t\t]).normalize();\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Invalid spin configuration\";\r\n\t\t\t}\t\t\r\n\t\t} else {\t\t\t\t\t\r\n\t\t\tthis.NumSpins = Math.floor(this.NumBeats/2) + .2;\r\n\t\t\t// passes get an extra bit of spin\r\n\t\t\tif (isPass) {\r\n\t\t\t\tthis.NumSpins += .1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.Hold = this.NumBeats == 2 && !this.Crossing && siteswap.indexOf(\"A\") == -1;\r\n\t\tthis.RotationAxis = new vec3([1,0,0]);\r\n\r\n    }    \r\n}","// construct the various regex patterns. see blog post for details about this\r\nvar validToss = \"([\\\\da-o])x?A?(P\\\\d?)?(C{(C|P)?})?(T{(C|P)?})?(B({\\\\d*(L|HL|F|HF)?\\\\d*})?)?(S{-?\\\\d+(.\\\\d+)?(,-?\\\\d+(.\\\\d+)?,-?\\\\d+(.\\\\d+)?,-?\\\\d+(.\\\\d+)?)?})?(D{\\\\d*\\\\.?\\\\d*})?\";\r\nvar validMultiplex = \"\\\\[(\" + validToss + \")+\\\\]\";\r\nvar validThrow = validToss + \"|\" + validMultiplex;\r\nvar validSync = \"\\\\((\" + validThrow + \"),(\" + validThrow + \")\\\\)\";\r\nvar validBeat = \"(\" + validThrow + \"|\" + validSync + \")\";\r\nvar validPass = \"<\" + validBeat + \"(\\\\|\" + validBeat + \")+>\";\r\nvar validSiteswap = \"^(\" + validPass + \")+|(\" + validBeat + \")+\\\\*?$\";\r\n\r\n// use this to identify passing pattern shorthand like <3P333|3P333>\r\n// we will then convert those patterns to standard notation like <3P|3P><3|3><3|3><3|3> \r\n// and parse them as we did before\r\nvar validPassShorthand = \"<\" + validBeat + \"+(\\\\|\" + validBeat + \"+)+>\"; \r\n\r\nexport const ValidTossRe = new RegExp(validToss,\"g\");\r\nexport const ValidMultiplexRe = new RegExp(validMultiplex,\"g\");\r\nexport const ValidThrowRe = new RegExp(validThrow,\"g\");\r\nexport const ValidSyncRe = new RegExp(validSync,\"g\");\r\nexport const ValidBeatRe = new RegExp(validBeat,\"g\");\r\nexport const ValidPassRe = new RegExp(validPass,\"g\");\r\nexport const ValidSiteswapRe = new RegExp(validSiteswap,\"g\");\r\nexport const ValidPassShorthandRe = new RegExp(validPassShorthand,\"g\");","import { Toss, Hand } from \"./Toss\";\r\n\r\nexport enum PropType {\r\n\tBall,\r\n\tClub,\r\n\tRing\r\n}\r\n\r\nexport class Prop {\t\r\n\t\r\n\tTossSchedule : ScheduledToss[]\r\n\r\n\tconstructor(public readonly Id : number, public readonly PropType : PropType, public readonly C : number, public readonly Radius : number) {\r\n\t\tthis.TossSchedule = [];\r\n\t}\r\n\r\n\tpublic GetPreviousCurrentAndNextTossForBeat(beat : number) : [ScheduledToss,ScheduledToss,ScheduledToss] {\r\n\t\tfor (var i = 0; i < this.TossSchedule.length; i++) {\r\n\t\t\tif (i == this.TossSchedule.length-1 || this.TossSchedule[i].Beat <= beat && this.TossSchedule[i+1].Beat > beat) {\r\n\t\t\t\t\r\n\t\t\t\tvar prevToss : ScheduledToss;\r\n\t\t\t\tif (i == 0) {\r\n\t\t\t\t\tprevToss = this.TossSchedule[this.TossSchedule.length-1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprevToss = this.TossSchedule[i-1];\r\n\t\t\t\t}\r\n\t\t\t\tvar curToss : ScheduledToss = this.TossSchedule[i];\r\n\t\t\t\tvar nextToss : ScheduledToss;\r\n\t\t\t\tif (i == this.TossSchedule.length-1) {\r\n\t\t\t\t\tnextToss = this.TossSchedule[0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnextToss = this.TossSchedule[i+1];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [prevToss, curToss, nextToss];\r\n\r\n\t\t\t} \r\n\t\t}\r\n\t\tthrow \"Unable to determine previous, current, and next toss for beat\";\r\n\t} \r\n\r\n}\r\n\r\nexport interface ScheduledToss {\r\n\treadonly Beat : number;\r\n\treadonly Hand : Hand;\r\n\treadonly Toss : Toss;\r\n}","import * as SiteswapRegex from \"./SiteswapRegex\";\r\nimport { DwellPath } from \"./DwellPath\";\r\nimport { Toss, Hand } from \"./Toss\";\r\n\r\nexport class Siteswap {\r\n    \r\n    public readonly Siteswap : string;\r\n\tpublic readonly Beats : string[];\r\n\tpublic readonly IsSync : boolean;\r\n\tpublic readonly IsMultiplex : boolean;\t\r\n\tpublic readonly IsPassingPattern : boolean;\r\n\tpublic readonly NumJugglers : number;\r\n\r\n    constructor(siteswapInput: string) {\r\n        this.Siteswap = siteswapInput.toString().replace(/\\s/g,\"\");\r\n        this.NumJugglers = 1;\r\n        this.IsPassingPattern = /<[^ ]+>/.test(this.Siteswap);\r\n        \r\n        if (this.IsPassingPattern) {\r\n\t\t\tvar passingBeats = this.Siteswap.match(/<[^ <>]+>/g);\r\n\t\t\tif (passingBeats) {\r\n\t\t\t\tthis.NumJugglers = passingBeats[0].split(\"|\").length;\r\n\r\n\t\t\t\t/* \r\n\t\t\t\t\tcheck to make sure each beat in the passing pattern has the same number of jugglers \r\n\t\t\t\t\tif a passing pattern only has 1 juggler than it's automatically a mismatch\r\n\t\t\t\t*/\r\n\t\t\t\tif(this.NumJugglers == 1) {\r\n\t\t\t\t\tthrow new Error(\"Cannot have passing pattern with 1 juggler.\");\r\n\t\t\t\t};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t// ensure all beats have the same number of jugglers\r\n\t\t\t\tpassingBeats.forEach(beat => {\r\n\t\t\t\t\tif (beat.split(\"|\").length != this.NumJugglers) {\r\n\t\t\t\t\t\tthrow new Error(\"Each beat in passing siteswap must contain same number of jugglers\");\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\t// if the input string was shorthand for a passing pattern\r\n\t\t// then replace the siteswap string with a fully formed passing pattern\r\n\t\t// ie. transform <33|33> to <3|3><3|3>\r\n\t\tvar validPassShorthandMatch = this.Siteswap.match(SiteswapRegex.ValidPassShorthandRe);\r\n\t\tif (validPassShorthandMatch != null && validPassShorthandMatch[0] == this.Siteswap) {\r\n\t\t\tthis.Siteswap = this.transformPassingShorthand();\r\n\t\t}\r\n\r\n\t\t// if the input string was a synchronous siteswap ending in *\r\n\t\t// then we repeat the input pattern, but swap the throws in each pair\r\n\t\t// to make the pattern symmetric\r\n\t\t// e.g. transform (6x,4)* to (6x,4)(4,6x)\r\n\t\tif (this.Siteswap.charAt(this.Siteswap.length-1) == \"*\") {\r\n\t\t\tthis.Siteswap = this.transformSymmetricSyncShorthand();\r\n\t\t}\r\n\r\n\t\tvar siteswapMatch = this.Siteswap.match(SiteswapRegex.ValidSiteswapRe);\r\n\t\tif (siteswapMatch !== null && siteswapMatch[0] === this.Siteswap) {\t\t\t\r\n\t\t\tthis.IsMultiplex = this.Siteswap.match(SiteswapRegex.ValidMultiplexRe) ? true : false;\r\n\t\t\tthis.IsSync = this.Siteswap.match(SiteswapRegex.ValidSyncRe) ? true : false;\r\n\t\t} else {\r\n\t\t\tthrow \"Invalid siteswap syntax.\";\r\n\t\t} \r\n\r\n\t\t// break the siteswap into individual beats\r\n\t\tvar beats = this.IsPassingPattern ? this.Siteswap.match(SiteswapRegex.ValidPassRe) : this.Siteswap.match(SiteswapRegex.ValidBeatRe);\r\n\t\tthis.Beats = [];\r\n\t\tif (beats) {\t\t\t\r\n\t\t\tbeats.forEach(x => {this.Beats.push(x)});\r\n\t\t}\r\n\r\n\t\t// add (0,0) after each synchronous throw - this prevents the halving issue\r\n\t\tfor(var i = 0; i < this.Beats.length; i++) {\r\n\t\t\tif (this.Beats[i].match(SiteswapRegex.ValidSyncRe)) {\r\n\t\t\t\tthis.Beats.splice(i+1,0,'(0,0)');\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n    }    \r\n\t\r\n\tprivate transformPassingShorthand() : string {\r\n        var newSiteswapStr = \"\";\r\n\t\tvar jugglerSiteswaps = this.Siteswap.split('|');\r\n\t\tvar jugglerBeats = [];\r\n\t\tfor(var i = 0; i < jugglerSiteswaps.length; i++) {\r\n\t\t\tjugglerBeats.push(jugglerSiteswaps[i].match(SiteswapRegex.ValidBeatRe));\r\n\t\t}\t\t\r\n\t\tfor (var i = 0; i < jugglerBeats[0]!.length; i++) {\r\n\t\t\tnewSiteswapStr += \"<\";\r\n\t\t\tfor (var j = 0; j < jugglerBeats.length; j++) {\r\n\t\t\t\tnewSiteswapStr += jugglerBeats[j]![i];\r\n\t\t\t\tif (j < jugglerBeats.length - 1) {\r\n\t\t\t\t\tnewSiteswapStr += \"|\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnewSiteswapStr += \">\";\r\n\t\t}\r\n\t\treturn newSiteswapStr;\r\n\t}\r\n\t\r\n\tprivate transformSymmetricSyncShorthand() : string {\r\n\t\tvar newSiteswapStr = this.Siteswap.slice(0,-1);\r\n\t\tvar pairs = newSiteswapStr.match(SiteswapRegex.ValidSyncRe);\r\n\t\tif (pairs !== null) {\r\n\t\t\tfor (var i = 0; i < pairs.length; i++) {\r\n\t\t\t\tnewSiteswapStr += \"(\" + pairs[i].match(SiteswapRegex.ValidThrowRe)!.reverse().join(\",\") + \")\";\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn newSiteswapStr\r\n\t}\r\n\r\n\tpublic GetTossCollection(dwellPaths : DwellPath[], defaultDwellRatio : number, numSurfaces : number) : Toss[][] {\r\n\t\tvar tossCollection:Toss[][] = [];\r\n\r\n\t\t// for each beat get the tosses\r\n\t\tvar beatIx = 0;\r\n\t\tvar dwellPathIx = 0;\r\n\t\tdo {\r\n\t\t\r\n\t\t\tvar beat = this.Beats[beatIx];\r\n\t\t\tbeatIx++;\r\n\t\t\tif (beatIx == this.Beats.length) {\r\n\t\t\t\tbeatIx = 0;\r\n\t\t\t}\r\n\r\n\t\t\tvar singleBeatTossCollection:Toss[] = [];\r\n\r\n\t\t\tvar jugglerTosses;\r\n\t\t\tif (beat.match(SiteswapRegex.ValidPassRe)) {\r\n\t\t\t\tjugglerTosses = beat.match(SiteswapRegex.ValidBeatRe);\r\n\t\t\t} else {\r\n\t\t\t\tjugglerTosses = [beat];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tjugglerTosses!.forEach((jugglerToss, jugglerIx, jugglerTosses) => {\r\n\t\t\t\tvar handTosses = [];\r\n\t\t\t\tif (jugglerToss.match(SiteswapRegex.ValidSyncRe)) {\r\n\t\t\t\t\tvar splitToss = jugglerToss.split(\",\");\t\r\n\t\t\t\t\thandTosses.push({hand: Hand.Left, toss: splitToss[0]});\r\n\t\t\t\t\thandTosses.push({hand: Hand.Right, toss: splitToss[1]});\r\n\t\t\t\t} else {\r\n\t\t\t\t\thandTosses.push({hand: Hand.Any, toss: jugglerToss})\r\n\t\t\t\t}\r\n\r\n\t\t\t\thandTosses.forEach(handToss => {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar dwellPath = dwellPaths[dwellPathIx];\r\n\t\t\t\t\tdwellPathIx++;\r\n\t\t\t\t\tif (dwellPathIx == dwellPaths.length) {\r\n\t\t\t\t\t\tdwellPathIx = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar propTosses = handToss.toss.match(SiteswapRegex.ValidTossRe);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpropTosses!.forEach(propToss => {\r\n\t\t\t\t\t\tvar toss = new Toss(\r\n\t\t\t\t\t\t\tpropToss,\r\n\t\t\t\t\t\t\tjugglerIx, \r\n\t\t\t\t\t\t\thandToss.hand,\r\n\t\t\t\t\t\t\tdwellPath,\r\n\t\t\t\t\t\t\tjugglerTosses.length,\r\n\t\t\t\t\t\t\tdefaultDwellRatio,\r\n\t\t\t\t\t\t\tnumSurfaces\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tsingleBeatTossCollection.push(toss);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// don't use up a dwell path on a 0 throw\r\n\t\t\t\t\t\tif (toss.NumBeats == 0) {\r\n\t\t\t\t\t\t\tdwellPathIx--; \r\n\t\t\t\t\t\t\tif (dwellPathIx < 0) {\r\n\t\t\t\t\t\t\t\tdwellPathIx = dwellPaths.length-1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t});\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\ttossCollection.push(singleBeatTossCollection);\r\n\t\t} while (!(beatIx == 0 && dwellPathIx == 0))\r\n\r\n\t\treturn tossCollection;\r\n\r\n\t}\r\n\r\n}","import { ScheduledToss } from \"./Prop\";\r\nimport { vec3 } from \"@tlaukkan/tsm\";\r\n\r\nexport function GetTossPathPositionAndVelocity(\r\n\tcurToss : ScheduledToss, \r\n\tnextToss: ScheduledToss, \r\n\tcurrentTime: number, \r\n\ttotalTime: number,\r\n\ttossJugglerBodyPosition : vec3,\r\n\ttossJugglerBodyRotation : number,\r\n\tcatchJugglerBodyPosition : vec3,\r\n\tcatchJugglerBodyRotation : number\r\n) : [vec3,vec3] {\r\n\t// figure out flight path\r\n\tvar startPosition = curToss.Toss.DwellPath.GetPosition(1, curToss.Hand, new vec3(), new vec3(), 0, 0, null, tossJugglerBodyPosition, tossJugglerBodyRotation);\r\n\tvar endPosition = nextToss.Toss.DwellPath.GetPosition(0, nextToss.Hand, new vec3(), new vec3(), 0, 0, null, catchJugglerBodyPosition, catchJugglerBodyRotation);\r\n\r\n\treturn [\r\n\t\tnew vec3([\r\n\t\t\tstartPosition.x + (endPosition.x-startPosition.x)*currentTime/totalTime,\r\n\t\t\tstartPosition.y + (endPosition.y - startPosition.y + .5*9.8*totalTime*totalTime)*currentTime/totalTime - .5*9.8*currentTime*currentTime,\r\n\t\t\tstartPosition.z + (endPosition.z-startPosition.z)*currentTime/totalTime\r\n\t\t]),\r\n\t\tnew vec3([\r\n\t\t\t(endPosition.x-startPosition.x)/totalTime,\r\n\t\t\t(endPosition.y - startPosition.y +.5*9.8*totalTime*totalTime)/totalTime - 9.8*currentTime,\r\n\t\t\t(endPosition.z-startPosition.z)/totalTime\r\n\t\t])\r\n\t];\r\n\t\r\n}","import { vec3 } from \"@tlaukkan/tsm\";\r\nimport { DwellPath } from \"./DwellPath\";\r\n\r\nexport function InterpolateBezierSpline(\r\n\tdwellPath : vec3[],\r\n\tt : number, // from 0 to 1, how far to interpolate\r\n\tv_0 : vec3,\r\n\tv_T : vec3,\r\n\tv_0scale : number,\r\n\tv_Tscale : number,\r\n\tmatchVelocity : boolean\r\n) : vec3 {\r\n\r\n\tvar dwellPosition : vec3;\r\n\r\n\tif (t == 0) {\r\n\t\tdwellPosition = dwellPath[0];\r\n\t} else if (t == 1) {\r\n\t\tdwellPosition = dwellPath[dwellPath.length-1];\r\n\t} else {\r\n\r\n\t\t/* if P is just one point, duplicate it */\r\n\t\tif (dwellPath.length == 1) {\r\n\t\t\tdwellPath.push(dwellPath[0]);\r\n\t\t}\t\t\t\r\n\r\n\t\tvar C0 = dwellPath[0].copy();\r\n\t\tC0.add(v_0.copy().scale(v_0scale));\t// factor in how much the velocity impacts the path \r\n\t\tC0.add(v_0.copy().normalize().scale(0.1)); // make sure to consider the direction of the velocity regardless of the v_0scale\r\n\r\n\t\tvar C1 = dwellPath[dwellPath.length-1].copy();\r\n\t\tC1.add(v_T.copy().scale(-v_Tscale));\r\n\t\tC1.add(v_T.copy().normalize().scale(-0.1));\r\n\r\n\t\tvar C = [C0,C1];\r\n\t\t\t\r\n\t\tvar eps = .00001;\r\n\r\n\t\tvar c : vec3[] = [];\r\n\t\tvar interpolatedPath = [];\r\n\r\n\t\tfor (var i = 0; i < dwellPath.length-1; i++) {\r\n\t\t\tvar p0 = dwellPath[i];\r\n\t\t\tvar p1 = dwellPath[i+1];\r\n\r\n\t\t\tvar c0 : vec3, c1 : vec3;\r\n\r\n\t\t\tif (i == 0) {\r\n\t\t\t\tc0 = C[0];\r\n\t\t\t} else {\r\n\t\t\t\tvar c1prev = c[c.length-1];\r\n\t\t\t\tvar c0 = new vec3([p0.x + (p0.x - c1prev.x), p0.y + (p0.y - c1prev.y), p0.z + (p0.z - c1prev.z)]);\r\n\t\t\t\tc.push(c0);\r\n\t\t\t}\r\n\r\n\t\t\tif (i+1 == dwellPath.length-1) {\r\n\t\t\t\tc1 = C[1];\r\n\t\t\t} else {\r\n\t\t\t\tvar m0 = new vec3([(dwellPath[i].x+dwellPath[i+1].x)/2, (dwellPath[i].y+dwellPath[i+1].y)/2, (dwellPath[i].z+dwellPath[i+1].z)/2]);\r\n\t\t\t\tvar m1 = new vec3([(dwellPath[i+1].x+dwellPath[i+2].x)/2, (dwellPath[i+1].y+dwellPath[i+2].y)/2, (dwellPath[i+1].z+dwellPath[i+2].z)/2]);\r\n\t\t\t\tvar l0 = Math.sqrt( Math.pow(dwellPath[i].x - dwellPath[i+1].x,2) + Math.pow(dwellPath[i].y - dwellPath[i+1].y,2) + Math.pow(dwellPath[i].z - dwellPath[i+1].z,2) );\r\n\t\t\t\tvar l1 = Math.sqrt( Math.pow(dwellPath[i+1].x - dwellPath[i+2].x,2) + Math.pow(dwellPath[i+1].y - dwellPath[i+2].y,2) + Math.pow(dwellPath[i+1].z - dwellPath[i+2].z,2) );\r\n\t\t\t\tvar _t = l0/(l0+l1);\r\n\t\t\t\tvar q = new vec3([(1-_t)*m0.x + _t*m1.x, (1-_t)*m0.y + _t*m1.y, (1-_t)*m0.z + _t*m1.z]);\r\n\t\t\t\tc1 = new vec3([p1.x + (m0.x-q.x), p1.y + (m0.y-q.y), p1.z + (m0.z-q.z)]);\r\n\t\t\t\tc.push(c1);\r\n\t\t\t}\r\n\r\n\t\t\tfor (var _t = 0; _t <= 1+eps; _t += .02) {\r\n\t\t\t\tinterpolatedPath.push(\r\n\t\t\t\t\tnew vec3([\r\n\t\t\t\t\t\tMath.pow(1-_t,3)*p0.x + 3*Math.pow(1-_t,2)*_t*c0.x + 3*(1-_t)*Math.pow(_t,2)*c1.x + Math.pow(_t,3)*p1.x,\r\n\t\t\t\t\t\tMath.pow(1-_t,3)*p0.y + 3*Math.pow(1-_t,2)*_t*c0.y + 3*(1-_t)*Math.pow(_t,2)*c1.y + Math.pow(_t,3)*p1.y,\r\n\t\t\t\t\t\tMath.pow(1-_t,3)*p0.z + 3*Math.pow(1-_t,2)*_t*c0.z + 3*(1-_t)*Math.pow(_t,2)*c1.z + Math.pow(_t,3)*p1.z\r\n\t\t\t\t\t])\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// TODO - implement velocity matching feature\r\n\t\t\t\t/*\r\n\t\t\t\tif (interpolatedPath.length == 1) {\r\n\t\t\t\t\tinterpolatedPath.last().dist = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinterpolatedPath.last().dist = interpolatedPath[interpolatedPath.length-2].dist + Math.sqrt(Math.pow(interpolatedPath.last().x-interpolatedPath[interpolatedPath.length-2].x,2)+Math.pow(interpolatedPath.last().y-interpolatedPath[interpolatedPath.length-2].y,2)+Math.pow(interpolatedPath.last().z-interpolatedPath[interpolatedPath.length-2].z,2));\r\n\t\t\t\t}\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar dwellPositionIx = Math.floor(t*interpolatedPath.length);\r\n\t\t\r\n\t\tdwellPosition = interpolatedPath[dwellPositionIx < 0 ? 0 : dwellPositionIx];\t\t\r\n\t}\r\n\r\n\treturn dwellPosition;\r\n\r\n}","export const ShoulderZOffset : number = .25;\r\nexport const ShoulderXOffset : number = .225;\r\nexport const ShoulderHeight : number = 1.425;\r\nexport const ArmHalfLength : number = .3;\r\nexport const BasePatternHeight : number = 1.05;\r\nexport const ArmAngle : number = .2;","import { Siteswap as SiteswapClass } from \"./Siteswap\";\r\nimport { DwellPath } from \"./DwellPath\";\r\nimport * as SiteswapRegex from \"./SiteswapRegex\";\r\nimport { Prop, PropType, ScheduledToss } from \"./Prop\";\r\nimport { Toss, Hand, TossType, CatchType } from \"./Toss\";\r\nimport { PatternSimulation } from \"./PatternSimulation\";\r\nimport { vec3 } from \"@tlaukkan/tsm\";\r\nimport { GetTossPathPositionAndVelocity } from \"./TossPath\";\r\nimport { InterpolateBezierSpline } from \"./Bezier\";\r\nimport { ShoulderZOffset, ShoulderHeight, ArmHalfLength, ShoulderXOffset, BasePatternHeight, ArmAngle } from \"./JugglerConfig\";\r\n\r\nexport interface PropLanding {\r\n\tProp : Prop,\r\n\tJuggler : number,\r\n\tHand : Hand\r\n}\r\n\r\nexport class Pattern {\t\r\n\r\n\tpublic readonly Props : Prop[];\r\n\tpublic readonly TossCollection : Toss[][];\r\n\tpublic readonly States : (Prop[]|null)[][][][]; // States[referenceBeat][juggler][hand][beat] contains a Prop[] of the props scheduled to land at beat as of the referenceBeat\r\n\tpublic Simulation : PatternSimulation|undefined;\r\n\r\n\tconstructor(public readonly Siteswap : SiteswapClass, public readonly DwellPaths : DwellPath[], defaultDwellRatio : number, numSurfaces : number) {\r\n\t\t\r\n\t\t// TODO: move GetTossCollection to this class\r\n\t\tthis.TossCollection = Siteswap.GetTossCollection(DwellPaths, defaultDwellRatio, numSurfaces);\r\n\r\n\t\t/* figure out how many props */\r\n\t\tvar sumOfAllTosses = 0;\r\n\t\tvar _this = this;\r\n\t\tSiteswap.Beats.map(function(beat) {\r\n\t\t\tif (beat.match(SiteswapRegex.ValidPassRe)) {\r\n\t\t\t\tvar patterns = beat.split('|');\r\n\t\t\t\tfor (var i = 0; i < patterns.length; i++) {\r\n\t\t\t\t\tif (i == 0) {\r\n\t\t\t\t\t\tpatterns[i] = patterns[i].substr(1);\r\n\t\t\t\t\t} \r\n\t\t\t\t\tif (i == patterns.length-1) {\r\n\t\t\t\t\t\tpatterns[i] = patterns[i].substr(0,patterns[i].length-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsumOfAllTosses += _this.sumThrows(patterns[i]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsumOfAllTosses += _this.sumThrows(beat);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif((sumOfAllTosses/Siteswap.Beats.length % 1) == 0 && sumOfAllTosses/Siteswap.Beats.length > 0) {\r\n\t\t\tvar numProps = sumOfAllTosses/Siteswap.Beats.length;\r\n\t\t} else {\t\t\r\n\t\t\tthrow \"Cannot determine number of props\";\r\n\t\t}\r\n\r\n\t\t// TODO: update this to use prop templates from constructor\r\n\t\tthis.Props = [];\r\n\t\tfor(let i = 0; i < numProps; i++) {\r\n\t\t\tthis.Props.push(new Prop(i,PropType.Ball, 0.5, 0.1));\r\n\t\t}\t\t\r\n\r\n\t\t/* figure out the max throw height which will inform the size of the state array */\r\n\t\tvar maxHeight = 0;\r\n\r\n\t\tthis.TossCollection.forEach(x => {\r\n\t\t\tx.forEach(y => {\r\n\t\t\t\tif (y.NumBeats > maxHeight) {\r\n\t\t\t\t\tmaxHeight = y.NumBeats;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t/* ------------------------------------ */\r\n\t\t/* GENERATE STATE ARRAY AND PROP ORBITS */\r\n\t\t/* ------------------------------------ */\r\n\t\t\r\n\t\t/* create a queue of props */\r\n\t\tvar propsQueue = this.Props.slice(0);\t\t\r\n\t\t\r\n\t\t/* initialize the state and prop orbits array */\r\n\t\tthis.States = [];\r\n\r\n\t\t/* initialize current state */\r\n\t\tvar curState : (Prop[]|null)[][][] = []; // curState[juggler][hand][beat] can be null (ie. no props landing) or Prop[] (ie. list of props landing, more than 1 in case of a multiplex)\r\n\t\tfor (var j = 0; j < Siteswap.NumJugglers; j++) {\r\n\t\t\tcurState.push([[],[]]);\r\n\t\t\tfor (var k = 0; k < maxHeight; k++) {\r\n\t\t\t\tcurState[j][Hand.Left].push(null);\r\n\t\t\t\tcurState[j][Hand.Right].push(null);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar patternComplete = false;\r\n\t\tvar initComplete = false;\r\n\t\tvar beat = 0;\r\n\t\tvar hand = Hand.Left;\r\n\t\t\r\n\t\twhile (!patternComplete) {\r\n\t\t\t\r\n\t\t\t/* queue of props to throw this beat */\r\n\t\t\tvar propsLanding : PropLanding[] = [];\r\n\r\n\t\t\tcurState.forEach((juggler, jugglerIx) => {\r\n\t\t\t\tvar landingLeft = juggler[Hand.Left].shift();\r\n\t\t\t\tjuggler[Hand.Left].push(null);\r\n\t\t\t\tif (landingLeft) {\r\n\t\t\t\t\tlandingLeft.forEach(prop => {\r\n\t\t\t\t\t\tpropsLanding.push({\r\n\t\t\t\t\t\t\tProp: prop,\r\n\t\t\t\t\t\t\tJuggler: jugglerIx,\r\n\t\t\t\t\t\t\tHand: Hand.Left\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar landingRight = juggler[Hand.Right].shift();\r\n\t\t\t\tjuggler[Hand.Right].push(null);\r\n\t\t\t\tif (landingRight) {\r\n\t\t\t\t\tlandingRight.forEach(prop => {\r\n\t\t\t\t\t\tpropsLanding.push({\r\n\t\t\t\t\t\t\tProp: prop,\r\n\t\t\t\t\t\t\tJuggler: jugglerIx,\r\n\t\t\t\t\t\t\tHand: Hand.Right\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t/* iterate through all the tosses and update the current state */\r\n\t\t\tthis.TossCollection[beat % this.TossCollection.length].forEach(toss => {\r\n\t\t\t\t\r\n\t\t\t\tvar tossHand = toss.Hand == Hand.Any ? hand : toss.Hand;\r\n\t\t\t\tvar catchHand = toss.Crossing ? 1 - tossHand : tossHand; \r\n\r\n\t\t\t\tvar propToToss : Prop|undefined = undefined;\r\n\r\n\t\t\t\t// go through props landing and look for one landing in the hand that this toss is occurring\r\n\t\t\t\tfor (var propLandingIx = 0; propLandingIx < propsLanding.length; propLandingIx++) {\r\n\t\t\t\t\tvar propLanding = propsLanding[propLandingIx];\r\n\t\t\t\t\tif(propLanding.Hand == tossHand && propLanding.Juggler == toss.Juggler) {\r\n\t\t\t\t\t\t// if a prop is landing in a hand that is tossing a 0 then invalid pattern\r\n\t\t\t\t\t\tif(toss.NumBeats == 0) {\r\n\t\t\t\t\t\t\tthrow `Prop landing on 0 toss at beat ${beat}`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpropToToss = propLanding.Prop;\r\n\t\t\t\t\t\tpropsLanding.splice(propLandingIx,1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if no props landing to be thrown, get one from the queue - only if this isn't a 0 toss\r\n\t\t\t\tif  (propToToss === undefined && toss.NumBeats > 0) {\r\n\t\t\t\t\tpropToToss = propsQueue.shift();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if prop is still undefined (ie. there are none left) then we've got an invalid siteswap - only if this isn't a 0 toss\r\n\t\t\t\tif  (propToToss === undefined && toss.NumBeats > 0) {\r\n\t\t\t\t\tthrow `No prop available to toss at beat ${beat}`;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// so long as this isn't a 0 toss, update the current state and add to props scheduled tosses\r\n\t\t\t\tif (toss.NumBeats > 0) {\t\t\t\t\r\n\r\n\t\t\t\t\t// only build TossSchedule once init is complete \r\n\t\t\t\t\tif (initComplete) {\r\n\t\r\n\t\t\t\t\t\tpropToToss!.TossSchedule.push({\r\n\t\t\t\t\t\t\tToss: toss,\r\n\t\t\t\t\t\t\tBeat: beat,\r\n\t\t\t\t\t\t\tHand: tossHand\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\tif(curState[toss.TargetJuggler][catchHand][toss.NumBeats-1]) {\r\n\t\t\t\t\t\tcurState[toss.TargetJuggler][catchHand][toss.NumBeats-1]!.push(propToToss as Prop);\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurState[toss.TargetJuggler][catchHand][toss.NumBeats-1] = [propToToss as Prop];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\r\n\t\t\t});\t\r\n\t\t\t\r\n\t\t\t// TODO: address performance/memory concerns with constantly recreating state arrays using this deep clone method\r\n\t\t\tif(initComplete) {\r\n\t\t\t\t// if we're at the beginning of the toss array and we've returned to the original state, the pattern is complete\r\n\t\t\t\tif (beat % this.TossCollection.length == 0 && JSON.stringify(this.States[0], [\"Id\"]) == JSON.stringify(curState, [\"Id\"])) {\r\n\t\t\t\t\tpatternComplete = true;\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t// if the pattern is complete now we need to remove the last set of scheduled tosses\r\n\t\t\t\t\t// this is kind of a hack\t\t\t\t\r\n\t\t\t\t\tthis.Props.forEach(prop => {\r\n\t\t\t\t\t\tvar i = 0;\r\n\t\t\t\t\t\tif (prop.TossSchedule[prop.TossSchedule.length-1].Beat == beat) {\r\n\t\t\t\t\t\t\tprop.TossSchedule.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// add the current state to the state array\r\n\t\t\t\t\tthis.States.push(JSON.parse(JSON.stringify(curState, [\"Id\"])));\r\n\t\t\t\t}\t\r\n\t\t\t} else {\r\n\t\t\t\t// if all props have been introduced to pattern and we're at the end of the pattern, init is complete and steady-state pattern truly begins with the next beat\r\n\t\t\t\tif (propsQueue.length == 0 && (beat+1) % this.TossCollection.length == 0) {\r\n\t\t\t\t\tinitComplete = true;\r\n\t\t\t\t\tbeat = -1;\r\n\t\t\t\t\tthis.States = []; \r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\r\n\t\t\tbeat++;\r\n\t\t\thand = 1 - hand; //alternate hands\r\n\r\n\t\t\t/* fail safe in case the pattern is too long */\r\n\t\t\tif (beat > 1000) {\r\n\t\t\t\tthrow \"Pattern took more than 1000 beats to repeat states\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate sumThrows(str : string) : number {\r\n\t\tvar total = 0;\r\n\t\tfor (var i = 0; i < str.length; i++) {\r\n\t\t\tif(parseInt(str[i])) {\r\n\t\t\t\ttotal += parseInt(str[i]);\t\t\t\t\t\r\n\t\t\t} else if (str.charCodeAt(i) >= 97 && str.charCodeAt(i) <= 119) {\r\n\t\t\t\t// handle \"a\" through \"z\" (where \"a\" = 10)\r\n\t\t\t\ttotal += str.charCodeAt(i)-87;\r\n\t\t\t}\r\n\t\r\n\t\t\t// if the current character is a pass/spin marker\r\n\t\t\t// ignore the next character so we don't count the\r\n\t\t\t// juggler identifier  in something like <5p2|5p3|5p1>\r\n\t\t\tif ((str[i] == \"P\" || str[i] == \"S\") && parseInt(str[i+1]) ){\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\t// if the current character is a bounce marker\r\n\t\t\t// and then next character is a {, move forward until we find a }\r\n\t\t\tif ((str[i] == \"B\" || str[i] == \"D\" || str[i] == \"T\" || str[i] == \"C\" || str[i] == \"S\") && str[i+1] == \"{\") {\r\n\t\t\t\ti = str.indexOf(\"}\",i);\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn total;\r\n\t}\r\n\r\n\tpublic Simulate(numStepsPerBeat : number, beatDuration : number, breakOnCollision : boolean = false) : boolean {\r\n\t\tvar totalNumBeats = this.States.length;\r\n\t\tvar numSteps = totalNumBeats*numStepsPerBeat;\t\t\r\n\t\tvar hasCollision = false;\r\n\t\t\r\n\t\t// initialize pattern simulation\r\n\t\tvar patternSimulation : PatternSimulation = {\r\n\t\t\tProps: [],\r\n\t\t\tJugglers: [],\r\n\t\t\tBeatDuration: beatDuration,\r\n\t\t\tNumStepsPerBeat: numStepsPerBeat,\r\n\t\t};\r\n\r\n\t\tthis.Props.forEach(prop => patternSimulation.Props.push({\r\n\t\t\tPositions: [],\r\n\t\t\tRotations: []\r\n\t\t}));\r\n\r\n\t\tthis.States[0].forEach((juggler, jugglerIx, jugglers) => {\r\n\t\t\r\n\t\t\t// todo - this is still a bit hokey and should be based on inputs\r\n\r\n\t\t\tvar bodyPosition : vec3;\r\n\t\t\tvar bodyRotation : number;\r\n\r\n\t\t\tif (jugglers.length == 1) {\r\n\t\t\t\tbodyPosition = new vec3([0,0,0]);\r\n\t\t\t\tbodyRotation = 0;\r\n\t\t\t} else {\r\n\t\t\t\tvar jugglerCircleRadius = 1;\r\n\r\n\t\t\t\tvar t = jugglerIx/jugglers.length;\r\n\r\n\t\t\t\tbodyRotation = t*Math.PI*2;\r\n\r\n\t\t\t\tbodyPosition = new vec3([\r\n\t\t\t\t\t-jugglerCircleRadius*Math.sin(bodyRotation),\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tjugglerCircleRadius*Math.cos(bodyRotation)\r\n\t\t\t\t]);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpatternSimulation.Jugglers.push({\r\n\t\t\t\tBodyPositions: Array(numSteps).fill(bodyPosition),\r\n\t\t\t\tBodyRotations: Array(numSteps).fill(bodyRotation),\r\n\t\t\t\tLeftHandPositions: [],\r\n\t\t\t\tRightHandPositions: [],\r\n\t\t\t\tLeftElbowPositions: [],\r\n\t\t\t\tRightElbowPositions: [],\r\n\t\t\t\tLeftHandDirections: [],\r\n\t\t\t\tRightHandDirections: []\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tfor(var step = 0; step < numSteps; step++) {\r\n\t\t\tvar currentBeat = Math.floor(step*totalNumBeats/numSteps);\r\n\t\t\tvar currentTime = beatDuration*step*totalNumBeats/numSteps;\r\n\r\n\t\t\t// find position of each prop\r\n\t\t\tthis.Props.forEach((prop, propIx) => {\r\n\t\t\t\tvar prevToss : ScheduledToss;\r\n\t\t\t\tvar curToss : ScheduledToss;\r\n\t\t\t\tvar nextToss : ScheduledToss;\r\n\r\n\t\t\t\t[prevToss, curToss, nextToss] = prop.GetPreviousCurrentAndNextTossForBeat(currentBeat);\r\n\r\n\t\t\t\t// create \"virtual\" beat/time if the previous/next toss results in a loop back through the states\r\n\t\t\t\tvar virtualCurrentTime = currentTime;\r\n\r\n\t\t\t\tvar prevTossVirtualBeat = prevToss.Beat;\r\n\t\t\t\tif (prevTossVirtualBeat >= curToss.Beat) {\r\n\t\t\t\t\tprevTossVirtualBeat -= totalNumBeats;\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar nextTossVirtualBeat = nextToss.Beat;\r\n\t\t\t\tvar curTossVirtualBeat = curToss.Beat;\r\n\t\t\t\tif (nextTossVirtualBeat <= curToss.Beat) {\r\n\t\t\t\t\tprevTossVirtualBeat -= totalNumBeats;\r\n\t\t\t\t\tcurTossVirtualBeat -= totalNumBeats;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tossTime = curTossVirtualBeat*beatDuration + curToss.Toss.DwellRatio*beatDuration;\r\n\t\t\t\tvar catchTime = nextTossVirtualBeat*beatDuration;\r\n\t\t\t\tvar prevTossTime = prevTossVirtualBeat*beatDuration + prevToss.Toss.DwellRatio*beatDuration;\r\n\t\t\t\tvar prevCatchTime = curTossVirtualBeat*beatDuration;\r\n\r\n\t\t\t\tif (virtualCurrentTime >= catchTime) {\r\n\t\t\t\t\tvirtualCurrentTime -= totalNumBeats*beatDuration;\r\n\t\t\t\t}\t\t\t\t\t\t\t\r\n\r\n\t\t\t\tvar prevTossJugglerBodyPosition = patternSimulation.Jugglers[prevToss.Toss.Juggler].BodyPositions[step];\r\n\t\t\t\tvar prevTossJugglerBodyRotation = patternSimulation.Jugglers[prevToss.Toss.Juggler].BodyRotations[step];\r\n\r\n\t\t\t\tvar tossJugglerBodyPosition = patternSimulation.Jugglers[curToss.Toss.Juggler].BodyPositions[step];\r\n\t\t\t\tvar tossJugglerBodyRotation = patternSimulation.Jugglers[curToss.Toss.Juggler].BodyRotations[step];\r\n\r\n\t\t\t\tvar catchJugglerBodyPosition = patternSimulation.Jugglers[nextToss.Toss.Juggler].BodyPositions[step];\r\n\t\t\t\tvar catchJugglerBodyRotation = patternSimulation.Jugglers[nextToss.Toss.Juggler].BodyRotations[step];\r\n\r\n\t\t\t\t// if we're before the toss then we're in the dwell path\r\n\t\t\t\tif (virtualCurrentTime < tossTime || curToss.Toss.Hold) {\r\n\t\t\t\t\t// velocity at time of catch\r\n\t\t\t\t\tvar prevTossFlightTime = prevCatchTime - prevTossTime;\t\t\t\t\r\n\r\n\t\t\t\t\tvar catchVelocity = GetTossPathPositionAndVelocity(prevToss, curToss, prevTossFlightTime, prevTossFlightTime, prevTossJugglerBodyPosition, prevTossJugglerBodyRotation, tossJugglerBodyPosition, tossJugglerBodyRotation)[1];\r\n\r\n\t\t\t\t\t// velocity at the time of throw\r\n\t\t\t\t\tvar tossVelocity = GetTossPathPositionAndVelocity(curToss, nextToss, 0, catchTime-tossTime, tossJugglerBodyPosition, tossJugglerBodyRotation, catchJugglerBodyPosition, catchJugglerBodyRotation)[1];\r\n\r\n\t\t\t\t\tvar t : number;\r\n\t\t\t\t\tif (curToss.Toss.Hold) {\r\n\t\t\t\t\t\tvar t = 1 - (catchTime - virtualCurrentTime) / (catchTime - prevCatchTime);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar t = 1 - (tossTime - virtualCurrentTime) / (tossTime - prevCatchTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar pos = curToss.Toss.DwellPath.GetPosition(t, curToss.Hand, catchVelocity, tossVelocity, 0.01, 0.015, curToss.Toss.Hold ? nextToss.Toss.DwellPath.Snapshots[0] : null, tossJugglerBodyPosition, tossJugglerBodyRotation);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpatternSimulation.Props[propIx].Positions.push(pos);\t\t\t\t\r\n\r\n\t\t\t\t\tvar handDirection = this.interpolateHandDirection(catchVelocity.copy().scale(curToss.Toss.CatchType == CatchType.Claw ? 1 : -1), tossVelocity.copy().scale(curToss.Toss.TossType == TossType.Claw ? -1 : 1), t);\r\n\r\n\t\t\t\t\tif (curToss.Hand === Hand.Left) {\r\n\t\t\t\t\t\tpatternSimulation.Jugglers[curToss.Toss.Juggler].LeftHandPositions[step] = pos;\r\n\t\t\t\t\t\tpatternSimulation.Jugglers[curToss.Toss.Juggler].LeftHandDirections[step] = handDirection;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpatternSimulation.Jugglers[curToss.Toss.Juggler].RightHandPositions[step] = pos;\r\n\t\t\t\t\t\tpatternSimulation.Jugglers[curToss.Toss.Juggler].RightHandDirections[step] = handDirection;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// figure out flight path\r\n\t\t\t\t\tvar T = catchTime - tossTime;\r\n\t\t\t\t\tvar t = virtualCurrentTime - tossTime;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar pos = GetTossPathPositionAndVelocity(curToss, nextToss, t, T, tossJugglerBodyPosition, tossJugglerBodyRotation, catchJugglerBodyPosition, catchJugglerBodyRotation)[0];\r\n\r\n\t\t\t\t\tpatternSimulation.Props[propIx].Positions.push(pos);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t\t// check to see if any of the props are colliding\r\n\t\t\tfor (var i = 0; i < this.Props.length; i++) {\r\n\t\t\t\tfor (var j = i+1; j < this.Props.length; j++) {\r\n\t\t\t\t\tvar pos1 = patternSimulation.Props[i].Positions[step];\r\n\t\t\t\t\tvar pos2 = patternSimulation.Props[j].Positions[step];\r\n\t\t\t\t\tvar dist = vec3.distance(pos1, pos2);\r\n\t\t\t\t\tif (dist < this.Props[i].Radius || dist < this.Props[j].Radius) {\r\n\t\t\t\t\t\tif (breakOnCollision) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\thasCollision = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// find position for hands that are empty and calculate elbow positions\r\n\t\t\tpatternSimulation.Jugglers.forEach((juggler, jugglerIx) => {\r\n\t\t\t\t[Hand.Left, Hand.Right].forEach((hand) => {\r\n\t\t\t\t\t/* need \r\n\t\t\t\t\t\tnextToss - to determine where the hand is going to\r\n\t\t\t\t\t\tpropLastToss - to determine where the prop we're catching came from so we know its catch velocity\r\n\t\t\t\t\t\tlastToss - to determine where the hand is coming from\r\n\t\t\t\t\t\tpropNextToss - to determine where the prop we just tossed is going so we know its toss velocity\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\tif ((hand === Hand.Left && juggler.LeftHandPositions[step] === undefined) || (hand === Hand.Right && juggler.RightHandPositions[step] === undefined)) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar handNextToss : ScheduledToss|undefined;\r\n\t\t\t\t\t\tvar handNextTossVirtualBeat : number = 0;\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.Props.forEach((prop) => {\r\n\t\t\t\t\t\t\tprop.TossSchedule.forEach((scheduledToss) => {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar scheduledTossVirtualBeat = scheduledToss.Beat;\r\n\t\t\t\t\t\t\t\tif (scheduledTossVirtualBeat <= currentBeat) {\r\n\t\t\t\t\t\t\t\t\tscheduledTossVirtualBeat += totalNumBeats;\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (scheduledTossVirtualBeat > currentBeat && scheduledToss.Toss.Juggler == jugglerIx && scheduledToss.Hand == hand) {\r\n\t\t\t\t\t\t\t\t\tif (handNextToss === undefined || scheduledTossVirtualBeat < handNextTossVirtualBeat) {\r\n\t\t\t\t\t\t\t\t\t\thandNextToss = scheduledToss;\r\n\t\t\t\t\t\t\t\t\t\thandNextTossVirtualBeat = scheduledTossVirtualBeat;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvar handLastToss : ScheduledToss|undefined;\t\r\n\t\t\t\t\t\tvar handLastTossVirtualBeat : number = 0;\t\t\t\t\t\r\n\t\t\t\t\t\tthis.Props.forEach((prop) => {\r\n\t\t\t\t\t\t\tprop.TossSchedule.forEach((scheduledToss) => {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar scheduledTossVirtualBeat = scheduledToss.Beat;\r\n\t\t\t\t\t\t\t\tif (scheduledTossVirtualBeat > currentBeat) {\r\n\t\t\t\t\t\t\t\t\tscheduledTossVirtualBeat -= totalNumBeats;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (scheduledTossVirtualBeat <= currentBeat && scheduledToss.Toss.Juggler == jugglerIx && scheduledToss.Hand == hand) {\r\n\t\t\t\t\t\t\t\t\tif (handLastToss === undefined || scheduledTossVirtualBeat > handLastTossVirtualBeat) {\r\n\t\t\t\t\t\t\t\t\t\thandLastToss = scheduledToss;\r\n\t\t\t\t\t\t\t\t\t\thandLastTossVirtualBeat = scheduledTossVirtualBeat;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tvar handPos : vec3;\r\n\t\t\t\t\t\tvar handDirection : vec3;\r\n\t\t\t\t\t\tif (handLastToss === undefined || handNextToss === undefined) {\r\n\t\t\t\t\t\t\t// TODO - don't hardcode this\r\n\t\t\t\t\t\t\thandPos = new vec3([.3*hand == Hand.Left ? -1 : 1, BasePatternHeight, 0]);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\thandDirection = new vec3([0,1,0]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar emptyHandPath : vec3[] = [];\r\n\t\t\t\t\t\t\temptyHandPath.push(handLastToss.Toss.DwellPath.Snapshots[handLastToss.Toss.DwellPath.Snapshots.length-1].Position.copy());\r\n\t\t\t\t\t\t\temptyHandPath.push(handNextToss.Toss.DwellPath.Snapshots[0].Position.copy());\r\n\r\n\t\t\t\t\t\t\tvar catchingPropLastToss : ScheduledToss;\r\n\t\t\t\t\t\t\tvar tossedPropNextToss : ScheduledToss;\r\n\r\n\t\t\t\t\t\t\tthis.Props.forEach((prop) => {\r\n\t\t\t\t\t\t\t\tprop.TossSchedule.forEach((scheduledToss, scheduledTossIx, tossSchedule) => {\r\n\t\t\t\t\t\t\t\t\tif(scheduledToss.Hand === hand && scheduledToss.Beat === handNextToss!.Beat && scheduledToss.Toss.Juggler === jugglerIx) {\r\n\t\t\t\t\t\t\t\t\t\tif (scheduledTossIx == 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tcatchingPropLastToss = tossSchedule[tossSchedule.length-1];\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tcatchingPropLastToss = tossSchedule[scheduledTossIx-1];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthis.Props.forEach((prop) => {\r\n\t\t\t\t\t\t\t\tprop.TossSchedule.forEach((scheduledToss, scheduledTossIx, tossSchedule) => {\r\n\t\t\t\t\t\t\t\t\tif(scheduledToss === handLastToss) {\r\n\t\t\t\t\t\t\t\t\t\tif (scheduledTossIx === (tossSchedule.length-1)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttossedPropNextToss = tossSchedule[0];\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\ttossedPropNextToss = tossSchedule[scheduledTossIx+1];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t// the juggler whose empty hand we're calculting\r\n\t\t\t\t\t\t\tvar jugglerBodyPosition = juggler.BodyPositions[step];\r\n\t\t\t\t\t\t\tvar jugglerBodyRotation = juggler.BodyRotations[step];\r\n\r\n\t\t\t\t\t\t\t// the juggler that we just tossed a prop to\r\n\t\t\t\t\t\t\tvar tossedPropCatchingJugglerBodyPosition = patternSimulation.Jugglers[handLastToss.Toss.TargetJuggler].BodyPositions[step];\r\n\t\t\t\t\t\t\tvar tossedPropCatchingJugglerBodyRotation = patternSimulation.Jugglers[handLastToss.Toss.TargetJuggler].BodyRotations[step]; \r\n\r\n\t\t\t\t\t\t\t// the juggler that tossed the prop we're catching\r\n\t\t\t\t\t\t\tvar catchingPropTossJugglerBodyPosition = patternSimulation.Jugglers[catchingPropLastToss!.Toss.Juggler].BodyPositions[step];\r\n\t\t\t\t\t\t\tvar catchingPropTossJugglerBodyRotation = patternSimulation.Jugglers[catchingPropLastToss!.Toss.Juggler].BodyRotations[step];\r\n\r\n\t\t\t\t\t\t\tvar tossVelocity = GetTossPathPositionAndVelocity(handLastToss, tossedPropNextToss!, 0, handLastToss.Toss.NumBeats*beatDuration, jugglerBodyPosition, jugglerBodyRotation, tossedPropCatchingJugglerBodyPosition, tossedPropCatchingJugglerBodyRotation)[1];\r\n\t\t\t\t\t\t\tvar catchVelocity = GetTossPathPositionAndVelocity(catchingPropLastToss!, handNextToss, catchingPropLastToss!.Toss.NumBeats*beatDuration-catchingPropLastToss!.Toss.DwellRatio*beatDuration,catchingPropLastToss!.Toss.NumBeats*beatDuration-catchingPropLastToss!.Toss.DwellRatio*beatDuration, catchingPropTossJugglerBodyPosition, catchingPropTossJugglerBodyRotation, jugglerBodyPosition, jugglerBodyRotation)[1];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (hand === Hand.Left) {\r\n\t\t\t\t\t\t\t\temptyHandPath.forEach((x) => x.x*=-1);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar virtualCurrentTime = currentTime;\r\n\t\t\t\t\t\t\tif (virtualCurrentTime > handNextTossVirtualBeat*beatDuration) {\r\n\t\t\t\t\t\t\t\tvirtualCurrentTime -= totalNumBeats*beatDuration;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar totalEmptyHandTime = handNextTossVirtualBeat*beatDuration - (handLastTossVirtualBeat*beatDuration + handLastToss.Toss.DwellRatio*beatDuration);\r\n\t\t\t\t\t\t\tvar t = (virtualCurrentTime - (handLastTossVirtualBeat*beatDuration + handLastToss.Toss.DwellRatio*beatDuration))/totalEmptyHandTime;\r\n\r\n\t\t\t\t\t\t\t// todo - this probably doesn't actually work\r\n\t\t\t\t\t\t\t// fail-safe in case virtual times weren't calculated perfectly\r\n\t\t\t\t\t\t\t// solves bug with hands flashing to wrong position for even patterns like 4\r\n\t\t\t\t\t\t\tif (t < 0) {\r\n\t\t\t\t\t\t\t\tt = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (t > 1) {\r\n\t\t\t\t\t\t\t\tt = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tfor (var i = 0; i < emptyHandPath.length; i++) {\r\n\t\t\t\t\t\t\t\tvar copy = emptyHandPath[i].copy();\r\n\t\t\t\t\t\t\t\temptyHandPath[i].x = copy.x*Math.cos(jugglerBodyRotation) - copy.z*Math.sin(jugglerBodyRotation);\r\n\t\t\t\t\t\t\t\temptyHandPath[i].y = copy.y + BasePatternHeight;\r\n\t\t\t\t\t\t\t\temptyHandPath[i].z = copy.x*Math.sin(jugglerBodyRotation) + copy.z*Math.cos(jugglerBodyRotation);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\temptyHandPath[i].add(jugglerBodyPosition);\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\t\thandPos = InterpolateBezierSpline(emptyHandPath,t,tossVelocity,catchVelocity,0.01,0.01,false);\r\n\r\n\t\t\t\t\t\t\tvar handDirection = this.interpolateHandDirection(tossVelocity.copy().scale(handLastToss.Toss.TossType == TossType.Claw ? -1 : 1), catchVelocity.copy().scale(handNextToss.Toss.CatchType == CatchType.Claw ? 1 : -1), t);\r\n\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (hand === Hand.Left) {\r\n\t\t\t\t\t\t\tjuggler.LeftHandPositions[step] = handPos;\r\n\t\t\t\t\t\t\tjuggler.LeftHandDirections[step] = handDirection;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tjuggler.RightHandPositions[step] = handPos;\r\n\t\t\t\t\t\t\tjuggler.RightHandDirections[step] = handDirection;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// now that both hands are accounted for, calculate elbow positions\t\t\t\t\t\r\n\t\t\t\t\tvar rot = juggler.BodyRotations[step];\r\n\t\t\t\t\tvar pos = juggler.BodyPositions[step];\r\n\t\t\t\t\tvar x = (hand === Hand.Left ? - 1 : 1)*ShoulderXOffset;\r\n\t\t\t\t\tvar z = ShoulderZOffset;\r\n\t\t\t\t\tvar shoulderPosition = new vec3([\r\n\t\t\t\t\t\tpos.x + (x*Math.cos(rot) - z*Math.sin(rot)),\r\n\t\t\t\t\t\tShoulderHeight,\r\n\t\t\t\t\t\tpos.z + (x*Math.sin(rot) + z*Math.cos(rot))\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar elbowPosition = this.getElbowPosition(shoulderPosition, hand === Hand.Left ? juggler.LeftHandPositions[step] : juggler.RightHandPositions[step], ArmAngle, hand);\r\n\t\t\t\t\tif (hand === Hand.Left) {\r\n\t\t\t\t\t\tjuggler.LeftElbowPositions[step] = elbowPosition;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tjuggler.RightElbowPositions[step] = elbowPosition;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\tthis.Simulation = patternSimulation;\r\n\r\n\t\treturn hasCollision;\r\n\r\n\t}\r\n\r\n\tprivate getElbowPosition(shoulderPosition : vec3, handPosition : vec3, armAngle : number, hand : Hand) : vec3 {\r\n\t\tvar armHalfLength = ArmHalfLength;\r\n\r\n\t\tarmAngle*=-1;\r\n\r\n\t\tvar Hp = new vec3();\r\n\t\tHp.x = handPosition.x - shoulderPosition.x;\r\n\t\tHp.y = handPosition.y - shoulderPosition.y;\r\n\t\tHp.z = handPosition.z - shoulderPosition.z;\r\n\r\n\t\tvar Hpp = new vec3();\r\n\t\tHpp.x = Math.sqrt(Hp.x*Hp.x + Hp.z*Hp.z);\r\n\t\tHpp.y = Hp.y;\r\n\t\tHpp.z = 0;\r\n\r\n\t\tvar th = Math.atan2(Hp.z,Hp.x);\r\n\r\n\t\tvar magHp = Math.sqrt(Hp.x*Hp.x + Hp.y*Hp.y + Hp.z*Hp.z);\r\n\r\n\t\t/* magically stretch arms */\r\n\t\tif (2*armHalfLength < magHp) {\r\n\t\t\tarmHalfLength = magHp/2;\r\n\t\t}\r\n\r\n\t\tvar u1 = new vec3();\r\n\t\tu1.x = Hpp.y/magHp;\r\n\t\tu1.y = -Hpp.x/magHp;\r\n\t\tu1.z = 0;\r\n\r\n\t\tvar u2 = new vec3([0,0,0]);\r\n\t\tif (hand == 1) {\r\n\t\t\tu2.z = -1;\r\n\t\t} else {\r\n\t\t\tu2.z = 1;\r\n\t\t}\r\n\r\n\t\tvar h = Math.sqrt(armHalfLength*armHalfLength - .25*magHp*magHp);\r\n\r\n\t\tvar Epp = new vec3();\r\n\t\tEpp.x = Hpp.x/2 + h*u1.x*Math.cos(armAngle) + h*u2.x*Math.sin(armAngle);\r\n\t\tEpp.y = Hpp.y/2 + h*u1.y*Math.cos(armAngle) + h*u2.y*Math.sin(armAngle);\r\n\t\tEpp.z = Hpp.z/2 + h*u1.z*Math.cos(armAngle) + h*u2.z*Math.sin(armAngle);\r\n\r\n\t\tvar Ep = new vec3();\r\n\t\tEp.x = Epp.x*Math.cos(th) - Epp.z*Math.sin(th);\r\n\t\tEp.y = Epp.y;\r\n\t\tEp.z = Epp.x*Math.sin(th) + Epp.z*Math.cos(th);\t\r\n\r\n\t\tvar E = new vec3();\r\n\t\tE.x = Ep.x + shoulderPosition.x;\r\n\t\tE.y = Ep.y + shoulderPosition.y;\r\n\t\tE.z = Ep.z + shoulderPosition.z;\r\n\r\n\r\n\t\treturn E;\r\n\t}\r\n\r\n\tprivate interpolateHandDirection(v0: vec3, v1: vec3, t: number) : vec3 {\r\n\t\t// this logic taken from http://number-none.com/product/Understanding%20Slerp,%20Then%20Not%20Using%20It/\r\n\r\n\t\tv0 = v0.copy().normalize();\r\n\t\tv1 = v1.copy().normalize();\r\n\t\tvar dot = vec3.dot(v0, v1);\r\n\r\n\t\tif (dot > .9995) {\r\n\t\t\tv1.subtract(v0).scale(t).add(v0);\r\n\t\t\treturn v1;\r\n\t\t}\r\n\r\n\t\tvar theta = t*Math.acos(dot);\r\n\t\tvar v2 = (v1.copy().subtract(v0.copy().scale(dot))).normalize();\r\n\t\treturn v0.scale(Math.cos(theta)).add(v2.scale(Math.sin(theta)));\r\n\t}\r\n\r\n\tpublic GetHeighestAndLowestPositionInSimulation() : [number, number] {\r\n\t\tvar highestPoint = BasePatternHeight;\r\n\t\tvar lowestPoint = BasePatternHeight;\r\n\t\tif (this.Simulation) {\t\t\t\r\n\t\t\tthis.Simulation.Props.forEach((prop) => {\r\n\t\t\t\tprop.Positions.forEach((p) => {\r\n\t\t\t\t\tif (p.y > highestPoint) {\r\n\t\t\t\t\t\thighestPoint = p.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (p.y < lowestPoint) {\r\n\t\t\t\t\t\tlowestPoint = p.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\t\t\t\r\n\t\t} \r\n\t\treturn [highestPoint, lowestPoint];\r\n\t}\r\n}","import { vec3, vec4 } from \"@tlaukkan/tsm\";\r\n\r\n// TODO: this wasn't ported completely from Siteswap.js\r\nexport const DefaultClubRotation = new vec4([4,0,1,Math.PI/2]);\r\nexport const DefaultRingRotation = new vec4([0,1,0,Math.PI/2]);\r\nexport const DefaultBallRotation = new vec4([0,0,0,0]);\r\n\r\nexport class DwellPathSnapshot {\r\n\t\r\n\tpublic readonly Position : vec3;\r\n\tpublic readonly Rotation : vec4;\r\n\tpublic readonly Empty : boolean;\r\n\r\n\tconstructor(input: string, empty : boolean = false, defaultRotation : vec4 = DefaultBallRotation) {\r\n\t\tthis.Empty = empty;\r\n\r\n\t\tvar xyzMatch = input.match(/\\(-?\\d+(\\.\\d+)?(,-?\\d+(\\.\\d+)?)?(,-?\\d+(\\.\\d+)?)?/g)\r\n\t\tif (!xyzMatch) {\r\n\t\t\tthrow \"Could not find position for dwell path snapshot.\"\r\n\t\t} else {\r\n\t\t\tvar xyz = xyzMatch[0].match(/-?\\d+(\\.\\d+)?/g);\r\n\t\t\tif (xyz) {\r\n\t\t\t\tthis.Position = new vec3([\r\n\t\t\t\t\tparseFloat(xyz[0])/100,\r\n\t\t\t\t\t// y and z default to 0\r\n\t\t\t\t\txyz[1] ? parseFloat(xyz[1])/100 : 0,\r\n\t\t\t\t\txyz[2] ? parseFloat(xyz[2])/100 : 0\r\n\t\t\t\t]);\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Could not find position for dwell path snapshot.\"\r\n\t\t\t}\t\t\t\t\t\t\r\n\t\t}\t\t\t\r\n\t\t\r\n\t\tvar rot = input.match(/\\{-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?\\}/g); \r\n\t\tif (!rot) {\r\n\t\t\tthis.Rotation = defaultRotation;\r\n\t\t} else {\r\n\t\t\tvar rotationValues = rot[0].match(/-?\\d+(\\.\\d+)?/g);\r\n\t\t\tif (rotationValues && rotationValues.length == 4) {\r\n\t\t\t\tthis.Rotation = new vec4([\r\n\t\t\t\t\tparseFloat(rotationValues[0]),\r\n\t\t\t\t\tparseFloat(rotationValues[1]),\r\n\t\t\t\t\tparseFloat(rotationValues[2]),\r\n\t\t\t\t\tparseFloat(rotationValues[3])\r\n\t\t\t\t]);\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Could not find 4 rotation values\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import { DwellPathSnapshot, DefaultBallRotation } from \"./DwellPathSnapshot\";\r\nimport { vec4, vec3 } from \"@tlaukkan/tsm\";\r\nimport { Hand } from \"./Toss\";\r\nimport { InterpolateBezierSpline } from \"./Bezier\";\r\nimport { BasePatternHeight } from \"./JugglerConfig\";\r\n\t\r\nexport class DwellPath {\r\n\r\n\tpublic readonly Snapshots : DwellPathSnapshot[];\r\n\r\n\tconstructor(input : string, defaultRotation : vec4 = DefaultBallRotation) {\r\n\t\tthis.Snapshots = [];\r\n\r\n\t\t// check if there's going to be any empty hand dwell path snapshots\r\n\t\t// if not then terminate the input with an e\r\n\t\tif (input.indexOf(\"e\") == -1) {\r\n\t\t\tinput += \"e\";\r\n\t\t}\r\n\t\tvar dwellPathSnapshotRe = /\\(-?\\d+(\\.\\d+)?(,-?\\d+(\\.\\d+)?)?(,-?\\d+(\\.\\d+)?)?(,\\{-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?\\})?\\)/g;\r\n\t\tvar heldDwellPathSnapshots = input.split(\"e\")[0].match(dwellPathSnapshotRe);\r\n\t\tvar emptyDwellPathSnapshots = input.split(\"e\")[1].match(dwellPathSnapshotRe);\r\n\t\tif (heldDwellPathSnapshots) {\r\n\t\t\theldDwellPathSnapshots.forEach(x => {\r\n\t\t\t\tthis.Snapshots.push(new DwellPathSnapshot(x, false, defaultRotation))\r\n\t\t\t});\r\n\t\t} else {\t\t\r\n\t\t\tthrow new Error(\"Invalid dwell path\");\r\n\t\t}\r\n\t\tif (emptyDwellPathSnapshots) {\r\n\t\t\temptyDwellPathSnapshots.forEach(x => {\r\n\t\t\t\tthis.Snapshots.push(new DwellPathSnapshot(x, true, defaultRotation))\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// todo - this should take an obect as params\r\n\tpublic GetPosition(\r\n\t\tt : number, \r\n\t\thand : Hand,\r\n\t\tstartVelocity : vec3,\r\n\t\tendVelocity : vec3,\r\n\t\tstartVelocityScale : number,\r\n\t\tendVelocityScale : number,\r\n\t\tadditionalPathSnapshot: DwellPathSnapshot | null, // optional dwell path snapshot to append to spline path\r\n\t\tjugglerBodyPosition : vec3,\r\n\t\tjugglerBodyRotation : number\r\n\t) : vec3 {\r\n\r\n\t\tvar splinePath = this.Snapshots.map((a) => { \r\n\t\t\treturn adjustDwellPathSnapshotByHandAndJuggler(a, hand, jugglerBodyPosition, jugglerBodyRotation);\r\n\t\t});\r\n\r\n\t\tif (additionalPathSnapshot) {\r\n\t\t\tsplinePath.push(adjustDwellPathSnapshotByHandAndJuggler(additionalPathSnapshot, hand, jugglerBodyPosition, jugglerBodyRotation));\r\n\t\t}\r\n\r\n\t\tvar pos = new vec3();\r\n\t\tif (t == 0) {\r\n\t\t\tpos = splinePath[0].copy();\r\n\t\t} else if (t == 1) {\r\n\t\t\tpos = splinePath[splinePath.length-1].copy();\t\t\t\r\n\t\t} else {\t\t\t\t\t\t\t\t\t\r\n\t\t\tpos = InterpolateBezierSpline(splinePath,t,startVelocity,endVelocity,startVelocityScale,endVelocityScale,false);\r\n\t\t}\t\t\t\t\r\n\r\n\t\treturn pos;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction adjustDwellPathSnapshotByHandAndJuggler(a: DwellPathSnapshot, hand: Hand, jugglerBodyPosition : vec3, jugglerBodyRotation : number) {\r\n\tvar positionCopy = a.Position.copy();\r\n\tif (hand == Hand.Left) {\r\n\t\tpositionCopy.x *= -1;\r\n\t}\r\n\t\r\n\t// scale y by juggler height\r\n\tpositionCopy.y += BasePatternHeight;\r\n\r\n\tpositionCopy.x = positionCopy.x*Math.cos(jugglerBodyRotation) - positionCopy.z*Math.sin(jugglerBodyRotation);\r\n\tpositionCopy.z = positionCopy.x*Math.sin(jugglerBodyRotation) + positionCopy.z*Math.cos(jugglerBodyRotation);\r\n\r\n\tpositionCopy.add(jugglerBodyPosition);\r\n\r\n\treturn positionCopy;\r\n}\r\n\r\nexport function GetDwellPaths(input : string, defaultRotation : vec4 = DefaultBallRotation) : DwellPath[] {\r\n\tvar dwellPaths = input.split(').').map(function(a,ix,arr) { if (ix < arr.length-1) { return a+')'; } else { return a; } });\r\n\tif (dwellPaths) {\r\n\t\treturn dwellPaths.map(function(a) {\r\n\t\t\treturn new DwellPath(a);\r\n\t\t});\r\n\t} else {\r\n\t\tthrow new Error(\"Could not determine dwell paths\");\r\n\t}\r\n}","import { Node } from \"./Node\";\r\n\r\nexport interface Edge {\r\n\tSourceNode : number;\r\n\tTargetNode : number;\r\n\tValue : string;\r\n}\r\n\r\nexport function GetEdges(nodes : Node[]) : Edge[] {\r\n\tvar edges : Edge[] = [];\r\n\r\n\t// compare all nodes\r\n\tfor (var i = 0; i < nodes.length; i++) {\r\n\t\tfor (var j = 0; j < nodes.length; j++) {\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar edgeValue = GetEdgeValue(nodes[i], nodes[j]);\r\n\t\t\tif (edgeValue) {\r\n\t\t\t\tnodes[i].Edges.push(edges.push({SourceNode: i, TargetNode: j, Value: edgeValue})-1);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\treturn edges;\r\n}\r\n\r\n\r\nexport function GetEdgeValue(source : Node, target : Node) : string|null {\r\n\r\n\tvar edgeValue = \"\";\r\n\r\n\tvar nextUp = source.LandingSchedule[0];\r\n\tvar newNodeLandingSchedule = source.LandingSchedule.slice(1,target.LandingSchedule.length);\r\n\tnewNodeLandingSchedule.push(0);\r\n\r\n\r\n\tvar multiplex = false;\r\n\tif (nextUp == 0) {\r\n\t\tedgeValue = \"0\";\r\n\t} else if (nextUp > 1) {\r\n\t\tmultiplex = true;\r\n\t\tedgeValue = \"[\";\r\n\t}\r\n\tfor (var i = 0; i < newNodeLandingSchedule.length; i++) {\r\n\t\tvar tossValue = i+1;\r\n\t\tvar tossValueString = tossValue.toString();\r\n\t\tif (tossValue > 9) {\r\n\t\t\ttossValueString = String.fromCharCode(87+tossValue);\r\n\t\t}\r\n\t\tif(newNodeLandingSchedule[i] != target.LandingSchedule[i]) {\r\n\t\t\tif (nextUp >= (target.LandingSchedule[i] - newNodeLandingSchedule[i])) {\r\n\t\t\t\tedgeValue += tossValueString;\r\n\t\t\t\tnextUp--;\r\n\t\t\t\tif (nextUp == 1 && (target.LandingSchedule[i] - newNodeLandingSchedule[i]) == 2) {\r\n\t\t\t\t\tedgeValue += tossValueString;\r\n\t\t\t\t\tnextUp--;\r\n\t\t\t\t}\t\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (multiplex) {\r\n\t\tedgeValue += ']';\r\n\t}\t\r\n\r\n\treturn edgeValue;\r\n\r\n}","import { Node, GetNodes } from \"./Node\";\r\nimport { Edge, GetEdges } from \"./Edge\";\r\n\r\nexport interface FindSiteswapsConfig {\r\n\tminPeriod: number;\r\n\tmaxPeriod: number;\r\n\tnumProps: number;\r\n\tincludeMultiplex: boolean;\r\n\tincludeExcited: boolean;\r\n\tmaxSearches: number;\r\n\tmaxSiteswaps: number;\r\n\tsync: boolean;\r\n\texclude: string[];\r\n}\r\n\r\nfunction last<T>(arr : T[]) : T {\r\n\treturn arr[arr.length-1];\r\n}\r\n\r\n\r\nexport function FindSiteswaps(config : FindSiteswapsConfig) : string[] {\r\n\r\n\tvar nodes = GetNodes(config.maxPeriod, config.numProps, config.includeMultiplex);\r\n\tvar edges = GetEdges(nodes);\r\n\r\n\tvar numSearches = 0;\r\n\tvar siteswaps : number[][] = [];\r\n\tvar formattedSiteswaps : string[] = [];\r\n\r\n\tsearch(0, []);\t\r\n\r\n\treturn formattedSiteswaps;\r\n\r\n\tfunction search(origNodeIx : number, history : number[]) {\r\n\r\n\t\tnumSearches++;\t\r\n\t\tif (numSearches <= config.maxSearches && siteswaps.length < config.maxSiteswaps) {\r\n\r\n\t\t\tvar nextNodeIx = origNodeIx;\r\n\t\t\tvar validSiteswap = false;\r\n\t\t\tvar siteswapStartNode = undefined;\r\n\r\n\t\t\tif (history.length > 0 && history.length <= config.maxPeriod) {\r\n\t\t\t\t\r\n\t\t\t\t// check if valid siteswap, ie. the last edge returns us to a node in the history\r\n\t\t\t\tif (history.length >= config.minPeriod && (!config.sync || history.length % 2 == 0)) {\r\n\t\t\t\t\tif (edges[last(history)].TargetNode == origNodeIx) {\r\n\t\t\t\t\t\tvalidSiteswap = true;\r\n\t\t\t\t\t\tsiteswapStartNode = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// excited siteswaps would return us to any node within the search (assuming the first node is the ground node)\r\n\t\t\t\t\t\tif (config.includeExcited) {\r\n\t\t\t\t\t\t\tfor (var i = 0; i < history.length; i++) {\r\n\t\t\t\t\t\t\t\tif (edges[last(history)].TargetNode == edges[history[i]].SourceNode && (!config.sync || i % 2 == 0)) {\r\n\t\t\t\t\t\t\t\t\tvalidSiteswap = true;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tsiteswapStartNode = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if the siteswap is valid check to see if it already exists, and if not, then add it to the list\r\n\t\t\t\tif (validSiteswap) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar siteswap = history.map(function (a,ix) {\r\n\t\t\t\t\t\tif (!config.sync) {\r\n\t\t\t\t\t\t\treturn edges[a].Value; \r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar syncEdgeValue = \"\";\r\n\t\t\t\t\t\t\tvar asyncEdgeValue = edges[a].Value;\r\n\t\t\t\t\t\t\tfor (var i = 0; i < asyncEdgeValue.length; i++) {\r\n\t\t\t\t\t\t\t\tif (asyncEdgeValue[i] == \"[\" || asyncEdgeValue[i] == \"]\" || parseInt(asyncEdgeValue[i]) % 2 == 0 ) {\r\n\t\t\t\t\t\t\t\t\tsyncEdgeValue += asyncEdgeValue[i];\r\n\t\t\t\t\t\t\t\t} else if (ix % 2 == 0) {\r\n\t\t\t\t\t\t\t\t\tsyncEdgeValue += ((parseInt(asyncEdgeValue[i])-1)+\"x\");\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tsyncEdgeValue += ((parseInt(asyncEdgeValue[i])+1)+\"x\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn syncEdgeValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).slice(siteswapStartNode);\r\n\r\n\t\t\t\t\tvar exists = false;\r\n\t\t\t\t\tfor (var i = 0; i < siteswaps.length; i++) {\r\n\t\t\t\t\t\tvar ssToMatch = siteswaps[i].map(function (a,ix) {\r\n\t\t\t\t\t\t\tif (!config.sync) {\r\n\t\t\t\t\t\t\t\treturn edges[a].Value; \r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar syncEdgeValue = \"\";\r\n\t\t\t\t\t\t\t\tvar asyncEdgeValue = edges[a].Value;\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < asyncEdgeValue.length; i++) {\r\n\t\t\t\t\t\t\t\t\tif (asyncEdgeValue[i] == \"[\" || asyncEdgeValue[i] == \"]\" || parseInt(asyncEdgeValue[i]) % 2 == 0 ) {\r\n\t\t\t\t\t\t\t\t\t\tsyncEdgeValue += asyncEdgeValue[i];\r\n\t\t\t\t\t\t\t\t\t} else if (ix % 2 == 0) {\r\n\t\t\t\t\t\t\t\t\t\tsyncEdgeValue += ((parseInt(asyncEdgeValue[i])-1)+\"x\");\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tsyncEdgeValue += ((parseInt(asyncEdgeValue[i])+1)+\"x\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn syncEdgeValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (patternsMatch(ssToMatch,siteswap.slice())) {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\texists = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!exists) {\r\n\t\t\t\t\t\t// the siteswaps array will actually store the edge history which can be converted into a siteswap string\r\n\t\t\t\t\t\tvar siteswapIx = siteswaps.push(history.slice(siteswapStartNode))-1;\r\n\t\t\t\t\t\tfor (var i = 0; i < siteswap.length; i++) {\r\n\t\t\t\t\t\t\tif (parseInt(siteswap[i]) > 9) {\r\n\t\t\t\t\t\t\t\tsiteswap[i] = String.fromCharCode(87+parseInt(siteswap[i]));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar formattedSiteswap = \"\";\r\n\t\t\t\t\t\tif (config.sync) {\r\n\t\t\t\t\t\t\tfor (var i = 0; i < siteswap.length; i++) {\r\n\t\t\t\t\t\t\t\tif (i % 2 == 0) {\r\n\t\t\t\t\t\t\t\t\tformattedSiteswap += (\"(\" + siteswap[i] + \",\");\r\n\t\t\t\t\t\t\t\t} else { \r\n\t\t\t\t\t\t\t\t\tformattedSiteswap += (siteswap[i] + \")\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tformattedSiteswap = siteswap.join('');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tformattedSiteswaps.push(formattedSiteswap);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalidSiteswap = true;\r\n\t\t\t\t}\r\n\t\t\t\tnextNodeIx = edges[last(history)].TargetNode;\r\n\t\t\t}\r\n\r\n\t\t\t// if the siteswap was invalid or it was valid but was excited, and we're still below the maxperiod for a siteswap, keep searching\r\n\t\t\tif ((!validSiteswap || siteswapStartNode! > 0) && history.length < config.maxPeriod) {\r\n\r\n\t\t\t\t// search each edge of this next node\r\n\t\t\t\tnodes[nextNodeIx].Edges.map(function(edgeIx) {\r\n\r\n\t\t\t\t\t// was previously checking if we already visited the next node, but not doing that anymore since we're checking for excited swaps\r\n\t\t\t\t\tvar alreadyVisited = false;\r\n\r\n\t\t\t\t\t// check if searching this edge is going to match the exclusion pattern\r\n\t\t\t\t\t// TODO: need to fix this to search better\r\n\t\t\t\t\tvar exclude = false;\r\n\t\t\t\t\tfor (var j = 0; j < config.exclude.length; j++) {\r\n\t\t\t\t\t\tif (config.exclude[j] == edges[edgeIx].Value) {\r\n\t\t\t\t\t\t\texclude = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if this is an odd numbered edge in the history and we're doing sync, this can't be a 1\r\n\t\t\t\t\tif (config.sync && history.length % 2 == 0 && edges[edgeIx].Value.indexOf(\"1\") > -1) {\r\n\t\t\t\t\t\texclude = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// execute the search through the edge\r\n\t\t\t\t\tif (!alreadyVisited && !exclude) {\r\n\t\t\t\t\t\tvar newHistory = history.slice();\r\n\t\t\t\t\t\tnewHistory.push(edgeIx);\r\n\t\t\t\t\t\tsearch(origNodeIx,newHistory);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\t\t}\t\t\t\t\r\n\r\n\t}\r\n\r\n\t// compare 2 siteswap patterns to check for equality\r\n\tfunction patternsMatch(p1 : string[], p2 : string[]) {\r\n\r\n\t\tif (p1.length != p2.length) {\r\n\t\t\treturn false;\r\n\t\t} else {\t\t\t\r\n\t\t\tfor (var i = 0; i <= p1.length; i++) {\r\n\t\t\t\tif (p1.toString() == p2.toString()) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tp1.push(p1[0]);\r\n\t\t\t\tp1 = p1.slice(1);\t\r\n\t\t\t\tif (config.sync) {\r\n\t\t\t\t\tp1.push(p1[0]);\r\n\t\t\t\t\tp1 = p1.slice(1);\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}","/*\r\nInterfaces\r\n\r\nSiteswapSearch\r\n - Graph : SiteswapGraph\r\n  - Nodes : Node[]\r\n   - LandingSchedule : int[]\r\n   - Edges : int[]\r\n  - Edges : Edge[]\r\n   - SourceNode : int\r\n   - TargetNode : int\r\n   - Value: string\r\n - Siteswaps : Edge[][]\r\n - FormattedSiteswaps : string[]\r\n\r\nSiteswapSearchConfig\r\n - MinPeriod : int\r\n - Async : boolean\r\n - Callbacks : SiteswapSearchCallbacks // add callbacks later\r\n - Exclude : string[]\r\n - IncludeExcited : boolean\r\n - MaxSearches : int\r\n - MaxSiteswaps : int\r\n - Sync : boolean\r\n\r\n\r\n\r\nexports function SiteswapSearch(config) : SiteswapSearch\r\n\r\n - buildNodes\r\n - buildEdges\r\n - search\r\n*/\r\n\r\nexport interface Node {\r\n\tLandingSchedule: number[];\t\r\n\tEdges: number[]\r\n}\r\n\r\nexport function GetNodes(maxPeriod : number, numProps : number, includeMultiplex : boolean) : Node[] {\r\n\t\r\n\tvar nodes : Node[] = [];\r\n\r\n\tvar firstNode = {LandingSchedule:[], Edges:[]};\r\n\tvar options = [1,0];\r\n\tif (includeMultiplex) {\r\n\t\toptions.push(2);\r\n\t}\r\n\r\n\tbuildNodes(firstNode, options, false);\r\n\r\n\treturn nodes;\r\n\r\n\tfunction buildNodes(node : Node, options : number[], last : boolean) {\r\n\t\t// if the node we're constructing has reached the expected length\r\n\t\tif (node.LandingSchedule.length == maxPeriod) {\r\n\t\t\tif (node.LandingSchedule.reduce(function(a,b) { return a+b; }) == numProps) {\r\n\t\t\t\tnodes.push(node);\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\t// if we've created all the nodes kick off the function to build the edges\r\n\t\t\tif (last) {\r\n\t\t\t\t//buildEdges();\r\n\t\t\t}\r\n\t\t\r\n\t\t} \r\n\t\t// if the node is not the expected length then we need to keep building\r\n\t\telse {\r\n\r\n\t\t\toptions.map(function(nodeOption,ix,nodeOptions) {\t\t\r\n\r\n\t\t\t\tvar newNode = {\r\n\t\t\t\t\tLandingSchedule : node.LandingSchedule.slice(),\r\n\t\t\t\t\tEdges: []\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tnewNode.LandingSchedule.push(nodeOption);\r\n\r\n\t\t\t\tvar propDiff = newNode.LandingSchedule.reduce(function(a,b) { return a+b; }) - numProps;\r\n\t\t\t\tvar newNodeOptions = [];\r\n\t\t\t\t\r\n\t\t\t\t// always have 1 first so the first node is the ground node\r\n\t\t\t\tif (propDiff == 0) {\r\n\t\t\t\t\tnewNodeOptions = [0];\r\n\t\t\t\t} else if (propDiff == 1) {\r\n\t\t\t\t\tnewNodeOptions = [1,0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (includeMultiplex) {\r\n\t\t\t\t\t\tnewNodeOptions = [1,2,0];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewNodeOptions = [1,0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if (config.async) {\r\n\t\t\t\t// \tsetTimeout(buildNodes,0,newNode,newNodeOptions,last);\r\n\t\t\t\t// } else {\r\n\t\t\t\t\tbuildNodes(newNode,newNodeOptions,last && (ix == nodeOptions.length-1));\r\n\t\t\t\t//}\r\n\t\t\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n}","import React, { Component, ReactNode } from 'react';\r\nimport { List, Link } from 'office-ui-fabric-react';\r\nimport { Siteswap } from '../simulator/Siteswap';\r\nimport { Pattern } from '../simulator/Pattern';\r\nimport { GetDwellPaths } from '../simulator/DwellPath';\r\nimport { PatternSettings } from './PatternSettings';\r\nimport ReactDOM from 'react-dom';\r\n\r\ninterface Props {\r\n\tupdatePattern : Function\r\n}\r\n\r\ninterface ExamplePattern {\r\n\tname: string,\r\n\tpatternSettings: PatternSettings\r\n}\r\n\r\nexport class ExamplePatternsList extends Component<Props,any> {\r\n\texamplePatternListDomElement: any;\r\n\r\n\tconstructor(props : any) {\r\n\t\tsuper(props);\t\t\r\n\r\n\t\tthis.onRenderCell = this.onRenderCell.bind(this);\r\n\t\tthis.jugglePattern = this.jugglePattern.bind(this);\r\n\r\n\t\tthis.examplePatternListDomElement = React.createRef();\r\n\r\n\t}\r\n\r\n\tprivate jugglePattern(patternSettings : PatternSettings) {\r\n\t\tvar s = new Siteswap(patternSettings.siteswap);\r\n\t\tvar pattern = new Pattern(s, GetDwellPaths(patternSettings.dwellPath), patternSettings.dwellRatio, 1);\r\n\t\tpattern.Simulate(100,patternSettings.beatDuration);\t\t\r\n\r\n\t\tthis.props.updatePattern(pattern, patternSettings);\r\n\t}\r\n\r\n\tprivate onRenderCell(item?: ExamplePattern, index?: number | undefined): ReactNode {\r\n\t\treturn (\r\n\t\t\t<div id={index!.toString()}>\r\n\t\t\t\t<Link onClick={() => {this.jugglePattern((item as ExamplePattern).patternSettings)}}>{(item as ExamplePattern).name}</Link>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tvar exampleListDomNode = ReactDOM.findDOMNode(this.examplePatternListDomElement.current);\r\n\t\tif (exampleListDomNode) {\r\n\t\t\t(exampleListDomNode as any).style.height = (window.innerHeight - (exampleListDomNode as any).offsetTop - 40).toString()+\"px\";\r\n\t\t\t(exampleListDomNode as any).style.overflow = \"auto\";\r\n\t\t}\t\t\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tvar examplePatterns = [\r\n\t\t\t{\r\n\t\t\t\tname: \"Cascade\",\r\n\t\t\t\tpatternSettings: {\r\n\t\t\t\t\tsiteswap: \"3\",\r\n\t\t\t\t\tdwellPath: \"(30)(10)\",\r\n\t\t\t\t\tbeatDuration: 0.24,\r\n\t\t\t\t\tdwellRatio: 0.8\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Reverse Cascade\",\r\n\t\t\t\tpatternSettings: {\r\n\t\t\t\t\tsiteswap: \"3\",\r\n\t\t\t\t\tdwellPath: \"(10)(30)\",\r\n\t\t\t\t\tbeatDuration: 0.24,\r\n\t\t\t\t\tdwellRatio: 0.8\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Columns\",\r\n\t\t\t\tpatternSettings: {\r\n\t\t\t\t\tsiteswap: \"(4,4)(4,0)\",\r\n\t\t\t\t\tdwellPath: \"(20).(20).(0)\",\r\n\t\t\t\t\tbeatDuration: 0.24,\r\n\t\t\t\t\tdwellRatio: 0.8\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Yo-Yo\",\r\n\t\t\t\tpatternSettings: {\r\n\t\t\t\t\tsiteswap: \"(4,2)\",\r\n\t\t\t\t\tdwellPath: \"(20).(0,60).(0).(0,25)\",\r\n\t\t\t\t\tbeatDuration: 0.2,\r\n\t\t\t\t\tdwellRatio: 1.1\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Tennis\",\r\n\t\t\t\tpatternSettings: {\r\n\t\t\t\t\tsiteswap: \"3\",\r\n\t\t\t\t\tdwellPath: \"(35,15).(20)(7).(20)(7)\",\r\n\t\t\t\t\tbeatDuration: 0.24,\r\n\t\t\t\t\tdwellRatio: 0.9\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"423\",\r\n\t\t\t\tpatternSettings: {\r\n\t\t\t\t\tsiteswap: \"423\",\r\n\t\t\t\t\tdwellPath: \"(30).(30).(30)(10)\",\r\n\t\t\t\t\tbeatDuration: 0.24,\r\n\t\t\t\t\tdwellRatio: 0.8\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Factory\",\r\n\t\t\t\tpatternSettings: {\r\n\t\t\t\t\tsiteswap: \"(2,4)(2,4x)(2x,4)\",\r\n\t\t\t\t\tdwellPath: \"(20).(20).(30,40).(0).(-20,40).(30)(0)\",\r\n\t\t\t\t\tbeatDuration: 0.24,\r\n\t\t\t\t\tdwellRatio: 1.2\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Mill's Mess\",\r\n\t\t\t\tpatternSettings: {\r\n\t\t\t\t\tsiteswap: \"3\",\r\n\t\t\t\t\tdwellPath: \"(0,10)(-20,10).(0)(20).(0,0)(-20,0)\",\r\n\t\t\t\t\tbeatDuration: 0.24,\r\n\t\t\t\t\tdwellRatio: 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<List items={examplePatterns} onRenderCell={this.onRenderCell} ref={this.examplePatternListDomElement}></List>\r\n\t\t)\r\n\t}\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Siteswap } from '../simulator/Siteswap';\r\nimport { Pattern } from '../simulator/Pattern';\r\nimport { GetDwellPaths, DwellPath } from '../simulator/DwellPath';\r\nimport { PrimaryButton, Stack, TextField, MessageBar, MessageBarType, Modal, Label, Link, DefaultButton, Slider } from 'office-ui-fabric-react';\r\nimport 'office-ui-fabric-react/dist/css/fabric.css';\r\nimport * as Yaml from 'js-yaml';\r\nimport { FindRandomPattern } from '../search/RandomPattern';\r\nimport { ExamplePatternsList } from './ExamplePatternsList';\r\n\r\ninterface Props {\r\n\tupdatePattern: Function,\r\n\tpatternSettings: PatternSettings\r\n}\r\n\r\nexport interface PatternSettings {\t\r\n\tsiteswap: string,\r\n\tbeatDuration: number,\r\n\tdwellPath: string,\r\n\tdwellRatio: number\r\n}\r\n\r\ninterface State {\r\n\tinput: string,\r\n\terrorMessage: string|null,\r\n\tshowSyntaxHelp: boolean\r\n}\r\n\r\nexport class PatternSettingsControls extends Component<Props,State> {\r\n\r\n\tconstructor(props : Props) {\r\n\t\tsuper(props);\t\t\r\n\r\n\t\tthis.state = {\r\n\t\t\tinput: Yaml.safeDump(this.props.patternSettings).replace(/'/g,\"\"),\r\n\t\t\terrorMessage: null,\r\n\t\t\tshowSyntaxHelp: false\r\n\t\t};\r\n\t\r\n\t\t// This binding is necessary to make `this` work in the callback\t\t\r\n\t\tthis.updatePatternSettingsInput = this.updatePatternSettingsInput.bind(this);\r\n\t\tthis.juggleRandomPattern = this.juggleRandomPattern.bind(this);\r\n\t\tthis.juggleInputPattern = this.juggleInputPattern.bind(this);\r\n\t\tthis.juggleExamplePattern = this.juggleExamplePattern.bind(this);\r\n\t\tthis.juggle = this.juggle.bind(this);\r\n\t}\r\n\r\n\tprivate updatePatternSettingsInput(e : any) {\r\n\t\tthis.setState({\r\n\t\t\tinput: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tprivate juggle(patternSettings : PatternSettings) {\r\n\t\ttry {\r\n\t\t\tvar siteswap = new Siteswap(patternSettings.siteswap.toString());\r\n\t\t\tvar pattern = new Pattern(siteswap, GetDwellPaths(patternSettings.dwellPath), patternSettings.dwellRatio, 1);\r\n\t\t\tpattern.Simulate(100,patternSettings.beatDuration);\r\n\t\t\t// lift pattern w/ simulation up to parent\r\n\t\t\tthis.props.updatePattern(pattern, patternSettings);\t\t\t\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorMessage: null\r\n\t\t\t});\r\n\t\t} catch(e) {\r\n\t\t\tvar errorMessage : string;\r\n\t\t\tif (e.message) {\r\n\t\t\t\terrorMessage = e.message;\r\n\t\t\t} else {\r\n\t\t\t\t// fallback in case any exceptions were thrown as strings\r\n\t\t\t\terrorMessage = e;\r\n\t\t\t}\r\n\t\t\tthis.setState({errorMessage: errorMessage});\t\r\n\t\t}\r\n\t}\r\n\r\n\tprivate juggleRandomPattern() {\r\n\t\tvar patternSettings = FindRandomPattern();\r\n\t\tthis.setState({input: Yaml.safeDump(patternSettings).replace(/'/g,\"\")});\r\n\t\tthis.juggle(patternSettings);\r\n\t}\r\n\r\n\tprivate juggleInputPattern() {\r\n\t\tvar patternSettings : PatternSettings | undefined;\t\t\r\n\t\ttry {\r\n\t\t\tpatternSettings = Yaml.safeLoad(this.state.input);\r\n\t\t} catch (e) {\r\n\t\t\tthis.setState({errorMessage: \"Invalid pattern settings.\"});\r\n\t\t}\r\n\t\tif (patternSettings) {\r\n\t\t\tthis.juggle(patternSettings);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tprivate juggleExamplePattern(pattern : Pattern, patternSettings: PatternSettings) {\r\n\t\tthis.setState({input: Yaml.safeDump(patternSettings).replace(/'/g,\"\")});\r\n\t\tthis.props.updatePattern(pattern, patternSettings);\r\n\t}\r\n\r\n\trender() {\t\t\r\n\t\treturn (\r\n\t\t\t<Stack>\t\t\t\t\r\n\t\t\t\t<MessageBar messageBarType={MessageBarType.info}>\r\n\t\t\t\t\tDue to some hosting issues the old version of Gunswap is no longer available. This version is not frequently updated, but you can follow progress on GitHub at <Link href=\"https://github.com/ydgunz/gunswap\">https://github.com/ydgunz/gunswap</Link>.\r\n\t\t\t\t</MessageBar>\r\n\t\t\t\t{this.state.errorMessage &&\r\n\t\t\t\t\t<MessageBar messageBarType={MessageBarType.severeWarning} isMultiline={false}>\r\n\t\t\t\t\t\t{this.state.errorMessage}\r\n\t\t\t \t \t</MessageBar>\r\n\t\t\t\t}\r\n\t\t\t\t<Stack horizontal>\r\n\t\t\t\t\t<PrimaryButton className=\"panel-main-button\" text=\"Juggle\" onClick={this.juggleInputPattern} />\r\n\t\t\t\t\t<DefaultButton className=\"panel-main-button\" text=\"Random Pattern\" onClick={this.juggleRandomPattern} />\t\r\n\t\t\t\t</Stack>\r\n\t\t\t\t<Label>Pattern Settings</Label>\r\n\t\t\t\t<TextField \r\n\t\t\t\t\tvalue={this.state.input} \r\n\t\t\t\t\tmultiline={true}\r\n\t\t\t\t\tonChange={this.updatePatternSettingsInput} \r\n\t\t\t\t\tautoAdjustHeight={true} />\r\n\t\t\t\t<Label>Example Patterns</Label>\r\n\t\t\t\t<ExamplePatternsList updatePattern={this.juggleExamplePattern} />\r\n\t\t\t</Stack>\r\n\t\t);\r\n\t}\r\n\r\n}","import { Pattern } from \"../simulator/Pattern\";\r\nimport { FindSiteswaps, FindSiteswapsConfig } from \"./Search\";\r\nimport { Siteswap } from \"../simulator/Siteswap\";\r\nimport { DwellPath, GetDwellPaths } from \"../simulator/DwellPath\";\r\nimport { PatternSettings } from \"../ui/PatternSettings\";\r\n\r\n\r\nexport function FindRandomPattern() : PatternSettings {\r\n\t\r\n\tvar config : FindSiteswapsConfig = {\r\n\t\tnumProps: 3+Math.round(Math.random()),\r\n\t\tminPeriod: 1,\r\n\t\tmaxPeriod: 6,\r\n\t\tincludeMultiplex: false,\r\n\t\tincludeExcited: true, // kept as false so we can string together patterns\r\n\t\tmaxSearches: 1000,\r\n\t\tmaxSiteswaps: 100,\r\n\t\tsync: Math.random() < 0.3,\r\n\t\texclude: []\r\n\t}\r\n\r\n\tvar siteswaps = FindSiteswaps(config);\t\r\n\r\n\tvar dwellPathXPositions = [-20,-10,0,10,20,30];\r\n\tvar dwellPathYPositions = [0,0,10,20,20,30];\r\n\r\n\tvar dwellPathPositions : string[] = [];\r\n\tfor(var i = 0; i < dwellPathXPositions.length; i++) {\r\n\t\tfor(var j = 0; j < dwellPathYPositions.length; j++) {\r\n\t\t\tdwellPathPositions.push(`(${dwellPathXPositions[i]},${dwellPathYPositions[j]})`);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction findRandomPattern() : PatternSettings {\r\n\r\n\t\tvar siteswap = siteswaps[Math.floor(Math.random()*siteswaps.length)];\t\r\n\t\t\r\n\t\tvar dwellPaths = [];\r\n\t\tfor (var i = 0; i < 1+Math.round(Math.random()); i++) {\t\t\t\r\n\t\t\tvar dwellPath = \"\";\r\n\t\t\tfor (var j = 0; j < 1+Math.round(Math.random()); j++) {\r\n\t\t\t\tdwellPath += dwellPathPositions[Math.floor(Math.random()*dwellPathPositions.length)];\r\n\t\t\t}\r\n\t\t\tdwellPaths.push(dwellPath);\t\t\r\n\t\t}\r\n\t\r\n\t\tvar dwellPath = dwellPaths.join(\".\");\r\n\t\r\n\t\tvar dwellRatio = 0.8;\r\n\r\n\t\tvar s = new Siteswap(siteswap);\r\n\t\tvar d = GetDwellPaths(dwellPath);\r\n\t\tvar p = new Pattern(s, d, dwellRatio, 0);\t\r\n\t\r\n\t\tvar beatDuration = 0.2;\r\n\r\n\t\t// todo - should be able to call this w/ breakOnCollision = true\r\n\t\tvar hasCollision = p.Simulate(20,beatDuration,false);\r\n\r\n\t\tif (hasCollision) {\r\n\t\t\treturn findRandomPattern();\r\n\t\t} else {\r\n\t\t\treturn {\t\r\n\t\t\t\tsiteswap: siteswap,\r\n\t\t\t\tbeatDuration: beatDuration,\r\n\t\t\t\tdwellPath: dwellPath,\r\n\t\t\t\tdwellRatio: dwellRatio\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\treturn findRandomPattern();\r\n\r\n}","import * as THREE from \"three\";\r\nimport { Pattern } from \"../simulator/Pattern\";\r\nimport { Object3D } from \"three\";\r\nimport { vec3 } from \"@tlaukkan/tsm\";\r\nimport { ShoulderZOffset, ShoulderHeight, ArmHalfLength, ShoulderXOffset, BasePatternHeight } from \"../simulator/JugglerConfig\";\r\n\r\nconst JugglerMeshMaterial = new THREE.MeshLambertMaterial( { color: 'grey' } );\r\n\r\ninterface JugglerMeshes {\r\n\tLeftHandMesh : THREE.Mesh;\r\n\tRightHandMesh : THREE.Mesh;\r\n\tLeftElbowMesh : THREE.Mesh;\r\n\tRightElbowMesh : THREE.Mesh;\r\n\tLeftShoulderMesh : THREE.Mesh;\r\n\tRightShoulderMesh : THREE.Mesh;\r\n\tLeftBicepMesh: THREE.Mesh;\r\n\tLeftForearmMesh: THREE.Mesh;\r\n\tRightBicepMesh: THREE.Mesh;\r\n\tRightForearmMesh: THREE.Mesh;\r\n\tLeftWristMesh: THREE.Mesh;\r\n\tRightWristMesh: THREE.Mesh;\r\n\tBodyMesh: THREE.Mesh;\r\n\tHeadMesh: THREE.Mesh;\r\n}\r\n\r\nexport class JugglingScene {\r\n\t\r\n\tprivate scene : THREE.Scene;\r\n\tprivate camera : THREE.PerspectiveCamera;\r\n\tprivate renderer : THREE.WebGLRenderer;\t\r\n\tprivate propMeshes : THREE.Mesh[];\r\n\tprivate jugglerMeshes : JugglerMeshes[];\r\n\tprivate camRadius : number;\r\n\tprivate camPhi : number;\r\n\tprivate camTheta : number;\r\n\tprivate startTime : number;\r\n\tpublic pattern : Pattern|null;\t\r\n\tprivate isMouseDown : boolean;\r\n\tprivate onMouseDownPosition : vec3;\r\n\tprivate onMouseDownTheta : number;\r\n\tprivate onMouseDownPhi : number;\r\n\tprivate positionToLookAt : vec3;\r\n\tpublic currentStep : number;\r\n\tpublic userControllingStep : boolean;\r\n\tpublic animationSpeed : number;\r\n\tpublic isPlaying : boolean;\r\n\r\n\tconstructor(container : HTMLDivElement, pattern : Pattern|null, width : number, height : number, animationSpeed: number) {\t\t\r\n\r\n\t\tthis.scene = new THREE.Scene();\r\n\t\tthis.camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );\r\n\t\tthis.positionToLookAt = new vec3();\t\r\n\t\t\r\n\t\tthis.renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\r\n\t\t\r\n\t\tthis.scene.add( new THREE.HemisphereLight(0xffffff, 0x000000, 1 ));\r\n\t\t//this.scene.background = new THREE.Color(\"white\");\r\n\r\n\t\tthis.propMeshes = [];\r\n\t\tthis.jugglerMeshes = [];\r\n\t\t\r\n\t\tthis.camRadius = 1;\r\n\t\tthis.camPhi = 0;\r\n\t\tthis.camTheta = Math.PI;\r\n\t\t\r\n\t\tthis.startTime = (new Date()).getTime();\r\n\t\t\r\n\t\tthis.pattern = pattern;\r\n\t\tif (pattern) {\r\n\t\t\tthis.UpdatePattern(pattern);\r\n\t\t}\r\n\t\t\r\n\t\tthis.isMouseDown = false;\r\n\t\tthis.onMouseDownPosition = new vec3();\r\n\t\tthis.onMouseDownTheta = 0;\r\n\t\tthis.onMouseDownPhi = 0;\r\n\t\tthis.userControllingStep = false;\r\n\t\tthis.currentStep = 0;\r\n\t\tthis.animationSpeed = animationSpeed;\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tthis.renderer.setSize(width, height);\r\n\r\n\t\tthis.renderer.domElement.addEventListener( 'mousemove', (event) => { \r\n\t\t\tthis.onDocumentMouseMove(event); \r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'mousedown', (event) => {\r\n\t\t\tthis.onDocumentMouseDown(event);\r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'mouseup', (event) => {\r\n\t\t\tthis.onDocumentMouseUp(event);\r\n\t\t}, false );\t\t\r\n\t\tthis.renderer.domElement.addEventListener( 'wheel', (event) => {\r\n\t\t\tthis.onDocumentMouseWheel(event);\r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'touchmove', (event) => {\r\n\t\t\tthis.onDocumentTouchMove(event);\r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'touchstart', (event) => {\r\n\t\t\tthis.onDocumentTouchStart(event);\r\n\t\t}, false );\r\n\t\tthis.renderer.domElement.addEventListener( 'touchmove', (event) => {\r\n\t\t\tthis.onDocumentTouchEnd(event);\r\n\t\t}, false );\r\n\t\t\r\n\t\tcontainer.append(this.renderer.domElement);\r\n\r\n\t\tthis.animate();\r\n\t} \r\n\r\n\tpublic UpdateStep(patternProgress : number) {\r\n\t\tthis.currentStep = Math.floor(this.pattern!.States.length*this.pattern!.Simulation!.NumStepsPerBeat*patternProgress);\r\n\t\tthis.userControllingStep = true;\r\n\t}\r\n\r\n\tpublic UpdatePattern(pattern : Pattern|null) {\r\n\t\tthis.pattern = pattern;\r\n\t\tif (pattern) {\r\n\t\t\tvar highestLowest = (pattern as Pattern).GetHeighestAndLowestPositionInSimulation();\r\n\t\t\tthis.positionToLookAt.y = highestLowest[0] - (highestLowest[0] - highestLowest[1])/2;\r\n\t\t\tthis.camRadius = (highestLowest[0] - (highestLowest[0] - highestLowest[1])/2) - BasePatternHeight/2;\r\n\t\t\tthis.updateCamera();\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tpublic Resize(width : number, height : number) {\r\n\t\tthis.renderer.setSize(width, height);\r\n\t\tthis.camera.aspect = width/height;\r\n\t\tthis.camera.updateProjectionMatrix();\r\n\t}\r\n\r\n\tprivate onDocumentMouseDown( event : MouseEvent ) {\r\n\t\tthis.isMouseDown = true;\r\n\t\tthis.onMouseDownTheta = this.camTheta;\r\n\t\tthis.onMouseDownPhi = this.camPhi;\r\n\t\tthis.onMouseDownPosition.x = event.clientX;\r\n\t\tthis.onMouseDownPosition.y = event.clientY;\r\n\t}\r\n\r\n\tprivate onDocumentTouchStart(event : TouchEvent) {\r\n\t\tthis.isMouseDown = true;\r\n\t\tthis.onMouseDownTheta = this.camTheta;\r\n\t\tthis.onMouseDownPhi = this.camPhi;\r\n\t\tthis.onMouseDownPosition.x = event.touches[0].clientX;\r\n\t\tthis.onMouseDownPosition.y = event.touches[0].clientY;\r\n\t}\r\n\r\n\tprivate onMove(x : number, y : number) {\r\n\t\tif ( this.isMouseDown ) {\r\n\t\t\tthis.camTheta = - ( ( x - this.onMouseDownPosition.x ) * 0.01 ) + this.onMouseDownTheta;\r\n\t\t\t\r\n\t\t\tvar dy = y - this.onMouseDownPosition.y;\r\n\t\t\t\r\n\t\t\tvar newCamPhi = ( ( dy ) * 0.01 ) + this.onMouseDownPhi;\r\n\r\n\t\t\tif (newCamPhi < Math.PI/2 && newCamPhi > -Math.PI/2) {\r\n\t\t\t\tthis.camPhi = newCamPhi;\r\n\t\t\t}\r\n\t\t\tthis.updateCamera();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onDocumentMouseMove(event : MouseEvent) {\r\n\t\tevent.preventDefault();\t\t\r\n\t\tthis.onMove(event.clientX, event.clientY);\r\n\t}\r\n\r\n\tprivate onDocumentTouchMove(event : TouchEvent) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.onMove(event.touches[0].clientX, event.touches[0].clientY);\r\n\t}\r\n\r\n\tprivate onDocumentMouseUp( event : MouseEvent) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.isMouseDown = false;\r\n\t}\r\n\r\n\tprivate onDocumentTouchEnd( event : TouchEvent) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.isMouseDown = false;\r\n\t}\r\n\r\n\tprivate onDocumentMouseWheel(event : WheelEvent) {\r\n\t\tthis.camRadius += event.deltaY*.05;\r\n\t\tthis.updateCamera();\r\n\t}\r\n\r\n\t// TODO - account for multiple jugglers\r\n\tprivate updateCamera() {\r\n\t\tthis.camera.position.x = this.camRadius * Math.sin( this.camTheta ) * Math.cos( this.camPhi );\r\n\t\tthis.camera.position.y = this.camRadius * Math.sin( this.camPhi ) + this.positionToLookAt.y;\r\n\t\tthis.camera.position.z = this.camRadius * Math.cos( this.camTheta ) * Math.cos( this.camPhi );\r\n\r\n\t\tthis.camera.lookAt(this.positionToLookAt.x, this.positionToLookAt.y, this.positionToLookAt.z);\r\n\t}\r\n\r\n\tprivate animate() {\r\n\r\n\t\tif (this.pattern && this.pattern.Simulation && (this.isPlaying || this.userControllingStep)) {\t\t\t\r\n\r\n\t\t\tif (!this.userControllingStep) {\r\n\t\t\t\tvar timeElapsed = ((new Date()).getTime() - this.startTime);\r\n\t\t\r\n\t\t\t\tvar patternTimeElapsed = timeElapsed % (this.pattern.States.length*this.pattern.Simulation.BeatDuration*1000/this.animationSpeed); \r\n\t\t\t\tthis.currentStep = Math.floor(patternTimeElapsed/(this.pattern.States.length*this.pattern.Simulation.BeatDuration*1000/this.animationSpeed)*(this.pattern.Simulation.NumStepsPerBeat*this.pattern.States.length));\r\n\t\t\t}\r\n\r\n\t\t\t// if we need to, remove some meshes from the scene\r\n\t\t\twhile (this.pattern.Props.length < this.propMeshes.length) {\r\n\t\t\t\tvar meshToRemove = this.propMeshes.pop() as Object3D;\r\n\t\t\t\tthis.scene.remove(meshToRemove);\r\n\t\t\t}\r\n\r\n\t\t\t// need to create some meshes\r\n\t\t\twhile (this.pattern.Props.length > this.propMeshes.length) {\r\n\t\t\t\tvar geometry = new THREE.SphereGeometry( 0.05, 40 );\r\n\t\t\t\tvar material = new THREE.MeshLambertMaterial( { color: 0x00ff00 } );\r\n\t\t\t\tvar propMesh = new THREE.Mesh( geometry, material );\r\n\t\t\t\t\r\n\t\t\t\tthis.propMeshes.push( propMesh );\r\n\t\t\t\tthis.scene.add( propMesh );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.propMeshes.forEach((mesh, propIx) => {\r\n\t\t\t\tvar position = this.pattern!.Simulation!.Props[propIx].Positions[this.currentStep];\r\n\t\t\t\tmesh.position.set(position.x, position.y, position.z);\r\n\t\t\t});\r\n\r\n\t\t\t// TODO - remove juggler meshes if necessary\r\n\t\t\twhile (this.pattern.Simulation.Jugglers.length > this.jugglerMeshes.length) {\t\t\t\t\r\n\t\t\t\tthis.addJugglerMeshes();\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tthis.jugglerMeshes.forEach((meshes, jugglerIx) => {\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar jugglerPositions = this.pattern!.Simulation!.Jugglers[jugglerIx];\r\n\t\t\t\t\r\n\t\t\t\tmeshes.BodyMesh.position.set(\r\n\t\t\t\t\t-ShoulderZOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep]),\r\n\t\t\t\t\t(ShoulderHeight-.4/2),\r\n\t\t\t\t\tShoulderZOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])\r\n\t\t\t\t);\r\n\t\t\t\tmeshes.BodyMesh.position.add(this.vec3ToTHREEVector3(jugglerPositions.BodyPositions[this.currentStep]));\r\n\r\n\t\t\t\tmeshes.HeadMesh.position.set(\r\n\t\t\t\t\t-ShoulderZOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep]),\r\n\t\t\t\t\t(ShoulderHeight+.17),\r\n\t\t\t\t\tShoulderZOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])\r\n\t\t\t\t);\r\n\t\t\t\tmeshes.HeadMesh.position.add(this.vec3ToTHREEVector3(jugglerPositions.BodyPositions[this.currentStep]));\r\n\r\n\t\t\t\tvar leftShoulderPosition = new THREE.Vector3(\r\n\t\t\t\t\t-ShoulderXOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])-ShoulderZOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep]),\r\n\t\t\t\t\t(ShoulderHeight),\r\n\t\t\t\t\t-ShoulderXOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep])+ShoulderZOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])\r\n\t\t\t\t);\r\n\t\t\t\tleftShoulderPosition.add(this.vec3ToTHREEVector3(jugglerPositions.BodyPositions[this.currentStep]));\r\n\r\n\t\t\t\tvar rightShoulderPosition = new THREE.Vector3(\r\n\t\t\t\t\tShoulderXOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])-ShoulderZOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep]),\r\n\t\t\t\t\t(ShoulderHeight),\r\n\t\t\t\t\tShoulderXOffset*Math.sin(jugglerPositions.BodyRotations[this.currentStep])+ShoulderZOffset*Math.cos(jugglerPositions.BodyRotations[this.currentStep])\r\n\t\t\t\t);\r\n\t\t\t\trightShoulderPosition.add(this.vec3ToTHREEVector3(jugglerPositions.BodyPositions[this.currentStep]));\r\n\r\n\t\t\t\tvar leftHandPosition = this.vec3ToTHREEVector3(jugglerPositions.LeftHandPositions[this.currentStep]);\r\n\t\t\t\tvar rightHandPosition = this.vec3ToTHREEVector3(jugglerPositions.RightHandPositions[this.currentStep]);\r\n\t\t\t\tvar leftElbowPosition = this.vec3ToTHREEVector3(jugglerPositions.LeftElbowPositions[this.currentStep]);\r\n\t\t\t\tvar rightElbowPosition = this.vec3ToTHREEVector3(jugglerPositions.RightElbowPositions[this.currentStep]);\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tmeshes.LeftHandMesh.position.copy(leftHandPosition);\r\n\t\t\t\tmeshes.RightHandMesh.position.copy(rightHandPosition);\r\n\t\t\t\tmeshes.LeftElbowMesh.position.copy(leftElbowPosition);\r\n\t\t\t\tmeshes.RightElbowMesh.position.copy(rightElbowPosition);\r\n\t\t\t\tmeshes.LeftShoulderMesh.position.copy(leftShoulderPosition);\r\n\t\t\t\tmeshes.RightShoulderMesh.position.copy(rightShoulderPosition);\r\n\r\n\t\t\t\tthis.positionAndRotateArm(leftElbowPosition, leftShoulderPosition, leftHandPosition, meshes.LeftBicepMesh, meshes.LeftForearmMesh, meshes.LeftWristMesh);\r\n\t\t\t\tthis.positionAndRotateArm(rightElbowPosition, rightShoulderPosition, rightHandPosition, meshes.RightBicepMesh, meshes.RightForearmMesh, meshes.RightWristMesh);\r\n\r\n\t\t\t\t// rotate hands\r\n\t\t\t\tvar rotation = new THREE.Quaternion();\r\n\t\t\t\trotation.setFromUnitVectors(new THREE.Vector3(0,1,0), this.vec3ToTHREEVector3(jugglerPositions.LeftHandDirections[this.currentStep]));\r\n\t\t\t\tmeshes.LeftHandMesh.setRotationFromQuaternion(rotation);\r\n\t\t\t\trotation.setFromUnitVectors(new THREE.Vector3(0,1,0), this.vec3ToTHREEVector3(jugglerPositions.RightHandDirections[this.currentStep]));\r\n\t\t\t\tmeshes.RightHandMesh.setRotationFromQuaternion(rotation);\r\n\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trequestAnimationFrame( () => this.animate() );\r\n\t\tthis.renderer.render( this.scene, this.camera );\r\n\t}\r\n\r\n\tprivate vec3ToTHREEVector3(vec3 : vec3) : THREE.Vector3 {\r\n\t\treturn new THREE.Vector3(vec3.x, vec3.y, vec3.z);\r\n\t}\r\n\r\n\tprivate positionAndRotateArm(elbowPosition: THREE.Vector3, shoulderPosition: THREE.Vector3, handPosition: THREE.Vector3, bicepMesh : THREE.Mesh, forearmMesh: THREE.Mesh, wristMesh: THREE.Mesh) {\r\n\t\t// bicep\r\n\t\tvar armDirection = new THREE.Vector3().subVectors(elbowPosition, shoulderPosition);\r\n\t\tvar arrow = new THREE.ArrowHelper(armDirection.clone().normalize(), shoulderPosition);\r\n\t\tbicepMesh.rotation.setFromVector3(arrow.rotation.toVector3());\r\n\t\tvar newPosition = new THREE.Vector3().addVectors(shoulderPosition, armDirection.multiplyScalar(0.5));\r\n\t\tbicepMesh.position.copy(newPosition);\r\n\t\t\r\n\t\t// forearm\r\n\t\tarmDirection = new THREE.Vector3().subVectors(elbowPosition, handPosition);\r\n\t\tarrow = new THREE.ArrowHelper(armDirection.clone().normalize(), handPosition);\r\n\t\tforearmMesh.rotation.setFromVector3(arrow.rotation.toVector3());\r\n\t\tnewPosition = new THREE.Vector3().addVectors(handPosition, armDirection.multiplyScalar(0.5)).add(armDirection.clone().normalize().multiplyScalar(.04));\r\n\t\tforearmMesh.position.copy(newPosition);\r\n\r\n\t\t// wrist\r\n\t\tnewPosition = handPosition.clone().add(armDirection.clone().normalize().multiplyScalar(.08));\r\n\t\twristMesh.position.copy(newPosition);\r\n\t}\r\n\r\n\tprivate getHandMesh() : THREE.Mesh {\r\n\t\tvar geometry = new THREE.SphereBufferGeometry( 0.06, 20, 20, 0, Math.PI*2, Math.PI/2, Math.PI);\r\n\t\tvar material = new THREE.MeshPhongMaterial( { color: 'grey', side: THREE.DoubleSide, flatShading: true } );\r\n\t\treturn new THREE.Mesh( geometry, material );\r\n\t}\r\n\r\n\tprivate getJointMesh(radius : number) : THREE.Mesh {\r\n\t\tvar geometry = new THREE.SphereGeometry( radius, 20);\r\n\t\treturn new THREE.Mesh( geometry, JugglerMeshMaterial );\r\n\t}\r\n\r\n\tprivate getArmCylinder(radius1 : number, radius2: number, length: number) : THREE.Mesh {\t\t \r\n    \tvar cylinder = new THREE.CylinderGeometry( radius2, radius1, length, 20, 20 );\r\n    \treturn new THREE.Mesh( cylinder, JugglerMeshMaterial );\r\n\t}\r\n\r\n\tprivate addJugglerMeshes() {\r\n\t\tvar jugglerMeshes =  {\t\r\n\t\t\tLeftHandMesh: this.getHandMesh(),\r\n\t\t\tRightHandMesh: this.getHandMesh(),\r\n\t\t\tLeftElbowMesh: this.getJointMesh(.04),\r\n\t\t\tRightElbowMesh: this.getJointMesh(.04),\r\n\t\t\tLeftShoulderMesh: this.getJointMesh(.025),\r\n\t\t\tRightShoulderMesh: this.getJointMesh(.025),\r\n\t\t\tLeftWristMesh: this.getJointMesh(.02),\r\n\t\t\tRightWristMesh: this.getJointMesh(.02),\r\n\t\t\tLeftBicepMesh: this.getArmCylinder(.025, .04, ArmHalfLength),\r\n\t\t\tLeftForearmMesh: this.getArmCylinder(.02, .04, ArmHalfLength-0.09),\r\n\t\t\tRightBicepMesh: this.getArmCylinder(.025, .04, ArmHalfLength),\r\n\t\t\tRightForearmMesh: this.getArmCylinder(.02, .04, ArmHalfLength-0.09),\r\n\t\t\tBodyMesh: new THREE.Mesh(new THREE.CylinderGeometry(0.15, 0.05, .4, 20, 20, false), JugglerMeshMaterial),\r\n\t\t\tHeadMesh: new THREE.Mesh(new THREE.SphereBufferGeometry(.1, 20, 20), JugglerMeshMaterial)\r\n\t\t};\r\n\r\n\t\tthis.jugglerMeshes.push(jugglerMeshes);\r\n\r\n\t\tthis.scene.add(jugglerMeshes.LeftElbowMesh);\r\n\t\t//this.scene.add(jugglerMeshes.LeftHandMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftShoulderMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightElbowMesh);\r\n\t\t//this.scene.add(jugglerMeshes.RightHandMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightShoulderMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftBicepMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftForearmMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightBicepMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightForearmMesh);\r\n\t\tthis.scene.add(jugglerMeshes.LeftWristMesh);\r\n\t\tthis.scene.add(jugglerMeshes.RightWristMesh);\r\n\t\tthis.scene.add(jugglerMeshes.BodyMesh);\r\n\t\tthis.scene.add(jugglerMeshes.HeadMesh);\r\n\t}\r\n\r\n}","import React, { Component, Ref } from 'react';\r\nimport * as THREE from \"three\";\r\nimport 'office-ui-fabric-react/dist/css/fabric.css';\r\nimport { Pattern } from '../simulator/Pattern';\r\nimport { JugglingScene } from './JugglingScene';\r\nimport { Slider, Stack, PrimaryButton, IconButton } from 'office-ui-fabric-react';\r\nimport { GenerateGif } from './GifWriter';\r\n\r\n\r\ninterface Props {\r\n\tpattern: Pattern\r\n}\r\n\r\ninterface State {\r\n\tdebugInfo: DebugInfo | null,\r\n\tuserControllingStep: boolean,\r\n\tisPlaying: boolean,\r\n\tanimationSpeed: number\r\n}\r\n\r\ninterface DebugInfo {\r\n\tstep: number\r\n}\r\n\r\nclass Viewport extends Component<Props,State> {\r\n\r\n\tCanvasContainerRef : HTMLDivElement | null;\r\n\r\n\tprivate jugglingScene : JugglingScene|undefined;\r\n\r\n\tconstructor(props : Props) {\r\n\t\tsuper(props);\t\t\r\n\t\tthis.CanvasContainerRef = null;\r\n\r\n\t\tthis.state = {\r\n\t\t\tdebugInfo: null,\r\n\t\t\tuserControllingStep: false,\r\n\t\t\tisPlaying: true,\r\n\t\t\tanimationSpeed: 0.5\r\n\t\t};\r\n\r\n\t\tthis.userUpdateStep = this.userUpdateStep.bind(this);\r\n\t\tthis.play = this.play.bind(this);\r\n\t\tthis.pause = this.pause.bind(this);\r\n\t}\t\t\r\n\r\n\tprivate play() {\r\n\t\tif (this.jugglingScene) {\r\n\t\t\tthis.jugglingScene.isPlaying = true;\r\n\t\t\tthis.jugglingScene.userControllingStep = false;\r\n\t\t\tthis.setState({isPlaying: true, userControllingStep: false});\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tprivate pause() {\r\n\t\tif (this.jugglingScene) {\r\n\t\t\tthis.jugglingScene.isPlaying = false;\r\n\t\t\tthis.setState({isPlaying: false});\r\n\r\n\t\t\t// GenerateGif(this.jugglingScene);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tprivate userUpdateStep(sliderValue : number) {\r\n\t\tif (this.jugglingScene) {\r\n\t\t\tthis.jugglingScene.UpdateStep(sliderValue);\r\n\t\t\t\r\n\t\t\t this.setState({\r\n\t\t\t\t debugInfo: {step: this.jugglingScene!.currentStep},\r\n\t\t\t\t userControllingStep: true\r\n\t\t\t});\r\n\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\t\t\r\n\t\tif (this.jugglingScene && this.jugglingScene.pattern !== this.props.pattern) {\r\n\t\t\t// if the pattern changed then user is no longer controlling step\r\n\t\t\tthis.jugglingScene.userControllingStep = false;\r\n\t\t\tthis.jugglingScene.isPlaying = true;\r\n\t\t\tthis.setState({userControllingStep: false, debugInfo: null, isPlaying: true});\r\n\t\t\tthis.jugglingScene.UpdatePattern(this.props.pattern);\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t\r\n\t\tvar width = (this.CanvasContainerRef as HTMLDivElement).offsetWidth;\r\n\t\tvar height = window.innerHeight-32; // subtracting size of button\r\n\t\tthis.jugglingScene = new JugglingScene(this.CanvasContainerRef as HTMLDivElement, this.props.pattern, width, height, this.state.animationSpeed);\r\n\r\n\t\t(window as any).jugglingScene = this.jugglingScene; // for debugging\r\n\r\n\t\twindow.addEventListener('resize', () => { \r\n\t\t\tif (this.CanvasContainerRef) {\r\n\t\t\t\tvar width = this.CanvasContainerRef.offsetWidth;\r\n\t\t\t\tvar height = window.innerHeight-32; // subtracting size of button\r\n\t\t\t\tif (this.jugglingScene) {\r\n\t\t\t\t\tthis.jugglingScene!.Resize(width, height); \r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t});\r\n\t}\r\n\r\n  \trender() {\r\n\t\tlet debug : JSX.Element = (<div></div>);\r\n\t\tif (this.state.debugInfo) {\r\n\t\t\tdebug = <div>{this.state.debugInfo.step}</div>\r\n\t\t}\r\n\r\n\t\tlet playbackButton;\r\n\t\tif (this.state.isPlaying && !this.state.userControllingStep) {\r\n\t\t\tplaybackButton = <IconButton iconProps={{iconName:\"Pause\"}} onClick={this.pause} />\r\n\t\t} else {\r\n\t\t\tplaybackButton = <IconButton iconProps={{iconName:\"Play\"}} onClick={this.play} />\t\t\t\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\t\t\t\t\r\n\t\t\t\t<div className=\"debug-info\">{debug}</div>\r\n\t\t\t\t<div ref={(DOMNodeRef) => {\r\n\t\t\t\t\tthis.CanvasContainerRef=DOMNodeRef;\r\n\t\t\t\t}}>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Stack horizontal>\r\n\t\t\t\t\t{playbackButton}\r\n\t\t\t\t\t<Slider\r\n\t\t\t\t\t\tclassName=\"viewport-slider\"\r\n\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\tmax={0.99}\r\n\t\t\t\t\t\tstep={.005}\r\n\t\t\t\t\t\tshowValue={false}\r\n\t\t\t\t\t\tonChange={(value: number) => this.userUpdateStep(value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Stack>\t\t\t\t\r\n\t\t\t</div>\t\t\t\r\n\t\t\t \r\n\t\t);\r\n  \t}\r\n}\r\n\r\nexport default Viewport;","import React, { Component, ReactNode } from 'react';\r\nimport { FindSiteswaps, FindSiteswapsConfig } from '../search/Search';\r\nimport { List, Stack, PrimaryButton, TextField, Label, Link } from 'office-ui-fabric-react';\r\nimport * as Yaml from 'js-yaml';\r\nimport { Siteswap } from '../simulator/Siteswap';\r\nimport { Pattern } from '../simulator/Pattern';\r\nimport { GetDwellPaths } from '../simulator/DwellPath';\r\nimport { PatternSettings } from './PatternSettings';\r\n\r\ninterface Props {\r\n\tupdatePattern : Function\r\n}\r\n\r\ninterface State {\r\n\tsiteswaps : string[];\r\n\tinput: string\r\n}\r\n\r\nexport class Search extends Component<Props,State> {\r\n\r\n\tconstructor(props : any) {\r\n\t\tsuper(props);\r\n\r\n\t\tvar defaultConfig : FindSiteswapsConfig = {\r\n\t\t\tnumProps: 3,\r\n\t\t\tminPeriod: 1,\r\n\t\t\tmaxPeriod: 5,\t\t\t\r\n\t\t\tincludeMultiplex: false,\r\n\t\t\tincludeExcited: true,\r\n\t\t\tmaxSearches: 1000,\r\n\t\t\tmaxSiteswaps: 100,\r\n\t\t\tsync: false,\r\n\t\t\texclude: []\r\n\t\t}\t\t\r\n\r\n\t\tthis.state = {\r\n\t\t\tsiteswaps: [],\r\n\t\t\tinput: Yaml.safeDump(defaultConfig),\r\n\t\t};\r\n\r\n\t\tthis.onRenderCell = this.onRenderCell.bind(this);\r\n\t\tthis.findSiteswaps = this.findSiteswaps.bind(this);\r\n\t\tthis.updateInput = this.updateInput.bind(this);\r\n\t\tthis.juggleSiteswap = this.juggleSiteswap.bind(this);\r\n\t}\r\n\r\n\tprivate juggleSiteswap(siteswap : string) {\r\n\t\tvar patternSettings : PatternSettings = {\r\n\t\t\tsiteswap: siteswap,\r\n\t\t\tdwellPath: \"(30)(10)\",\r\n\t\t\tbeatDuration: 0.24,\r\n\t\t\tdwellRatio: 0.8\r\n\t\t}\r\n\r\n\t\tvar s = new Siteswap(patternSettings.siteswap);\r\n\t\tvar pattern = new Pattern(s, GetDwellPaths(patternSettings.dwellPath), patternSettings.dwellRatio, 1);\r\n\t\tpattern.Simulate(100,patternSettings.beatDuration);\t\t\r\n\r\n\t\tthis.props.updatePattern(pattern, patternSettings);\r\n\t}\r\n\t\r\n\tprivate findSiteswaps() {\r\n\t\tvar config : FindSiteswapsConfig | undefined;\r\n\t\ttry {\r\n\t\t\tconfig = Yaml.safeLoad(this.state.input);\r\n\t\t} catch (e) {\r\n\t\t\t// TODO\r\n\t\t}\r\n\r\n\t\tif (config) {\r\n\t\t\tvar siteswaps = FindSiteswaps(config);\r\n\t\t\tthis.setState({siteswaps: siteswaps});\r\n\t\t}\t\t\r\n\t}\t\r\n\r\n\tprivate onRenderCell(item?: string, index?: number | undefined): ReactNode {\r\n\t\treturn (\r\n\t\t\t<div id={index!.toString()}>\r\n\t\t\t\t<Link onClick={() => {this.juggleSiteswap(item as string)}}>{item}</Link>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate updateInput(e : any) {\r\n\t\tthis.setState({\r\n\t\t\tinput: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tvar siteswapList = document.getElementsByClassName('siteswap-list');\r\n\t\tif (siteswapList) {\r\n\t\t\t(siteswapList[0] as any).style.height = (window.innerHeight - (siteswapList[0] as any).offsetTop).toString()+\"px\";\r\n\t\t\t(siteswapList[0] as any).style.overflow = \"auto\";\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<Stack>\r\n\t\t\t\t<PrimaryButton className=\"panel-main-button\" text=\"Find Siteswaps\" onClick={this.findSiteswaps} />\t\t\t\t\t\r\n\t\t\t\t<Label>Search Settings</Label>\r\n\t\t\t\t<TextField \r\n\t\t\t\t\tvalue={this.state.input} \r\n\t\t\t\t\tmultiline={true}\r\n\t\t\t\t\tonChange={this.updateInput} \r\n\t\t\t\t\tautoAdjustHeight={true} />\r\n\t\t\t\t<List className=\"siteswap-list\" items={this.state.siteswaps} onRenderCell={this.onRenderCell}></List>\r\n\t\t\t</Stack>\t\t\t\t\r\n\t\t)\r\n\t}\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Siteswap } from '../simulator/Siteswap';\r\nimport { Pattern } from '../simulator/Pattern';\r\nimport { GetDwellPaths } from '../simulator/DwellPath';\r\nimport { PivotItem, Pivot } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { PatternSettingsControls, PatternSettings } from './PatternSettings';\r\nimport 'office-ui-fabric-react/dist/css/fabric.css';\r\nimport Viewport from './Viewport';\r\nimport { PatternSimulation } from '../simulator/PatternSimulation';\r\nimport { Slider } from 'office-ui-fabric-react';\r\nimport { Search } from './Search';\r\nimport { parse } from 'query-string';\r\nimport * as lzutf8 from 'lzutf8';\r\n\r\ninterface State {\r\n\tpattern: Pattern,\r\n\tpatternSettings: PatternSettings\r\n}\r\n\r\nvar defaultPatternSettings : PatternSettings = {\t\r\n\tsiteswap: '51',\r\n\tbeatDuration: 0.24,\r\n\tdwellPath: \"(30)(10)\",\r\n\tdwellRatio: 0.8\r\n};\r\n\r\nclass Animator extends Component<any,State> {\r\n\r\n\tconstructor(props : any) {\r\n\t\tsuper(props);\t\t\r\n\r\n\t\tvar queryString = parse(window.location.search);\r\n\r\n\t\tif (queryString.siteswap) {\r\n\t\t\tdefaultPatternSettings.siteswap = queryString.siteswap.toString();\r\n\t\t}\r\n\r\n\t\tif (queryString.patternSettings) {\r\n\t\t\tvar queryStringPatternSettings = JSON.parse(lzutf8.decompress(queryString.patternSettings, {inputEncoding: \"Base64\"}));\r\n\t\t\tdefaultPatternSettings = queryStringPatternSettings;\r\n\t\t}\r\n\r\n\t\tthis.state = {\r\n\t\t\tpattern: new Pattern(new Siteswap(defaultPatternSettings.siteswap), GetDwellPaths(defaultPatternSettings.dwellPath), defaultPatternSettings.dwellRatio, 0),\r\n\t\t\tpatternSettings: defaultPatternSettings\r\n\t\t}\r\n\r\n\t\tthis.state.pattern.Simulate(100,0.24);\r\n\r\n\t\twindow.onresize = () => {\r\n\t\t\tthis.forceUpdate();\r\n\t\t}\r\n\r\n\t\tthis.updatePattern = this.updatePattern.bind(this);\r\n\t}\r\n\r\n\tprivate updatePattern(pattern : Pattern, patternSettings: PatternSettings) {\r\n\t\t\r\n\t\tvar patternSettingsQueryString = encodeURIComponent(lzutf8.compress(JSON.stringify(patternSettings),{outputEncoding: \"Base64\"}));\r\n\t\twindow.history.pushState('pattern', 'pattern', window.location.origin + window.location.pathname + '?patternSettings=' + patternSettingsQueryString);\r\n\t\tthis.setState({pattern: pattern, patternSettings: patternSettings});\t\t\r\n\t}\r\n\r\n  \trender() {\r\n\t\tlet patternSettings = <PatternSettingsControls updatePattern={this.updatePattern} patternSettings={this.state.patternSettings}></PatternSettingsControls>;\r\n\t\tlet search = <Search updatePattern={this.updatePattern}></Search>; \r\n\t\tlet viewport = <Viewport pattern={this.state.pattern} />;\r\n\t\t\r\n\t\tif (window.innerWidth > 900) {\r\n\t\t\treturn (\t\t\t\r\n\t\t\t\t<div className=\"ms-Grid\" dir=\"ltr\">\r\n\t\t\t\t\t<div className=\"ms-Grid-row\">\r\n\t\t\t\t\t\t<div className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg4\">\r\n\t\t\t\t\t\t<Pivot>\r\n\t\t\t\t\t\t\t<PivotItem headerText=\"Pattern\" itemIcon=\"Settings\">\r\n\t\t\t\t\t\t\t\t{patternSettings}\r\n\t\t\t\t\t\t\t</PivotItem>\r\n\t\t\t\t\t\t\t<PivotItem headerText=\"Siteswaps\" itemIcon=\"Search\">\r\n\t\t\t\t\t\t\t\t{search}\r\n\t\t\t\t\t\t\t</PivotItem>\r\n\t\t\t\t\t\t</Pivot>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"animator-layout-right ms-Grid-col ms-sm6 ms-md8 ms-lg8\">\r\n\t\t\t\t\t\t\t{viewport}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>      \t\t\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<Pivot >\r\n\t\t\t\t\t<PivotItem headerText=\"Animator\" itemIcon=\"Video\">\r\n\t\t\t\t\t\t{viewport}\r\n\t\t\t\t\t</PivotItem>\r\n\t\t\t\t\t<PivotItem headerText=\"Pattern\" itemIcon=\"Settings\">\r\n\t\t\t\t\t\t{patternSettings}\r\n\t\t\t\t\t</PivotItem>\r\n\t\t\t\t\t<PivotItem headerText=\"Siteswaps\" itemIcon=\"Search\">\r\n\t\t\t\t\t\t{search}\r\n\t\t\t\t\t</PivotItem>\t\t\t\t\t\r\n\t\t\t\t</Pivot>\r\n\t\t\t)\r\n\t\t}\r\n\r\n  \t}\r\n}\r\n\r\nexport default Animator;","import React from 'react';\r\nimport './App.css';\r\nimport Animator from './ui/Animator';\r\nimport { initializeIcons } from '@uifabric/icons';\r\ninitializeIcons();\r\n\r\nconst App: React.FC = () => {\r\n  \treturn (\r\n\t\t<Animator></Animator>\t\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}